{
  "version": 3,
  "sources": ["../../../../../exports/components/light-preview/light-preview.styles.js", "../../../../../internal/string-map.js", "../../../../../internal/replace-functions.js", "../../../../../exports/components/light-preview/light-preview.js"],
  "sourcesContent": ["import { css } from \"lit\";\n\nexport const previewStyles = css`\n  :host {\n    --border-color: lightgray;\n  }\n\n  :host,\n  [part~=\"base\"] {\n    max-width: 100%;\n  }\n\n  :host([resizing]) [part=~\"base\"] {\n    cursor: col-resize;\n  }\n\n  [part~=\"base\"] {\n    border: 1px solid var(--border-color);\n    border-radius: 3px;\n    display: grid;\n    grid-template-columns: minmax(0, 1fr);\n    grid-template-rows: minmax(0, auto) minmax(0, 1fr) repeat(\n        3,\n        minmax(0, auto)\n      );\n    height: 100%;\n    min-height: inherit;\n  }\n\n  [part~=\"panel-resizer\"] {\n    display: grid;\n    align-content: center;\n    border-color: transparent;\n    border-radius: 0;\n    border-inline-start: 1px solid var(--border-color);\n  }\n\n  :host(:not([resize-position=\"100\"])) [part~=\"panel-resizer\"] {\n    border-inline-end: 1px solid var(--border-color);\n  }\n\n  [part~=\"preview\"] {\n    display: grid;\n    grid-template-columns:\n      minmax(0, var(--start-panel-width, 1fr)) minmax(0, auto)\n      minmax(0, var(--end-panel-width, auto));\n    overflow: auto;\n    resize: vertical;\n    min-height: max-content;\n    width: 100%;\n    max-width: 100%;\n  }\n\n  [part~=\"start-panel\"] {\n    padding: 1rem;\n    min-width: 100%;\n    max-width: 100%;\n  }\n\n  [part~=\"end-panel\"] {\n    background-color: rgba(0, 0, 0, 0.025);\n  }\n\n  [part~=\"code-wrapper\"] {\n    border-top: 1px solid var(--border-color);\n  }\n\n  [part~=\"actions\"] {\n    display: grid;\n    align-items: center;\n    grid-auto-flow: column;\n    grid-template-columns: minmax(0, auto) minmax(0, 1fr) repeat(\n        auto-fill,\n        minmax(0, auto)\n      );\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  button[part~=\"source-code-toggle\"] {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    border-color: transparent;\n    border-top-left-radius: 0px;\n    border-top-right-radius: 0px;\n    border-top: 1px solid var(--border-color);\n    min-height: 100%;\n    font-size: 1em;\n    padding: 0.75rem;\n  }\n\n  [part~=\"source-code-toggle\"] svg {\n    transform-origin: 50% 50%;\n    transition: 0.25s transform ease;\n  }\n\n  [part~=\"source-code-toggle\"][aria-expanded=\"true\"] svg {\n    transform: rotate(180deg);\n  }\n\n  [part~=\"source-details\"]::part(summary) {\n    display: none;\n  }\n`;\n", "// @ts-check\n/**\n * @param {Record<string, unknown>} obj\n * @param {string} [spacer=\" \"]\n * @returns {string}\n */\nexport function stringMap(obj, spacer = \" \") {\n  let strings = [];\n\n  for (const [key, val] of Object.entries(obj)) {\n    if (Boolean(val)) {\n      strings.push(key);\n    }\n  }\n\n  return strings.join(spacer);\n}\n", "/**\n * @param {string} s - The string to replace\n * @param {number} start - The start index\n * @param {number} end - The end index\n * @param {string} substitute - the substituting string\n */\nexport function replaceRange(s, start, end, substitute) {\n  return s.substring(0, start) + substitute + s.substring(end);\n}\n\n/**\n * @param {string} text\n * @param {RegExp} regex\n */\nexport function replaceLast(text, regex) {\n  const matches = [...text.matchAll(regex)];\n\n  const lastMatch = matches[matches.length - 1];\n\n  if (!lastMatch) return text;\n  if (lastMatch.index == null) return text;\n\n  const { index } = lastMatch;\n\n  const start = index;\n  const end = index + lastMatch[0].length;\n  const substitution = \"</\" + lastMatch[1] + \">\";\n  return replaceRange(text, start, end, substitution);\n}\n", "// @ts-check\nimport { html } from \"lit\";\n\nimport { buttonStyles, baseStyles } from \"../../styles/base-styles.js\";\nimport { previewStyles } from \"./light-preview.styles.js\";\n\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport LightDisclosure from \"../light-disclosure/light-disclosure.js\";\nimport LightCode from \"../light-code/light-code.js\";\n\nimport { drag } from \"../../../internal/drag.js\";\nimport { clamp } from \"../../../internal/clamp.js\";\nimport { stringMap } from \"../../../internal/string-map.js\";\nimport { debounce } from \"../../../internal/debounce.js\";\nimport { resizeIcon } from \"../../../internal/resize-icon.js\";\nimport { BaseElement } from \"../../../internal/base-element.js\";\nimport { elementsToString } from \"../../../internal/elements-to-strings.js\";\nimport { dedent } from \"../../../internal/dedent.js\";\nimport { createPrismInstance } from \"../../../internal/prism-highlight.js\";\nimport { replaceLast } from \"../../../internal/replace-functions.js\";\n\nconst sourceCodeFallback = \"Show source code\";\n\n/**\n * LightPreview is a very lightweight code previewer designed to load your code sample\n *   inside of an iFrame for encapsulated viewing. `<light-preview>` uses PrismJS as it's\n * @customElement\n * @tagname light-preview\n *\n * @csspart base - The base wrapping element\n * @csspart preview - The wrapper around the iframe / div preview showing your code being run in the browser.\n * @csspart start-panel - The iframe or preview-div\n * @csspart preview-div - used for inline previews\n * @csspart iframe - used for iframe based previews (default)\n * @csspart panel-resizer - The button that resizes the panel\n * @csspart end-panel - The white space when dragging the resizer\n * @csspart source-details - The details element that shows the source code\n * @csspart code-wrapper - The div that wraps the <pre> + <code> elements containing your highlighted code\n * @csspart pre - The <pre> element wrapping the source code\n * @csspart code - The <code>  element wrapping the source code\n * @csspart source-code-toggle - The button to show the source code\n * @csspart actions - The buttons at the bottom of the code previewer\n * @csspart before-expanded-code - A wrapper around the \"before-expanded-code\" slot\n * @csspart after-expanded-code - A wrapper around the \"after-expanded-code\" slot\n * @csspart after-actions - A wrapper around the \"after-actions\" slot\n * @csspart source-code-toggle-icon - The caret icon in the source code toggle\n *\n * @slot resize-icon - The icon to display in the resizer button. Override this to provide your own icon.\n * @slot summary - What to display in source code expander\n * @slot source-code-toggle-icon - Slot in your own icon to override the default caret.\n * @slot above-actions - Additional actions placed above the source code toggle\n * @slot below-actions - Additional actions placed above the source code toggle\n * @slot actions - Slot in buttons / links to allow for additional actions in the bottom bar. These are placed inline.\n * @slot preview-html - If you want to run code that is slightly different from the source code you want to display, slot it into \"preview-html\"\n * @slot code - Used to display both source code and to power your preview in the iframe. If you slot in \"preview-html\", then it will only be used to show / highlight your source code.\n * @slot before-expanded-code - A slot to add actions such as buttons. This will sit above the source-code-toggle, and when code is expanded, will be *above* the expanded code.\n * @slot after-expanded-code - A slot to add actions such as buttons. This will sit above the source-code-toggle, and when code is expanded, will be *below* the expanded code.\n * @slot after-actions - A slot add actions below the source-code-toggle button.\n */\nexport default class LightPreview extends BaseElement {\n  /**\n   * @override\n   */\n  static baseName = \"light-preview\";\n\n  /**\n   * @override\n   */\n  static dependencies = {\n    \"light-disclosure\": LightDisclosure,\n    \"light-code\": LightCode,\n  };\n\n  /**\n   * @override\n   */\n  static styles = [baseStyles, buttonStyles, previewStyles];\n\n  /**\n   * @override\n   */\n  static properties = {\n    summary: {},\n    sandboxSettings: { reflect: true, attribute: \"sandbox-settings\" },\n    previewMode: { reflect: true, attribute: \"preview-mode\" },\n    open: { reflect: true, type: Boolean },\n    resizePosition: {\n      reflect: true,\n      type: Number,\n      attribute: \"resize-position\",\n    },\n    resizing: { reflect: true, type: Boolean },\n    scriptScope: { attribute: \"script-scope\" },\n    previewHtml: { attribute: \"preview-html\" },\n    unescapeBehavior: { attribute: \"unescape-behavior\" },\n\n    // <light-code> properties\n    disableHighlight: { type: Boolean, attribute: \"disable-highlight\" },\n    preserveWhitespace: { type: Boolean, attribute: \"preserve-whitespace\" },\n    highlightLines: { attribute: \"highlight-lines\" },\n    insertedLines: { attribute: \"inserted-lines\" },\n    deletedLines: { attribute: \"deleted-lines\" },\n    disableLineNumbers: {\n      type: Boolean,\n      reflect: true,\n      attribute: \"disable-line-numbers\",\n    },\n    lineNumberStart: { type: Number, attribute: \"line-number-start\" },\n    wrap: { reflect: true, attribute: \"wrap\" },\n    language: {},\n    code: {},\n    highlighter: { attribute: false, state: true },\n  };\n\n  constructor() {\n    super();\n\n    /**\n     * The sandbox settings to provide to the <iframe>\n     * @type {string}\n     */\n    this.sandboxSettings = \"\";\n\n    /**\n     * The text to provide in the <details> toggle button\n     * @type {string}\n     */\n    this.summary = sourceCodeFallback;\n\n    /**\n     * Set to true to not use an <iframe> for previewing\n     * @type {\"iframe\" | \"shadow-dom\"}\n     */\n    this.previewMode = \"iframe\";\n\n    /**\n     * When the resizer is being dragged, this will be true.\n     * @type {boolean}\n     */\n    this.resizing = false;\n\n    /**\n     * If `disableHighlight` is true, then you must pass in an element into `previewHtml` to be able to get\n     *   the code to run in the previewer.\n     * @type {string}\n     */\n    this.previewHtml = \"\";\n\n    /**\n     * Whether or not the source code is being shown\n     * @type {boolean}\n     */\n    this.open = false;\n\n    /**\n     * The current position of the resizer. 100 means all the way to right. 0 means all the way to left.\n     * @type {number}\n     */\n    this.resizePosition = 100;\n\n    /**\n     * @internal\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver = new ResizeObserver((entries) =>\n      this.handleResize(entries),\n    );\n\n    /**\n     * @internal\n     * @type {MutationObserverInit}\n     */\n    this.__mutationObserverConfig = {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    };\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.previewHtmlDebounce = debounce(\n      () => this.handleMutation(\"preview-html\"),\n      20,\n    );\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.codeDebounce = debounce(() => this.handleMutation(\"code\"), 20);\n\n    /**\n     * When using `preview-mode=\"shadow-dom\"`,\n     * There's a funky issue with previews where if you want the location of the shadowRoot\n     * you are, you can't get it. As a result, `<light-preview>` supports the idea of a \"scriptScope\"\n     * where `document` is bound to the current shadowRoot instead of the actual top level `document`\n     * For more info, check out this GitHub issue:\n     * @link {https://github.com/WICG/webcomponents/issues/717#issuecomment-1126786185}\n     *\n     * @type {\"document\" | \"shadow-dom\"}\n     */\n    this.scriptScope = \"document\";\n\n    // Light Code properties to forward\n\n    /**\n     * The language to highlight for.\n     * @type {string}\n     */\n    this.language = \"html\";\n\n    /**\n     * Preserve leading and trailing whitespace.\n     */\n    this.preserveWhitespace = false;\n\n    /**\n     * If disabled, its on you to provide `<pre><code></code></pre>`\n     * @type {boolean}\n     */\n    this.disableHighlight = false;\n\n    /**\n     * @type {string} - A string of possible lines to highlight. Example: \"{1-9, 16, 18}\"\n     */\n    this.highlightLines = \"\";\n\n    /**\n     * @type {string} - A string of lines that are inserted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.insertedLines = \"\";\n\n    /**\n     * @type {string} - A string of lines that are deleted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.deletedLines = \"\";\n\n    /**\n     * @type {boolean} whether or not to disable line numbers\n     */\n    this.disableLineNumbers = false;\n\n    /**\n     * Where to start counting indexes in the gutter. Note, this is purely for display purposes.\n     * @type {number}\n     */\n    this.lineNumberStart = 1;\n\n    /**\n     * We will take the code, wrap it in `<pre><code></code></pre>` and run it through\n     * Prism.js.\n     * If the element has `disableHighlight`, we will not touch their code. Instead they must pass in escapedHTML.\n     * @type {string}\n     */\n    this.code = \"\";\n\n    /**\n     * Points to an instance of Prism from \"prism-esm\" for adjusting highlighting, adding plugins, etc.\n     * @type {ReturnType<typeof createPrismInstance>}\n     */\n    this.highlighter = createPrismInstance();\n\n    /**\n     * @property\n     * @type {\"soft\" | \"hard\"}\n     * If `wrap=\"soft\"`, lines will wrap when they reach the edge of their container. If `wrap=\"none\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\n     */\n    this.wrap = \"soft\";\n\n    /**\n     * Whether or not to transform `&lt;/script>` into `<script>`\n     * If true, will run transform. If false, will leave the code as is.\n     *\n     * @type {\"all\" | \"last\" | \"none\"}\n     */\n    this.unescapeBehavior = \"last\";\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation on slotted preview-html\n   */\n  resetIframeCodeMutationObserver() {\n    if (this.previewHtmlMutationObserver) {\n      this.previewHtmlMutationObserver.disconnect();\n    }\n    this.previewHtmlMutationObserver = new MutationObserver((..._args) =>\n      this.previewHtmlDebounce(),\n    );\n\n    const targets =\n      this.findSlot(\"preview-html\")?.assignedElements({ flatten: true }) || [];\n\n    for (const target of targets) {\n      this.previewHtmlMutationObserver.observe(\n        target,\n        this.__mutationObserverConfig,\n      );\n    }\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation observer on slotted code\n   */\n  resetCodeMutationObserver() {\n    if (this.codeMutationObserver) {\n      this.codeMutationObserver.disconnect();\n    }\n    this.codeMutationObserver = new MutationObserver((..._args) =>\n      this.codeDebounce(),\n    );\n\n    const targets =\n      this.findSlot(\"code\")?.assignedElements({ flatten: true }) || [];\n\n    for (const target of targets) {\n      this.codeMutationObserver.observe(target, this.__mutationObserverConfig);\n    }\n  }\n\n  /**\n   * @internal\n   * @param {\"preview-html\" | \"code\"} variable\n   */\n  handleMutation(variable) {\n    if (variable === \"preview-html\") {\n      this.handleTemplate({ target: this.findSlot(\"preview-html\") });\n      return;\n    }\n\n    if (variable === \"code\") {\n      this.handleTemplate({ target: this.findSlot(\"code\") });\n      return;\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} name\n   * @returns {HTMLSlotElement | null | undefined}\n   */\n  findSlot(name) {\n    return this.shadowRoot?.querySelector(`slot[name='${name}']`);\n  }\n\n  /**\n   * @internal\n   * @param {Event | { target?: undefined | null | HTMLSlotElement }} e\n   */\n  handleTemplate(e) {\n    /**\n     * @type {HTMLSlotElement | null | undefined}\n     */\n    // @ts-expect-error\n    const slot = e.target;\n\n    if (slot == null) return;\n\n    const name = slot.getAttribute(\"name\");\n\n    if ([\"preview-html\", \"code\"].includes(name || \"\") === false) return;\n\n    let shouldReset = \"type\" in e && e.type === \"slotchange\";\n\n    let elements = slot.assignedElements({ flatten: true });\n\n    const code = dedent(elementsToString(...elements).trim());\n\n    if (name === \"preview-html\") {\n      if (shouldReset) this.resetIframeCodeMutationObserver();\n      this.previewHtml = code;\n      this.requestUpdate(\"previewHtml\");\n      return;\n    }\n\n    if (name === \"code\") {\n      if (shouldReset) this.resetCodeMutationObserver();\n      this.code = code;\n      this.requestUpdate(\"code\");\n      return;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  updateIframeContent() {\n    const code = this.previewHtml || this.code;\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\");\n\n    if (!iframe) return;\n\n    const content = `\n      <!doctype html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n        </head>\n        <body>\n          ${code}\n        </body>\n      </html>`;\n\n    iframe.srcdoc = content;\n  }\n\n  /**\n   * @internal\n   * @param {string} text\n   */\n  escapeCharacters(text) {\n    return text;\n    // return text.replaceAll(new RegExp(\"<\", \"g\"), \"&lt;\").replaceAll(new RegExp(\">\", \"g\"), \"&gt;\")\n  }\n\n  /**\n   * Only used to unescape things like `&lt;/script>` from slotted content.\n   * @internal\n   * @param {string} text\n   */\n  transformTags(text) {\n    const unescapeRegex = /&lt;\\/([\\w\\d\\.-_]+)>/g;\n    if (this.unescapeBehavior === \"last\") {\n      return replaceLast(text, unescapeRegex);\n    }\n\n    if (this.unescapeBehavior === \"all\") {\n      return text.replaceAll(unescapeRegex, \"</$1>\");\n    }\n\n    return text;\n  }\n\n  /**\n   * @override\n   * @internal\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate(changedProperties) {\n    if (\n      /** @type {Array<\"previewHtml\" | \"code\">} */ ([\n        \"previewHtml\",\n        \"code\",\n      ]).some((str) => changedProperties.has(str))\n    ) {\n      if (this._iframeDebounce != null)\n        window.clearTimeout(this._iframeDebounce);\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300);\n\n      if (this.shadowRoot) {\n        this.addShadowRootToPreview(this.shadowRoot);\n      }\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition();\n    }\n\n    super.willUpdate(changedProperties);\n  }\n\n  /**\n   * @internal\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth() {\n    const { left, right } = this.getBoundingClientRect();\n    const width = left + right;\n    this.cachedWidth = width;\n  }\n\n  /**\n   * @internal\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize(entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right;\n    // Resize when a primary panel is set\n    this.cachedWidth = width;\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.updateCachedWidth();\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this);\n\n      this.resetIframeCodeMutationObserver();\n      this.resetCodeMutationObserver();\n    });\n  }\n\n  /**\n   * @public\n   * Override this function to use your own highlighter\n   */\n  highlight(code = this.code) {\n    return code;\n  }\n\n  /**\n   * @private\n   * @param {HTMLElement | Element | ShadowRoot} root\n   */\n  addShadowRootToPreview(root) {\n    const previewDiv = root.querySelector(\"[part~='preview-div']\");\n\n    if (!previewDiv) return;\n\n    const transformedTags = this.transformTags(this.previewHtml || this.code);\n\n    if (!previewDiv.shadowRoot) {\n      previewDiv.attachShadow({ mode: \"open\" });\n    }\n\n    // This shouldnt happen. but :shrug:\n    if (!previewDiv.shadowRoot) return;\n\n    previewDiv.shadowRoot.innerHTML = transformedTags;\n\n    /**\n     * @param {HTMLElement} target\n     * @param {HTMLElement} source\n     */\n    function cloneAttributes(target, source) {\n      Array.from(source.attributes).forEach((attr) => {\n        target.setAttribute(attr.nodeName, attr.nodeValue || \"\");\n      });\n    }\n\n    previewDiv.shadowRoot?.querySelectorAll(\"script\").forEach((script) => {\n      if (\n        script.type === \"module\" ||\n        script.type.trim() === \"\" ||\n        script.type.includes(\"javascript\")\n      ) {\n        const newScript = document.createElement(\"script\");\n        newScript.innerHTML = script.innerHTML;\n\n        cloneAttributes(newScript, script);\n\n        if (this.scriptScope !== \"shadow-dom\") {\n          script.replaceWith(newScript);\n          return;\n        }\n\n        script.remove();\n\n        // https://github.com/WICG/webcomponents/issues/717#issuecomment-1126786185\n        const host = previewDiv;\n        const shadowRoot = previewDiv.shadowRoot;\n        /** @param {string} script */\n        const scopedEval = (script) =>\n          Function(\"document\", script).bind(host, shadowRoot, script)();\n        scopedEval(newScript.innerHTML);\n      }\n    });\n  }\n\n  /**\n   * @override\n   */\n  render() {\n    const finalHTML = html`\n      <div\n        part=${stringMap({\n          base: true,\n        })}\n      >\n        <div part=\"preview\">\n          ${when(\n            this.previewMode === \"shadow-dom\",\n            () => html`<div part=\"start-panel preview-div\"></div>`,\n            () => html`\n              <iframe\n                part=\"start-panel iframe\"\n                height=\"auto\"\n                frameborder=\"0\"\n                sandbox=${ifDefined(\n                  this.sandboxSettings ? this.sandboxSettings : null,\n                )}\n              ></iframe>\n            `,\n          )}\n          <button\n            id=\"panel-resizer\"\n            part=\"panel-resizer\"\n            role=\"separator\"\n            aria-valuenow=${this.resizePosition}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            @keydown=${this.handleResizerKeydown}\n            @pointerdown=${this.handleDrag}\n            @touchstart=${this.handleDrag}\n            class=${`light-button ${this.resizing ? \"is-active\" : \"\"}`}\n          >\n            <slot name=\"resize-icon\"> ${resizeIcon} </slot>\n          </button>\n\n          <div part=\"end-panel\"></div>\n        </div>\n\n        <div part=\"above-expanded-code\">\n          <slot name=\"above-expanded-code\"></slot>\n        </div>\n        <light-disclosure\n          id=\"details\"\n          ?open=${this.open}\n          @light-toggle=${(/** @type {Event} */ e) =>\n            (this.open = /** @type {LightDisclosure} */ (e.currentTarget).open)}\n          part=\"source-details\"\n          aria-labelledby=\"summary\"\n          exportparts=\"\n            summary:source-details__summary\n          \"\n        >\n          <div part=\"code-wrapper\">\n            <light-code\n              .preserveWhitespace=${this.preserveWhitespace}\n              .language=${this.language}\n              .code=${this.transformTags(this.code)}\n              wrap=${this.wrap}\n              ?disable-highlight=${this.disableHighlight}\n              ?disable-line-numbers=${this.disableLineNumbers}\n              .highlighter=${this.highlighter}\n              .highlightLines=${this.highlightLines}\n              .insertedLines=${this.insertedLines}\n              .deletedLines=${this.deletedLines}\n              .lineNumberStart=${this.lineNumberStart}\n            ></light-code>\n          </div>\n        </light-disclosure>\n        <div part=\"after-expanded-code\">\n          <slot name=\"after-expanded-code\"></slot>\n        </div>\n        <div part=\"actions\">\n          <div><slot name=\"before-toggle-button\"></slot></div>\n          <button\n            class=\"light-button\"\n            part=\"source-code-toggle\"\n            aria-expanded=${this.open}\n            aria-controls=\"details\"\n            @click=${() => (this.open = !this.open)}\n            type=\"button\"\n          >\n            <slot name=\"summary\">${this.summary || sourceCodeFallback}</slot>\n            <slot name=\"source-code-toggle-icon\">\n              <svg\n                part=\"source-code-toggle-icon\"\n                viewBox=\"0 0 24 24\"\n                height=\"24\"\n                width=\"24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n              >\n                <polyline points=\"6 9 12 15 18 9\"></polyline>\n              </svg>\n            </slot>\n          </button>\n          <slot name=\"actions\"></slot>\n        </div>\n        <div part=\"after-actions\"><slot name=\"after-actions\"></slot></div>\n      </div>\n\n      <div hidden>\n        <slot name=\"preview-html\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"code\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n    `;\n\n    return finalHTML;\n  }\n\n  /**\n   * @internal\n   */\n  get panelResizer() {\n    return this.shadowRoot?.querySelector(\"[part~='panel-resizer']\");\n  }\n\n  /** Drag stuff */\n  /**\n   * @internal\n   * @param {PointerEvent} event\n   */\n  handleDrag(event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\");\n    if (iframe) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      iframe.style.pointerEvents = \"none\";\n    }\n\n    this.resizing = true;\n\n    const target = event.currentTarget;\n\n    // @ts-expect-error\n    const halfWidth = (target?.offsetWidth || 0) / 2;\n\n    drag(this, {\n      onMove: (x, _y) => {\n        let newPositionInPixels = x + halfWidth;\n\n        this.resizePosition = clamp(\n          0,\n          this.pixelsToPercentage(newPositionInPixels),\n          100,\n        );\n        this.updateResizePosition();\n        this.resizing = true;\n      },\n      onStop: () => {\n        const iframe = this.shadowRoot?.querySelector(\"iframe\");\n        if (iframe) {\n          // Re-enable pointerevents so you can use tab keys etc.\n          iframe.style.pointerEvents = \"auto\";\n        }\n\n        this.resizing = false;\n      },\n      initialEvent: event,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  updateResizePosition(resizePosition = this.resizePosition) {\n    const startWidth = resizePosition;\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth;\n      this.style.setProperty(\n        \"--start-panel-width\",\n        `clamp(100px, ${startWidth}%, 100%)`,\n      );\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`);\n    }\n  }\n\n  /**\n   * @internal\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown(event) {\n    if (\n      [\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"Home\",\n        \"End\",\n      ].includes(event.key)\n    ) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * 1;\n\n      event.preventDefault();\n\n      if (event.key === \"ArrowLeft\") {\n        newPosition -= incr;\n      }\n\n      if (event.key === \"ArrowRight\") {\n        newPosition += incr;\n      }\n\n      if (event.key === \"Home\") {\n        newPosition = 100;\n      }\n\n      if (event.key === \"End\") {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(0, newPosition, 100);\n    }\n  }\n\n  /**\n   * @internal\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage(pixels) {\n    // @ts-expect-error\n    return (pixels / this.cachedWidth) * 100;\n  }\n}\n"],
  "mappings": "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",
  "names": ["script", "x", "iframe"]
}
