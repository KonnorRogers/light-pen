{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/src/directive-helpers.ts", "../../../../../node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/src/async-directive.ts", "../../../../../node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/src/directives/ref.ts", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/validators/too-long-validator.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/validators/too-short-validator.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/validators/value-missing-validator.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/mixins/custom-states-mixin.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/mixins/form-associated-mixin.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/mixins/vanilla-form-associated-mixin.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/mixins/lit-form-associated-mixin.js", "../../../../../node_modules/.pnpm/form-associated-helpers@0.0.10/node_modules/form-associated-helpers/exports/mixins/lit-textarea-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content and markers.\n *\n * Note: The only difference between this and clearPart() is that this also\n * removes the part's start node. This means that the ChildPart must own its\n * start node, ie it must be a marker node specifically for this part and not an\n * anchor from surrounding content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$clear();\n  part._$startNode.remove();\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "/**\n * @typedef {import(\"../types.js\").FormValue} FormValue\n */\n\n/**\n * @template {HTMLElement & { maxLength?: number, value: FormValue }} [T=(HTMLElement & { maxLength?: number, value: FormValue })]\n */\nexport const TooLongValidator = () => {\n  const obj = {\n    observedAttributes: [\"maxlength\"],\n    /**\n     * @param {T} _hostElement\n     * @param {number} maxLength\n     * @param {number} stringLength\n     */\n    message (_hostElement, maxLength, stringLength) {\n      // @TODO: This is an edge case with maxlength. minlength has the same issue.\n      // const maxLength = Number(element.maxLength || element.getAttribute(\"maxlength\"))\n      // const value = element.value\n      // const badInput = Object.assign(document.createElement(\"input\"), {\n      //   value,\n      //   maxLength\n      // })\n\n      // return badInput.validationMessage\n      return `Please shorten this text to ${maxLength} characters or less. (You are currently using ${stringLength} characters).`\n    },\n    /**\n     * @param {T} element\n     */\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      /** if its not a string, we really can't compare. */\n      let value = element.value ?? \"\"\n      if (typeof value !== \"string\") { return validity }\n\n      const maxLength = Number(element.maxLength ?? element.getAttribute(\"maxlength\"))\n\n      if (isNaN(maxLength) || maxLength == null || maxLength <= 0) { return validity }\n\n      if (value.length > maxLength) {\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element, maxLength, value.length) : obj.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"tooLong\")\n      }\n\n      return validity;\n    }\n  }\n\n  return obj\n}\n\n", "/**\n * @typedef {import(\"../types.js\")} FormValue\n */\n\n/**\n * @template {HTMLElement & { minLength?: number, value: FormValue }} [T=(HTMLElement & { minLength?: number, value: FormValue })]\n */\nexport const TooShortValidator = () => {\n  const obj = {\n    observedAttributes: [\"minlength\"],\n    /**\n     * @param {T} _hostElement\n     * @param {number} minLength\n     * @param {number} stringLength\n     */\n    message (_hostElement, minLength, stringLength) {\n      // @TODO: This is an edge case with minlength. maxlength has the same issue.\n      // const maxLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n      // const value = element.value\n      // const badInput = Object.assign(document.createElement(\"input\"), {\n      //   value,\n      //   maxLength\n      // })\n\n      // return badInput.validationMessage\n      return `Please lengthen this text to ${minLength} characters or more. (You are currently using ${stringLength} characters).`\n    },\n    /**\n     * @param {T} element\n     */\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      /** if its not a string, we really can't compare. */\n      let value = element.value ?? \"\"\n      if (typeof value !== \"string\") { return validity }\n\n      const minLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n\n      if (isNaN(minLength) || minLength == null || minLength <= 0) { return validity }\n\n      if (value.length < minLength) {\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element, minLength, value.length) : obj.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"tooShort\")\n      }\n\n      return validity;\n    }\n  }\n\n  return obj\n}\n", "/**\n * @typedef {{validationMessage: string }} Validateable\n */\n\n/**\n * @type {() => import(\"../types.js\").Validator<HTMLElement & { required?: boolean }>}\n */\nexport const ValueMissingValidator = () => {\n  /**\n   * @type {ReturnType<ValueMissingValidator>}\n   */\n  const obj = {\n    observedAttributes: [\"required\"],\n    message: Object.assign(document.createElement(\"input\"), {\n      required: true,\n    }).validationMessage,\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      const isRequired = element.required ?? element.hasAttribute(\"required\")\n\n      // Always true if the element isn't required.\n      if (!isRequired) {\n        return validity\n      }\n\n      if (!element.value) {\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element) : obj.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"valueMissing\")\n      }\n\n      return validity\n    }\n  }\n\n  return obj\n}\n\n", "/**\n * @typedef {import(\"./types.js\").GConstructable<HTMLElement & { internals: ElementInternals }> & { observedAttributes?: string[] }} ElementInternalsElement\n */\n\n/**\n * A mixin for using custom states without calling `this.internals.add()`\n * @template {ElementInternalsElement} T\n * @param {T} superclass\n */\nexport function CustomStatesMixin(superclass) {\n  return (\n    class extends superclass {\n      /**\n       * @param {string} state\n       */\n      addCustomState (state) {\n        try {\n          this.internals.states.add(state)\n        } catch (_) {\n          // Without this, test suite errors.\n        } finally {\n          this.setAttribute(`data-${state}`, \"\")\n        }\n      }\n\n      /**\n       * @param {string} state\n       */\n      deleteCustomState (state) {\n        try {\n          this.internals.states.delete(state)\n        } catch (_) {\n          // Without this, test suite errors.\n        } finally {\n          this.removeAttribute(`data-${state}`)\n        }\n      }\n\n      /**\n       * @param {string} state\n       * @param {boolean} bool\n       */\n      toggleCustomState (state, bool) {\n        if (bool === true) {\n          this.addCustomState(state)\n          return\n        }\n\n        if (bool === false) {\n          this.deleteCustomState(state)\n          return\n        }\n\n        this.toggleCustomState(state, !this.hasCustomState(state))\n      }\n\n      /**\n       * @param {string} state\n       * @returns {boolean}\n       */\n      hasCustomState (state) {\n        try {\n          return this.internals.states.has(state)\n        } catch (_) {\n          // Without this, test suite errors.\n        } finally {\n          return this.hasAttribute(`data-${state}`)\n        }\n      }\n    }\n  )\n}\n\n", "/**\n * Global type to add ElementInternals.states\n * Can go away when TS ships proper support.\n * @type {import(\"../../types/index.d.ts\")}\n */\n\n/**\n * A mixin to call `attachInternals()`\n * This is merely an implementation that sets the `formAssociated` static class property and calls `attachInternals()`. It doesn't do anything else. It is intentionally minimal.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./types.js\").GConstructable<HTMLElement> & {observedAttributes?: string[], formAssociated?: boolean}} T\n * @param {T} superclass\n */\nexport function FormAssociatedMixin(superclass) {\n  return (\n    /**\n     */\n    class extends superclass {\n      static formAssociated = superclass.formAssociated ?? true\n\n      /**\n      * @param {...any} args\n      */\n      constructor(...args) {\n        super(...args)\n\n        /**\n        * We dont make it private like #internals because then its not available in the mixin.\n        * @type {ReturnType<HTMLElement[\"attachInternals\"]>}\n        */\n        this.internals\n\n        if (!this.internals) {\n          this.internals = this.attachInternals()\n        }\n      }\n    }\n  )\n}\n", "import { ValueMissingValidator } from \"../validators/value-missing-validator.js\"\nimport { CustomStatesMixin } from \"./custom-states-mixin.js\"\nimport { FormAssociatedMixin } from \"./form-associated-mixin.js\"\n\n/**\n * @typedef {import(\"./types.js\").GConstructable<HTMLElement & Partial<{ formControl?: null | undefined | (HTMLElement & { value: any, defaultValue: any })}>> & { observedAttributes?: string[] }} FormAssociatedElement\n */\n\n/**\n * @param {HTMLElement & { disabled: boolean }} el\n */\nfunction isDisabled (el) {\n  return Boolean(el.matches(\":disabled\") || el.disabled)\n}\n\n/**\n * A mixin of form associated helpers that get added to a class with attachInternals.\n * This opinionated version extends the above formAssociated and handles common conventions I like.\n * Required properties: { value, disabled, formControl, validationTarget }\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {FormAssociatedElement} T\n * @param {T} superclass\n */\nexport function VanillaFormAssociatedMixin(superclass) {\n  return (\n    class extends CustomStatesMixin(FormAssociatedMixin(superclass)) {\n      /**\n       * @override\n       */\n      static get observedAttributes () {\n        const parentAttrs = new Set(/** @type {string[]} */ (super.observedAttributes) || [])\n\n        for (const validator of this.validators) {\n          if (!validator.observedAttributes) { continue }\n\n          for (const attr of validator.observedAttributes) {\n            parentAttrs.add(attr)\n          }\n        }\n\n        return [...parentAttrs]\n      }\n\n\n      /**\n       * Validators are static because they have `observedAttributes`, essentially attributes to \"watch\"\n       * for changes. Whenever these attributes change, we want to be notified and update the validator.\n       * @type {Array<import(\"../types.js\").Validator>}\n       */\n      static get validators () {\n        return [\n          ValueMissingValidator()\n        ]\n      }\n\n      /**\n       * @param {...any} args\n       */\n      constructor (...args) {\n        super(...args)\n\n        /**\n         * @type {ElementInternals[\"role\"]}\n         */\n        this.role = this.getAttribute(\"role\") || null\n\n        /**\n         * @type {FormData | string | File | null}\n         */\n        this.value = this.getAttribute(\"value\") || null\n\n        /**\n         * @type {FormData | string | File | null}\n         */\n        this.previousValue = this.value\n\n        /**\n         * @type {null | string}\n         */\n        this.defaultValue = this.getAttribute(\"value\") || null\n\n        /**\n         * @type {HTMLInputElement[\"name\"]}\n         */\n        this.name = this.getAttribute(\"name\") || \"\"\n\n        /**\n         * `this.type` is used by ElementInternals.\n         * @type {string}\n         */\n        this.type = this.getAttribute(\"type\") || this.localName || \"\"\n\n        /**\n         * Make sure if you're using a library that \"reflects\" properties to attributes, you don't reflect this `disabled.`\n         * @type {boolean}\n         */\n        this.disabled = isDisabled(this)\n\n        /**\n         * Generally forms can have \"required\", this may not be necessary here, but is a nice convention.\n         * @type {boolean}\n         */\n        this.required = this.hasAttribute(\"required\")\n\n        /**\n         * Tracks when a user blurs from a form control.\n         * @type {boolean}\n         */\n        this.hasInteracted = this.hasInteracted ?? false\n\n        /**\n         * Dirty tracks if the value has been changed.\n         * @type {boolean}\n         */\n        this.valueHasChanged = this.valueHasChanged ?? false\n\n        /**\n         * While not generally encouraged, you can add instance level validators.\n         *   These validators should not rely on an attribute, or should already have a \"watched\" attribute\n         *   to know when to re-run the validator.\n         * @type {Array<import(\"../types.js\").Validator>}\n         */\n        this.validators = []\n\n        // this.setFormValue(null)\n\n        // this.addEventListener(\"focusin\", this.handleInteraction)\n        this.addEventListener(\"focusout\", this.handleInteraction)\n        this.addEventListener(\"blur\", this.handleInteraction)\n        this.addEventListener(\"invalid\", this.handleInvalid)\n\n        // Private\n\n        /** This is a dirty check for custom errors. In Safari, {customError: true} always happens with `setValidity()`. This is the workaround. */\n        this.__hasCustomError = false\n        this.__customErrorMessage = \"\"\n      }\n\n      /**\n       * @param {Event} e\n       */\n      handleInvalid = (e) => {\n        if (e.target !== this) return\n        if (isDisabled(this)) return\n\n        if (this.value !== this.defaultValue) {\n          this.valueHasChanged = true\n        }\n\n        this.hasInteracted = true\n\n        this.updateInteractionState()\n      }\n\n      /**\n       * Sets `this.hasInteracted = true` to true when the users focus / clicks the element.\n       * @param {Event} e\n       */\n      handleInteraction = (e) => {\n        if (isDisabled(this)) return\n\n        if (!this.matches(\":focus-within\") && this.valueHasChanged) {\n          this.hasInteracted = true\n        }\n        this.updateValidity()\n      }\n\n      get allValidators () {\n        /**\n         * @type {Array<import(\"../types.js\").Validator>}\n         */\n        // @ts-expect-error\n        const staticValidators = this.constructor.validators || []\n\n        /**\n         * @type {Array<import(\"../types.js\").Validator>}\n         */\n        const validators = this.validators || []\n        return [...staticValidators, ...validators]\n      }\n\n      get willShowValidationMessage () {\n        return (isDisabled(this)) && this.hasInteracted === true\n      }\n\n      get labels () {\n        return /** @type {NodeListOf<HTMLLabelElement>} */ (this.internals.labels)\n      }\n\n      get validity () {\n        return this.internals.validity\n      }\n\n      get validationMessage () {\n        return this.internals.validationMessage\n      }\n\n      get willValidate () {\n        return this.internals.willValidate\n      }\n\n      /**\n       * This function technically does not exist with internals, but exists on native form elements.\n       *   This is backported for users familiar with the API.\n       * @param {string} message\n       */\n      setCustomValidity (message) {\n        if (!message) {\n          this.__hasCustomError = false\n          this.__customErrorMessage = \"\"\n          this.setValidity({})\n          return\n        }\n\n        this.__hasCustomError = true\n        this.__customErrorMessage = message\n        this.internals.setValidity({customError: true}, message)\n      }\n\n      /**\n       * @param {string} name\n       * @param {string} oldVal\n       * @param {string} newVal\n       */\n      attributeChangedCallback(name, oldVal, newVal) {\n        // @ts-expect-error\n        if (typeof super.attributeChangedCallback === \"function\") {\n          // @ts-expect-error\n          super.attributeChangedCallback(name, oldVal, newVal)\n        }\n\n        if (newVal === oldVal) {\n          return\n        }\n\n        if (name === \"role\") {\n          this.internals.role = newVal || null\n        }\n\n        if (name === \"value\") {\n          this.defaultValue = newVal\n\n          if (!this.hasInteracted && !this.valueHasChanged) {\n            this.value = this.defaultValue\n            this.setFormValue(this.value, this.value)\n          }\n        }\n\n        if (name === \"disabled\") {\n          this.disabled = Boolean(newVal)\n        }\n\n        this.updateValidity()\n      }\n\n      /**\n      * Called when the form is being reset. (e.g. user pressed `<input[type=reset]>` button). Custom element should clear whatever value set by the user.\n      * @returns {void}\n      */\n      formResetCallback() {\n        if (\"formControl\" in this && this.formControl) {\n          this.formControl.value = this.defaultValue\n        }\n\n        this.resetValidity()\n        this.value = this.defaultValue\n        this.hasInteracted = false\n        this.valueHasChanged = false\n        this.updateValidity()\n        this.setFormValue(this.defaultValue, this.defaultValue)\n      }\n\n      /**\n      * Called when the disabled state of the form changes\n      * @param {boolean} isDisabled\n      * @returns {void}\n      */\n      formDisabledCallback(isDisabled) {\n        this.disabled = isDisabled\n        this.resetValidity()\n        this.updateValidity()\n      }\n\n      /**\n      * Called when the browser is trying to restore element\u2019s state to state in which case reason is \u201Crestore\u201D, or when the browser is trying to fulfill autofill on behalf of user in which case reason is \u201Cautocomplete\u201D. In the case of \u201Crestore\u201D, state is a string, File, or FormData object previously set as the second argument to setFormValue.\n      * @param {string | File | FormData | null} state\n      * @param {string} reason\n      * @returns {void}\n      */\n      formStateRestoreCallback(state, reason) {\n        this.value = state\n\n        if (this.formControl) {\n          this.formControl.value = state\n        }\n\n        this.resetValidity()\n        this.updateValidity()\n\n      }\n\n      // Additional things not added by the `attachInternals()` call.\n\n      /**\n       * This should generally not be used by end users. This is intended for custom validators.\n       * @param {Parameters<ElementInternals[\"setValidity\"]>} params\n       */\n      setValidity (...params) {\n        let flags = params[0]\n        let message = params[1]\n\n        let anchor = params[2]\n\n        if (!anchor) {\n          const validationTarget = this.validationTarget\n          anchor = validationTarget\n        }\n\n        this.internals.setValidity(flags, message, anchor)\n        this.updateInteractionState()\n      }\n\n      reportValidity () {\n        this.updateValidity()\n        return this.internals.reportValidity()\n      }\n\n      checkValidity () {\n        this.updateValidity()\n        return this.internals.checkValidity()\n      }\n\n      /**\n        * `validationTarget` is used for displaying native validation popups as the \"anchor\"\n        * @type {undefined | HTMLElement}\n        */\n      get validationTarget () {\n        return this.formControl || undefined\n      }\n\n      /**\n        * @param {Parameters<ElementInternals[\"setFormValue\"]>} args\n        */\n      setFormValue (...args) {\n        // Dirty tracking of values.\n        if (this.value !== this.defaultValue) {\n          this.valueHasChanged = true\n        }\n\n        this.internals.setFormValue(...args)\n        this.updateValidity()\n      }\n\n      /**\n       * Returns the form attached to the element\n       * @returns {ReturnType<ElementInternals[\"form\"]>}\n       */\n      get form () {\n        return this.internals.form\n      }\n\n      resetValidity () {\n        this.setCustomValidity(\"\")\n        this.setValidity({})\n      }\n\n      updateValidity () {\n        if (isDisabled(this)) {\n          this.resetValidity()\n          // We don't run validators on disabled thiss to be inline with native HTMLElements.\n          // https://codepen.io/paramagicdev/pen/PoLogeL\n          return\n        }\n\n        const validators = /** @type {{allValidators?: Array<import(\"../types.js\").Validator>}} */ (/** @type {unknown} */ (this)).allValidators\n\n        if (!validators) {\n          this.setValidity({})\n          return\n        }\n\n        const customError = Boolean(this.__hasCustomError)\n        const flags = {\n          customError\n        }\n\n        const formControl = this.formControl || undefined\n\n        let finalMessage = \"\"\n\n        for (const validator of validators) {\n          const { isValid, message, invalidKeys } = validator.checkValidity(this)\n\n          if (isValid) { continue }\n\n          if (!finalMessage) {\n            finalMessage = message\n          }\n\n          if (invalidKeys?.length >= 0) {\n            // @ts-expect-error\n            invalidKeys.forEach((str) => flags[str] = true)\n          }\n        }\n\n        // This is a workaround for preserving custom errors\n        if (!finalMessage) {\n          finalMessage = this.validationMessage || this.__customErrorMessage\n        }\n\n        this.setValidity(flags, finalMessage, formControl)\n      }\n\n      updateInteractionState () {\n        if (isDisabled(this)) {\n          this.addCustomState(\"disabled\")\n          this.deleteCustomState(\"invalid\")\n          this.deleteCustomState(\"user-invalid\")\n          this.deleteCustomState(\"valid\")\n          this.deleteCustomState(\"user-valid\")\n          return\n        }\n\n        this.deleteCustomState(\"disabled\")\n\n        if (this.validity.valid) {\n          this.deleteCustomState(\"invalid\")\n          this.deleteCustomState(\"user-invalid\")\n          this.addCustomState(\"valid\")\n          this.toggleCustomState(\"user-valid\", this.hasInteracted && this.valueHasChanged)\n        } else {\n          this.deleteCustomState(\"valid\")\n          this.deleteCustomState(\"user-valid\")\n          this.addCustomState(\"invalid\")\n          this.toggleCustomState(\"user-invalid\", this.hasInteracted && this.valueHasChanged)\n        }\n      }\n    }\n  )\n}\n\n", "import { VanillaFormAssociatedMixin } from \"./vanilla-form-associated-mixin.js\"\n\nconst formProperties = Object.freeze({\n  role: {reflect: true},\n  name: {reflect: true},\n  type: {reflect: true},\n  /**\n   * Don't reflect \"disabled\". It breaks the `formDisabledCallback` on formAssociated elements when used with `<fieldset disabled>`.\n   *   https://github.com/whatwg/html/issues/8365\n   */\n  disabled: {type: Boolean},\n  required: {reflect: true, type: Boolean},\n  defaultValue: {attribute: \"value\", reflect: true},\n  valueHasChanged: {type: Boolean, attribute: false, state: true},\n  hasInteracted: {attribute: false, type: Boolean, state: true},\n  formControl: {attribute: false, state: true},\n  value: {attribute: false, state: true},\n})\n\nLitFormAssociatedMixin.formProperties = formProperties\n\n/**\n * An extension of the VanillaFormAssociatedMixin intended for LitElement by providing formProperties and willUpdate() callbacks with the appropriate properties.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./vanilla-form-associated-mixin.js\").FormAssociatedElement} T\n * @param {T} superclass\n */\nexport function LitFormAssociatedMixin(superclass) {\n  const finalClass = class extends VanillaFormAssociatedMixin(superclass) {\n    /**\n      * @param {...any} args\n      */\n    constructor (...args) {\n      super(...args)\n\n      const ctor = /** @type {{properties?: { disabled?: { reflect?: boolean }}}} */ (/** @type {unknown} */ (this.constructor))\n      if (ctor.properties?.disabled?.reflect === true) {\n        console.warn(`The following element has their \"disabled\" property set to reflect.`)\n        console.warn(this)\n        console.warn(\"For further reading: https://github.com/whatwg/html/issues/8365\")\n      }\n    }\n\n\n    /**\n     * @type {import(\"lit\").LitElement[\"willUpdate\"]}\n     */\n    willUpdate (changedProperties) {\n      // @ts-expect-error\n      if (typeof super.willUpdate !== \"function\") {\n        return\n      }\n\n      if (changedProperties.has(\"formControl\")) {\n        this.formControl?.addEventListener(\"focusout\", this.handleInteraction)\n        this.formControl?.addEventListener(\"blur\", this.handleInteraction)\n        this.formControl?.addEventListener(\"click\", this.handleInteraction)\n      }\n\n      if (\n        changedProperties.has(\"formControl\")\n        || changedProperties.has(\"defaultValue\")\n        || changedProperties.has(\"value\")\n      ) {\n        this.setFormValue(this.value, this.value)\n      }\n\n      // @ts-expect-error\n      super.willUpdate(changedProperties)\n    }\n  }\n\n  return /** @type {ReturnType<typeof VanillaFormAssociatedMixin<T>> & typeof finalClass} */ (finalClass)\n}\n\n", "import { TooLongValidator } from \"../validators/too-long-validator.js\"\nimport { TooShortValidator } from \"../validators/too-short-validator.js\"\nimport { LitFormAssociatedMixin } from \"./lit-form-associated-mixin.js\"\n\nLitTextareaMixin.formProperties = Object.freeze(\n  Object.assign(\n    {\n      autocomplete: {},\n      wrap: {},\n      readOnly: {attribute: \"readonly\", type: Boolean, reflect: true},\n      placeholder: {},\n      dirName: {},\n      rows: {type: Number},\n      cols: {type: Number},\n\n      // Validation\n      maxLength: {attribute: \"maxlength\", type: Number},\n      minLength: {attribute: \"minlength\", type: Number},\n    },\n    LitFormAssociatedMixin.formProperties\n  )\n)\n\n/**\n * A mixin for build a `<textarea>` specifically for Lit.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./vanilla-form-associated-mixin.js\").FormAssociatedElement} T\n * @param {T} superclass\n */\nexport function LitTextareaMixin(superclass) {\n  // This looks weird, but it's the only way to correctly cast the TextAreaMixin to have a \"typesafe\" value.\n  // from `{value: string | File | FormData | null}` to `{value: string}`\n  /** @type {T & import(\"./types.js\").GConstructable<{defaultValue: string, value: string}>} */\n  // @ts-expect-error\n  const modifiedSuperclass = superclass\n\n  return (\n    /**\n      * @implements {HTMLTextAreaElement}\n      */\n    class extends LitFormAssociatedMixin(modifiedSuperclass) {\n\n      /**\n       * @override\n       * @type {Array<import(\"../types.js\").Validator>}\n       */\n      static get validators () {\n        return [\n          ...super.validators,\n          TooLongValidator(),\n          TooShortValidator(),\n        ]\n      }\n\n      static get properties () {\n        /**\n          * @type {null | import(\"lit\").PropertyValues}\n          */\n        // @ts-expect-error\n        const properties = super.properties\n        if (properties) {\n          return {...LitTextareaMixin.formProperties, ...properties}\n        }\n\n\n        return LitTextareaMixin.formProperties\n      }\n      /**\n        * @param {...any} args\n        */\n      constructor (...args) {\n        super(...args)\n\n        /**\n          * @type {HTMLTextAreaElement[\"autocomplete\"]}\n          */\n        this.autocomplete = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"wrap\"]}\n          */\n        this.wrap = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"value\"]}\n          */\n        this.value = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"defaultValue\"]}\n          */\n        this.defaultValue = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"maxLength\"]}\n          */\n        this.maxLength = -1\n\n        /**\n          * @type {HTMLTextAreaElement[\"minLength\"]}\n          */\n        this.minLength = -1\n\n        /**\n          * @type {HTMLTextAreaElement[\"readOnly\"]}\n          */\n        this.readOnly = false\n\n        /**\n          * @type {HTMLTextAreaElement[\"placeholder\"]}\n          */\n        this.placeholder = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"required\"]}\n          */\n        this.required = false\n\n        /**\n          * @type {HTMLTextAreaElement[\"dirName\"]}\n          */\n        this.dirName = \"\"\n\n        /** @type {HTMLTextAreaElement[\"selectionDirection\"]} */\n        this.selectionDirection = \"forward\"\n\n        /**\n          * @type {number}\n          */\n        this.rows = 2\n\n        /**\n          * @type {number}\n          */\n        this.cols = 20\n      }\n\n      /**\n        * @param {Parameters<HTMLTextAreaElement[\"setSelectionRange\"]>} args\n        */\n      setSelectionRange (...args) {\n        const formControl = this.formControl\n\n        if (formControl && \"selectionRange\" in formControl) {\n          /** @type {HTMLTextAreaElement} */ (/** @type {unknown} */ (formControl)).setSelectionRange(...args)\n        }\n      }\n\n      /**\n        * @param {[replacement: string, start: number, end: number, selectionMode?: SelectionMode] | [replacement: string]} args\n        */\n      setRangeText (...args) {\n        const formControl = this.formControl\n\n        if (formControl && \"setRangeText\" in formControl) {\n          // @ts-expect-error\n          /** @type {HTMLTextAreaElement} */ (/** @type {unknown} */ (formControl)).setRangeText(...args)\n        }\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"textLength\"]}\n        */\n      get textLength () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"textLength\" in formControl) {\n          return formControl.textLength\n        }\n\n        return 0\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"selectionStart\"]}\n        */\n      get selectionStart () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"selectionStart\" in formControl) {\n          return formControl.selectionStart\n        }\n\n        return 0\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"selectionStart\"]}\n        */\n      get selectionEnd () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"selectionEnd\" in formControl) {\n          return formControl.selectionEnd\n        }\n\n        return 0\n      }\n\n      /**\n        * @type {HTMLTextAreaElement[\"select\"]}\n        */\n      select () {\n        const formControl = this.formControl\n\n        if (formControl) {\n          /** @type {HTMLTextAreaElement} */ (formControl).select?.()\n        }\n      }\n    }\n  )\n}\n"],
  "mappings": "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",
  "names": ["_ChildPart", "ChildPart", "_$LH", "isSingleExpression", "part", "strings", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_$notifyConnectionChanged", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "part", "attributeIndex", "super", "_$initialize", "_$isConnected", "isClearingDirective", "reconnected", "disconnected", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "_ref", "nothing", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "options", "host", "element", "isConnected", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "disconnected", "reconnected", "TooLongValidator", "obj", "_hostElement", "maxLength", "stringLength", "element", "validity", "value", "TooShortValidator", "obj", "_hostElement", "minLength", "stringLength", "element", "validity", "value", "ValueMissingValidator", "obj", "element", "validity", "CustomStatesMixin", "superclass", "state", "bool", "FormAssociatedMixin", "superclass", "_a", "args", "__publicField", "isDisabled", "el", "VanillaFormAssociatedMixin", "superclass", "CustomStatesMixin", "FormAssociatedMixin", "args", "__publicField", "e", "parentAttrs", "validator", "attr", "ValueMissingValidator", "staticValidators", "validators", "message", "name", "oldVal", "newVal", "state", "reason", "params", "flags", "anchor", "formControl", "finalMessage", "isValid", "invalidKeys", "str", "formProperties", "LitFormAssociatedMixin", "superclass", "VanillaFormAssociatedMixin", "args", "changedProperties", "LitTextareaMixin", "LitFormAssociatedMixin", "superclass", "modifiedSuperclass", "TooLongValidator", "TooShortValidator", "properties", "args", "formControl"]
}
