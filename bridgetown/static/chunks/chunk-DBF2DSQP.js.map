{
  "version": 3,
  "sources": ["../../../../../exports/components/light-disclosure/light-disclosure.js"],
  "sourcesContent": ["import { html, css } from \"lit\";\nimport { baseStyles } from \"../../styles/base-styles.js\";\nimport { BaseElement } from \"../../../internal/base-element.js\";\n\nfunction motionReduced() {\n  return (\n    /** @type {any} */ (\n      window.matchMedia(`(prefers-reduced-motion: reduce)`)\n    ) === true ||\n    window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true\n  );\n}\n\n/**\n * A `<details>` element packaged nicely to animate like a disclosure.\n *\n * @customElement\n * @tagname light-disclosure\n *\n * @slot default - The code to use for highlighting\n */\nexport default class LightDisclosure extends BaseElement {\n  /**\n   * @override\n   */\n  static baseName = \"light-disclosure\";\n\n  /**\n   * @override\n   */\n  static styles = [\n    baseStyles,\n    css`\n      [part~=\"content-base\"] {\n        display: grid;\n        grid-template-rows: 0fr;\n        transition: grid-template-rows 300ms ease-in-out;\n      }\n\n      [part~=\"content\"] {\n        overflow: hidden;\n      }\n\n      details[open][expanded] [part~=\"content-base\"] {\n        grid-template-rows: 1fr;\n      }\n\n      summary {\n        padding: 0.4em 0.6em;\n        cursor: pointer;\n      }\n\n      summary:hover {\n        background-color: rgba(0, 0, 0, 0.05);\n      }\n\n      @media (prefers-reduced-motion: reduce) {\n        [part~=\"content-base\"] {\n          transition: none;\n        }\n        details[open] [part~=\"content-base\"] {\n          grid-template-rows: 1fr;\n        }\n      }\n    `,\n  ];\n\n  /**\n   * @override\n   */\n  static properties = {\n    summary: {},\n    open: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    /**\n     * @type {string}\n     */\n    this.summary = \"\";\n\n    /**\n     * @type {boolean}\n     */\n    this.open = false;\n\n    /**\n     * @internal\n     * This is used because Safari has strange timing on the \"toggle\" event. If we don't use this,\n     *   our initial opening of the disclosure gets clipped and is like a normal `<details>`\n     */\n    this._openOnToggle = true;\n  }\n\n  // TODO: Add a mutationObserver for when it connects\n\n  /**\n   * @override\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate(changedProperties) {\n    const details = this.details;\n\n    if (details && changedProperties.has(\"open\")) {\n      if (!this.open) {\n        if (details.hasAttribute(\"expanded\")) {\n          details.removeAttribute(\"expanded\");\n        } else {\n          details.open = this.open;\n        }\n\n        // \"transitionend\" will fire and set \"open\" on the details element accordingly.\n        // If motion is reduced, our transition will never fire. so we need to set \"open\" on the <details> here.\n        if (motionReduced()) {\n          details.open = this.open;\n        }\n\n        this.dispatchEvent(new Event(\"light-toggle\"));\n      } else {\n        details.open = this.open;\n\n        this._openOnToggle = false;\n\n        // If you only wait 1 animation frame, we get clipped by `display: none;`\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            details.setAttribute(\"expanded\", \"\");\n            this._openOnToggle = true;\n            this.dispatchEvent(new Event(\"light-toggle\"));\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  click() {\n    this.open = !this.open;\n  }\n\n  /**\n   * @override\n   * @param {FocusOptions} [options]\n   */\n  focus(options) {\n    this.shadowRoot?.querySelector(\"summary\")?.focus(options);\n  }\n\n  /**\n   * @override\n   */\n  render() {\n    return html`\n      <details\n        part=\"details\"\n        @transitionend=${this.handleTransitionEnd}\n        @toggle=${this.handleToggle}\n      >\n        <summary part=\"summary\" @click=${this.handleSummaryClick}>\n          <slot name=\"summary\">${this.summary}</slot>\n        </summary>\n\n        <div part=\"content-base\">\n          <div part=\"content\">\n            <slot></slot>\n          </div>\n        </div>\n      </details>\n    `;\n  }\n\n  get details() {\n    return this.shadowRoot?.querySelector(\"details\");\n  }\n\n  /**\n   * @param {TransitionEvent} e\n   */\n  handleTransitionEnd(e) {\n    const details = this.details;\n\n    if (!details) return;\n    if (!(e.propertyName === \"grid-template-rows\")) return;\n\n    if (details.open === true) {\n      if (!details.hasAttribute(\"expanded\")) {\n        details.open = false;\n      }\n    } else {\n      details.open = true;\n    }\n  }\n\n  /**\n   * Toggle fires after the attribute is set / unset, so its useless for expanded. But useful for when users search a page with \"ctrl+f\"\n   * @param {Event} _e\n   */\n  handleToggle(_e) {\n    const details = this.details;\n\n    if (!details) return;\n\n    if (\n      details.open &&\n      !details.hasAttribute(\"expanded\") &&\n      this._openOnToggle\n    ) {\n      this.open = details.open;\n      this.dispatchEvent(new Event(\"light-toggle\"));\n      details.setAttribute(\"expanded\", \"\");\n    }\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleSummaryClick(e) {\n    const details = this.details;\n    if (!details) return;\n\n    e.preventDefault();\n\n    if (details.open) {\n      this.open = false;\n      return false;\n    }\n\n    this.open = true;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
