{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@shoelace-style+shoelace@2.15.1_@types+react@18.3.3/node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KZJNDGFO.js", "../../../../node_modules/.pnpm/lit-html@3.1.3/node_modules/lit-html/src/async-directive.ts", "../../../../node_modules/.pnpm/lit-html@3.1.3/node_modules/lit-html/src/directives/ref.ts", "../../../../node_modules/.pnpm/@shoelace-style+shoelace@2.15.1_@types+react@18.3.3/node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WH4JEKK2.js", "../../../../node_modules/.pnpm/@shoelace-style+shoelace@2.15.1_@types+react@18.3.3/node_modules/@shoelace-style/shoelace/dist/chunks/chunk.NEKKXV7B.js", "../../../../node_modules/.pnpm/@shoelace-style+shoelace@2.15.1_@types+react@18.3.3/node_modules/@shoelace-style/shoelace/dist/chunks/chunk.W3CH77FZ.js"],
  "sourcesContent": ["// src/components/menu-item/menu-item.styles.ts\nimport { css } from \"lit\";\nvar menu_item_styles_default = css`\n  :host {\n    --submenu-offset: -2px;\n\n    display: block;\n  }\n\n  :host([inert]) {\n    display: none;\n  }\n\n  .menu-item {\n    position: relative;\n    display: flex;\n    align-items: stretch;\n    font-family: var(--sl-font-sans);\n    font-size: var(--sl-font-size-medium);\n    font-weight: var(--sl-font-weight-normal);\n    line-height: var(--sl-line-height-normal);\n    letter-spacing: var(--sl-letter-spacing-normal);\n    color: var(--sl-color-neutral-700);\n    padding: var(--sl-spacing-2x-small) var(--sl-spacing-2x-small);\n    transition: var(--sl-transition-fast) fill;\n    user-select: none;\n    -webkit-user-select: none;\n    white-space: nowrap;\n    cursor: pointer;\n  }\n\n  .menu-item.menu-item--disabled {\n    outline: none;\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  .menu-item.menu-item--loading {\n    outline: none;\n    cursor: wait;\n  }\n\n  .menu-item.menu-item--loading *:not(sl-spinner) {\n    opacity: 0.5;\n  }\n\n  .menu-item--loading sl-spinner {\n    --indicator-color: currentColor;\n    --track-width: 1px;\n    position: absolute;\n    font-size: 0.75em;\n    top: calc(50% - 0.5em);\n    left: 0.65rem;\n    opacity: 1;\n  }\n\n  .menu-item .menu-item__label {\n    flex: 1 1 auto;\n    display: inline-block;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  .menu-item .menu-item__prefix {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n  }\n\n  .menu-item .menu-item__prefix::slotted(*) {\n    margin-inline-end: var(--sl-spacing-x-small);\n  }\n\n  .menu-item .menu-item__suffix {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n  }\n\n  .menu-item .menu-item__suffix::slotted(*) {\n    margin-inline-start: var(--sl-spacing-x-small);\n  }\n\n  /* Safe triangle */\n  .menu-item--submenu-expanded::after {\n    content: '';\n    position: fixed;\n    z-index: calc(var(--sl-z-index-dropdown) - 1);\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    clip-path: polygon(\n      var(--safe-triangle-cursor-x, 0) var(--safe-triangle-cursor-y, 0),\n      var(--safe-triangle-submenu-start-x, 0) var(--safe-triangle-submenu-start-y, 0),\n      var(--safe-triangle-submenu-end-x, 0) var(--safe-triangle-submenu-end-y, 0)\n    );\n  }\n\n  :host(:focus-visible) {\n    outline: none;\n  }\n\n  :host(:hover:not([aria-disabled='true'], :focus-visible)) .menu-item,\n  .menu-item--submenu-expanded {\n    background-color: var(--sl-color-neutral-100);\n    color: var(--sl-color-neutral-1000);\n  }\n\n  :host(:focus-visible) .menu-item {\n    outline: none;\n    background-color: var(--sl-color-primary-600);\n    color: var(--sl-color-neutral-0);\n    opacity: 1;\n  }\n\n  .menu-item .menu-item__check,\n  .menu-item .menu-item__chevron {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 1.5em;\n    visibility: hidden;\n  }\n\n  .menu-item--checked .menu-item__check,\n  .menu-item--has-submenu .menu-item__chevron {\n    visibility: visible;\n  }\n\n  /* Add elevation and z-index to submenus */\n  sl-popup::part(popup) {\n    box-shadow: var(--sl-shadow-large);\n    z-index: var(--sl-z-index-dropdown);\n    margin-left: var(--submenu-offset);\n  }\n\n  .menu-item--rtl sl-popup::part(popup) {\n    margin-left: calc(-1 * var(--submenu-offset));\n  }\n\n  @media (forced-colors: active) {\n    :host(:hover:not([aria-disabled='true'])) .menu-item,\n    :host(:focus-visible) .menu-item {\n      outline: dashed 1px SelectedItem;\n      outline-offset: -1px;\n    }\n  }\n\n  ::slotted(sl-menu) {\n    max-width: var(--auto-size-available-width) !important;\n    max-height: var(--auto-size-available-height) !important;\n  }\n`;\n\nexport {\n  menu_item_styles_default\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean,\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false,\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0,\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined,\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true,\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "// src/components/menu-item/submenu-controller.ts\nimport { createRef, ref } from \"lit/directives/ref.js\";\nimport { html } from \"lit\";\nvar SubmenuController = class {\n  constructor(host, hasSlotController, localize) {\n    this.popupRef = createRef();\n    this.enableSubmenuTimer = -1;\n    this.isConnected = false;\n    this.isPopupConnected = false;\n    this.skidding = 0;\n    this.submenuOpenDelay = 100;\n    // Set the safe triangle cursor position\n    this.handleMouseMove = (event) => {\n      this.host.style.setProperty(\"--safe-triangle-cursor-x\", `${event.clientX}px`);\n      this.host.style.setProperty(\"--safe-triangle-cursor-y\", `${event.clientY}px`);\n    };\n    this.handleMouseOver = () => {\n      if (this.hasSlotController.test(\"submenu\")) {\n        this.enableSubmenu();\n      }\n    };\n    // Focus on the first menu-item of a submenu.\n    this.handleKeyDown = (event) => {\n      switch (event.key) {\n        case \"Escape\":\n        case \"Tab\":\n          this.disableSubmenu();\n          break;\n        case \"ArrowLeft\":\n          if (event.target !== this.host) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.host.focus();\n            this.disableSubmenu();\n          }\n          break;\n        case \"ArrowRight\":\n        case \"Enter\":\n        case \" \":\n          this.handleSubmenuEntry(event);\n          break;\n        default:\n          break;\n      }\n    };\n    this.handleClick = (event) => {\n      var _a;\n      if (event.target === this.host) {\n        event.preventDefault();\n        event.stopPropagation();\n      } else if (event.target instanceof Element && (event.target.tagName === \"sl-menu-item\" || ((_a = event.target.role) == null ? void 0 : _a.startsWith(\"menuitem\")))) {\n        this.disableSubmenu();\n      }\n    };\n    // Close this submenu on focus outside of the parent or any descendants.\n    this.handleFocusOut = (event) => {\n      if (event.relatedTarget && event.relatedTarget instanceof Element && this.host.contains(event.relatedTarget)) {\n        return;\n      }\n      this.disableSubmenu();\n    };\n    // Prevent the parent menu-item from getting focus on mouse movement on the submenu\n    this.handlePopupMouseover = (event) => {\n      event.stopPropagation();\n    };\n    // Set the safe triangle values for the submenu when the position changes\n    this.handlePopupReposition = () => {\n      const submenuSlot = this.host.renderRoot.querySelector(\"slot[name='submenu']\");\n      const menu = submenuSlot == null ? void 0 : submenuSlot.assignedElements({ flatten: true }).filter((el) => el.localName === \"sl-menu\")[0];\n      const isRtl = this.localize.dir() === \"rtl\";\n      if (!menu) {\n        return;\n      }\n      const { left, top, width, height } = menu.getBoundingClientRect();\n      this.host.style.setProperty(\"--safe-triangle-submenu-start-x\", `${isRtl ? left + width : left}px`);\n      this.host.style.setProperty(\"--safe-triangle-submenu-start-y\", `${top}px`);\n      this.host.style.setProperty(\"--safe-triangle-submenu-end-x\", `${isRtl ? left + width : left}px`);\n      this.host.style.setProperty(\"--safe-triangle-submenu-end-y\", `${top + height}px`);\n    };\n    (this.host = host).addController(this);\n    this.hasSlotController = hasSlotController;\n    this.localize = localize;\n  }\n  hostConnected() {\n    if (this.hasSlotController.test(\"submenu\") && !this.host.disabled) {\n      this.addListeners();\n    }\n  }\n  hostDisconnected() {\n    this.removeListeners();\n  }\n  hostUpdated() {\n    if (this.hasSlotController.test(\"submenu\") && !this.host.disabled) {\n      this.addListeners();\n      this.updateSkidding();\n    } else {\n      this.removeListeners();\n    }\n  }\n  addListeners() {\n    if (!this.isConnected) {\n      this.host.addEventListener(\"mousemove\", this.handleMouseMove);\n      this.host.addEventListener(\"mouseover\", this.handleMouseOver);\n      this.host.addEventListener(\"keydown\", this.handleKeyDown);\n      this.host.addEventListener(\"click\", this.handleClick);\n      this.host.addEventListener(\"focusout\", this.handleFocusOut);\n      this.isConnected = true;\n    }\n    if (!this.isPopupConnected) {\n      if (this.popupRef.value) {\n        this.popupRef.value.addEventListener(\"mouseover\", this.handlePopupMouseover);\n        this.popupRef.value.addEventListener(\"sl-reposition\", this.handlePopupReposition);\n        this.isPopupConnected = true;\n      }\n    }\n  }\n  removeListeners() {\n    if (this.isConnected) {\n      this.host.removeEventListener(\"mousemove\", this.handleMouseMove);\n      this.host.removeEventListener(\"mouseover\", this.handleMouseOver);\n      this.host.removeEventListener(\"keydown\", this.handleKeyDown);\n      this.host.removeEventListener(\"click\", this.handleClick);\n      this.host.removeEventListener(\"focusout\", this.handleFocusOut);\n      this.isConnected = false;\n    }\n    if (this.isPopupConnected) {\n      if (this.popupRef.value) {\n        this.popupRef.value.removeEventListener(\"mouseover\", this.handlePopupMouseover);\n        this.popupRef.value.removeEventListener(\"sl-reposition\", this.handlePopupReposition);\n        this.isPopupConnected = false;\n      }\n    }\n  }\n  handleSubmenuEntry(event) {\n    const submenuSlot = this.host.renderRoot.querySelector(\"slot[name='submenu']\");\n    if (!submenuSlot) {\n      console.error(\"Cannot activate a submenu if no corresponding menuitem can be found.\", this);\n      return;\n    }\n    let menuItems = null;\n    for (const elt of submenuSlot.assignedElements()) {\n      menuItems = elt.querySelectorAll(\"sl-menu-item, [role^='menuitem']\");\n      if (menuItems.length !== 0) {\n        break;\n      }\n    }\n    if (!menuItems || menuItems.length === 0) {\n      return;\n    }\n    menuItems[0].setAttribute(\"tabindex\", \"0\");\n    for (let i = 1; i !== menuItems.length; ++i) {\n      menuItems[i].setAttribute(\"tabindex\", \"-1\");\n    }\n    if (this.popupRef.value) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.popupRef.value.active) {\n        if (menuItems[0] instanceof HTMLElement) {\n          menuItems[0].focus();\n        }\n      } else {\n        this.enableSubmenu(false);\n        this.host.updateComplete.then(() => {\n          if (menuItems[0] instanceof HTMLElement) {\n            menuItems[0].focus();\n          }\n        });\n        this.host.requestUpdate();\n      }\n    }\n  }\n  setSubmenuState(state) {\n    if (this.popupRef.value) {\n      if (this.popupRef.value.active !== state) {\n        this.popupRef.value.active = state;\n        this.host.requestUpdate();\n      }\n    }\n  }\n  // Shows the submenu. Supports disabling the opening delay, e.g. for keyboard events that want to set the focus to the\n  // newly opened menu.\n  enableSubmenu(delay = true) {\n    if (delay) {\n      window.clearTimeout(this.enableSubmenuTimer);\n      this.enableSubmenuTimer = window.setTimeout(() => {\n        this.setSubmenuState(true);\n      }, this.submenuOpenDelay);\n    } else {\n      this.setSubmenuState(true);\n    }\n  }\n  disableSubmenu() {\n    window.clearTimeout(this.enableSubmenuTimer);\n    this.setSubmenuState(false);\n  }\n  // Calculate the space the top of a menu takes-up, for aligning the popup menu-item with the activating element.\n  updateSkidding() {\n    var _a;\n    if (!((_a = this.host.parentElement) == null ? void 0 : _a.computedStyleMap)) {\n      return;\n    }\n    const styleMap = this.host.parentElement.computedStyleMap();\n    const attrs = [\"padding-top\", \"border-top-width\", \"margin-top\"];\n    const skidding = attrs.reduce((accumulator, attr) => {\n      var _a2;\n      const styleValue = (_a2 = styleMap.get(attr)) != null ? _a2 : new CSSUnitValue(0, \"px\");\n      const unitValue = styleValue instanceof CSSUnitValue ? styleValue : new CSSUnitValue(0, \"px\");\n      const pxValue = unitValue.to(\"px\");\n      return accumulator - pxValue.value;\n    }, 0);\n    this.skidding = skidding;\n  }\n  isExpanded() {\n    return this.popupRef.value ? this.popupRef.value.active : false;\n  }\n  renderSubmenu() {\n    const isLtr = this.localize.dir() === \"ltr\";\n    if (!this.isConnected) {\n      return html` <slot name=\"submenu\" hidden></slot> `;\n    }\n    return html`\n      <sl-popup\n        ${ref(this.popupRef)}\n        placement=${isLtr ? \"right-start\" : \"left-start\"}\n        anchor=\"anchor\"\n        flip\n        flip-fallback-strategy=\"best-fit\"\n        skidding=\"${this.skidding}\"\n        strategy=\"fixed\"\n        auto-size=\"vertical\"\n        auto-size-padding=\"10\"\n      >\n        <slot name=\"submenu\"></slot>\n      </sl-popup>\n    `;\n  }\n};\n\nexport {\n  SubmenuController\n};\n", "import {\n  menu_item_styles_default\n} from \"./chunk.KZJNDGFO.js\";\nimport {\n  SubmenuController\n} from \"./chunk.WH4JEKK2.js\";\nimport {\n  SlPopup\n} from \"./chunk.UFYD5JS6.js\";\nimport {\n  SlSpinner\n} from \"./chunk.AXBI25VK.js\";\nimport {\n  LocalizeController\n} from \"./chunk.WLV3FVBR.js\";\nimport {\n  SlIcon\n} from \"./chunk.I6OQK3N3.js\";\nimport {\n  watch\n} from \"./chunk.2FB5TK5H.js\";\nimport {\n  HasSlotController,\n  getTextContent\n} from \"./chunk.NYIIDP5N.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.TUZSOS6C.js\";\nimport {\n  __decorateClass\n} from \"./chunk.IFDWM6P4.js\";\n\n// src/components/menu-item/menu-item.component.ts\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nvar SlMenuItem = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"normal\";\n    this.checked = false;\n    this.value = \"\";\n    this.loading = false;\n    this.disabled = false;\n    this.localize = new LocalizeController(this);\n    this.hasSlotController = new HasSlotController(this, \"submenu\");\n    this.submenuController = new SubmenuController(this, this.hasSlotController, this.localize);\n    this.handleHostClick = (event) => {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n    };\n    this.handleMouseOver = (event) => {\n      this.focus();\n      event.stopPropagation();\n    };\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"click\", this.handleHostClick);\n    this.addEventListener(\"mouseover\", this.handleMouseOver);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"click\", this.handleHostClick);\n    this.removeEventListener(\"mouseover\", this.handleMouseOver);\n  }\n  handleDefaultSlotChange() {\n    const textLabel = this.getTextLabel();\n    if (typeof this.cachedTextLabel === \"undefined\") {\n      this.cachedTextLabel = textLabel;\n      return;\n    }\n    if (textLabel !== this.cachedTextLabel) {\n      this.cachedTextLabel = textLabel;\n      this.emit(\"slotchange\", { bubbles: true, composed: false, cancelable: false });\n    }\n  }\n  handleCheckedChange() {\n    if (this.checked && this.type !== \"checkbox\") {\n      this.checked = false;\n      console.error('The checked attribute can only be used on menu items with type=\"checkbox\"', this);\n      return;\n    }\n    if (this.type === \"checkbox\") {\n      this.setAttribute(\"aria-checked\", this.checked ? \"true\" : \"false\");\n    } else {\n      this.removeAttribute(\"aria-checked\");\n    }\n  }\n  handleDisabledChange() {\n    this.setAttribute(\"aria-disabled\", this.disabled ? \"true\" : \"false\");\n  }\n  handleTypeChange() {\n    if (this.type === \"checkbox\") {\n      this.setAttribute(\"role\", \"menuitemcheckbox\");\n      this.setAttribute(\"aria-checked\", this.checked ? \"true\" : \"false\");\n    } else {\n      this.setAttribute(\"role\", \"menuitem\");\n      this.removeAttribute(\"aria-checked\");\n    }\n  }\n  /** Returns a text label based on the contents of the menu item's default slot. */\n  getTextLabel() {\n    return getTextContent(this.defaultSlot);\n  }\n  isSubmenu() {\n    return this.hasSlotController.test(\"submenu\");\n  }\n  render() {\n    const isRtl = this.localize.dir() === \"rtl\";\n    const isSubmenuExpanded = this.submenuController.isExpanded();\n    return html`\n      <div\n        id=\"anchor\"\n        part=\"base\"\n        class=${classMap({\n      \"menu-item\": true,\n      \"menu-item--rtl\": isRtl,\n      \"menu-item--checked\": this.checked,\n      \"menu-item--disabled\": this.disabled,\n      \"menu-item--loading\": this.loading,\n      \"menu-item--has-submenu\": this.isSubmenu(),\n      \"menu-item--submenu-expanded\": isSubmenuExpanded\n    })}\n        ?aria-haspopup=\"${this.isSubmenu()}\"\n        ?aria-expanded=\"${isSubmenuExpanded ? true : false}\"\n      >\n        <span part=\"checked-icon\" class=\"menu-item__check\">\n          <sl-icon name=\"check\" library=\"system\" aria-hidden=\"true\"></sl-icon>\n        </span>\n\n        <slot name=\"prefix\" part=\"prefix\" class=\"menu-item__prefix\"></slot>\n\n        <slot part=\"label\" class=\"menu-item__label\" @slotchange=${this.handleDefaultSlotChange}></slot>\n\n        <slot name=\"suffix\" part=\"suffix\" class=\"menu-item__suffix\"></slot>\n\n        <span part=\"submenu-icon\" class=\"menu-item__chevron\">\n          <sl-icon name=${isRtl ? \"chevron-left\" : \"chevron-right\"} library=\"system\" aria-hidden=\"true\"></sl-icon>\n        </span>\n\n        ${this.submenuController.renderSubmenu()}\n        ${this.loading ? html` <sl-spinner part=\"spinner\" exportparts=\"base:spinner__base\"></sl-spinner> ` : \"\"}\n      </div>\n    `;\n  }\n};\nSlMenuItem.styles = [component_styles_default, menu_item_styles_default];\nSlMenuItem.dependencies = {\n  \"sl-icon\": SlIcon,\n  \"sl-popup\": SlPopup,\n  \"sl-spinner\": SlSpinner\n};\n__decorateClass([\n  query(\"slot:not([name])\")\n], SlMenuItem.prototype, \"defaultSlot\", 2);\n__decorateClass([\n  query(\".menu-item\")\n], SlMenuItem.prototype, \"menuItem\", 2);\n__decorateClass([\n  property()\n], SlMenuItem.prototype, \"type\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlMenuItem.prototype, \"checked\", 2);\n__decorateClass([\n  property()\n], SlMenuItem.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlMenuItem.prototype, \"loading\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], SlMenuItem.prototype, \"disabled\", 2);\n__decorateClass([\n  watch(\"checked\")\n], SlMenuItem.prototype, \"handleCheckedChange\", 1);\n__decorateClass([\n  watch(\"disabled\")\n], SlMenuItem.prototype, \"handleDisabledChange\", 1);\n__decorateClass([\n  watch(\"type\")\n], SlMenuItem.prototype, \"handleTypeChange\", 1);\n\nexport {\n  SlMenuItem\n};\n", "import {\n  SlMenuItem\n} from \"./chunk.NEKKXV7B.js\";\n\n// src/components/menu-item/menu-item.ts\nvar menu_item_default = SlMenuItem;\nSlMenuItem.define(\"sl-menu-item\");\n\nexport {\n  menu_item_default\n};\n"],
  "mappings": "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",
  "names": ["notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_$notifyConnectionChanged", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "part", "attributeIndex", "super", "_$initialize", "_$isConnected", "isClearingDirective", "reconnected", "disconnected", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "createRef", "Ref", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "_ref", "nothing", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "disconnected", "reconnected", "e", "i", "n", "e"]
}
