[
        {
          "id": "light-pen-components",
          "title": "Components",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/",
          "content": ""
        },
        {
          "id": "light-pen-components-light-code",
          "title": "<light-code>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/light-code/",
          "content": "Examples\n\nIf you check the source code in the above example, you’ll notice a &amp;lt;/script&gt;.\n\nFor more on why script tags are used, check out Why script tags\nfor further reading.\n\nUsing the “code” attribute\n\nBy setting the code attribute, we can achieve the same as slotting elements.\n\n\n  \n    \n  \n\n\nHighlighting Lines\n\nLine highlighting accepts 2 syntaxes, the number itself:\n\nhighlight-lines=\"{1}\" or using a range: highlight-lines=\"{1-3}\" and you\ncan combine ranges and numbers like so:\n\n&lt;light-code highlight-lines=\"{1, 4-8, 12}\"&gt;&lt;/light-code&gt;\n\n\nLine ranges are inclusive. Line numbers are also 1-indexed.\n\n\n  \n\n\nWritings diffs\n\nInserted lines\n\nInserted lines can be highlighted via inserted-lines attribute.\n\n\n  \n\n\nDeleted lines\n\nDeleted lines can be highlighted via deleted-lines attribute.\n\n\n  \n\n\nCombining inserted and deleted lines\n\nDeleted lines can be highlighted via deleted-lines attribute.\n\n\n  \n\n\nDisable Line Numbers\n\n\n  \n\n\nStarting counting lines at a specific index\n\nSometimes you may not want to start counting lines at 1, for example, we can start\ncounting lines at 10 in the following snippet:\n\n\n  \n\n\nLine Wrapping\n\nBy default &lt;light-preview&gt; will “soft wrap” lines for you. Meaning, code will wrap and not overflow\nthe container. If this is undesirable, you can pass wrap=\"hard\" and lines will not wrap.\n\nHere’s a preview of soft wrapping vs hard wrapping.\n\n\n  \n    \n      \n        With \"soft\" wrapping\n        \n          \n        \n      \n      \n        With \"hard\" wrapping\n        \n          \n        \n      \n    \n  \n\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;light-code&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-code/light-code-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;light-code&gt;\n  import \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-code/light-code-register.js\"\n\n  // Manual Register\n  import LightCode from \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-code/light-code.js\"\n  LightCode.define()\n  // =&gt; Registers as &lt;light-code&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;light-code&gt;\nimport \"light-pen/exports/components/light-code/light-code-register.js\"\n\n// Manual Register\nimport LightCode \"light-pen/exports/components/light-code/light-code.js\"\nLightCode.define()\n// =&gt; Registers as &lt;light-code&gt;\n\n\n\n\n\nSlots\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    default\n  \n  \n    The code to use for highlighting\n  \n\n\n    \n  \n\n\nAttributes\n\n\n  \n    \n      \n        Name\n        Description\n        Reflects\n        Type\n        Default\n      \n    \n    \n      \n  \n      [Attribute + Property]\n      \n      language\n  \n  \n    The language to highlight for.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;html&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      disable-highlight\n      \n      [Property]\n      \n      disableHighlight\n  \n  \n    If disabled, its on you to provide &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      code\n  \n  \n    We will take the code, wrap it in &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt; and run it through\nPrismJS.\nIf the element has disableHighlight, we will not touch their code. Instead they must pass in escapedHTML.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      wrap\n  \n  \n    If wrap=\"soft\", lines will wrap when they reach the edge of their container. If wrap=\"none\", lines will not wrap instead all the user to scroll horizontally to see more code.\n  \n  \n    \n  \n  \n    &quot;soft&quot; | &quot;none&quot;\n  \n  \n    &quot;soft&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      preserve-whitespace\n      \n      [Property]\n      \n      preserveWhitespace\n  \n  \n    Whether or not to preserve white spaces from templates and attempt to dedent and chomp new lines.\n  \n  \n    \n  \n  \n    Boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      highlight-lines\n      \n      [Property]\n      \n      highlightLines\n  \n  \n    A string of possible lines to highlight. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      inserted-lines\n      \n      [Property]\n      \n      insertedLines\n  \n  \n    A string of lines that are inserted for diffs. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      deleted-lines\n      \n      [Property]\n      \n      deletedLines\n  \n  \n    A string of lines that are deleted for diffs. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      disable-line-numbers\n      \n      [Property]\n      \n      disableLineNumbers\n  \n  \n    whether or not to disable line numbers\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      line-number-start\n      \n      [Property]\n      \n      lineNumberStart\n  \n  \n    Where to start counting from indexes. Note, this is only for display purposes in the gutter.\n  \n  \n    \n  \n  \n    number\n  \n  \n    1\n  \n\n\n    \n  \n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    highlight()\n  \n  \n    -\n  \n  \n    code\n  \n\n\n    \n  \n\n\nParts\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    base\n  \n  \n    The base wrapping element\n  \n\n\n\n  \n    pre\n  \n  \n    The &lt;pre&gt; element wrapping the source code\n  \n\n\n\n  \n    code\n  \n  \n    The   element wrapping the source code\n  \n\n\n\n  \n    gutter\n  \n  \n    The gutter for line numbers. This is only for the overlay for when the lines dont correspond to size of the code.\n  \n\n\n\n  \n    gutter-cell\n  \n  \n    The element that holds line numbers."
        },
        {
          "id": "light-pen-components-light-disclosure",
          "title": "<light-disclosure>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/light-disclosure/",
          "content": "Typical Usage\n\n\n\n\n  \n    \n      export const x = \"hi\"\n    \n  \n\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;light-disclosure&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-disclosure/light-disclosure-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;light-disclosure&gt;\n  import \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-disclosure/light-disclosure-register.js\"\n\n  // Manual Register\n  import LightDisclosure from \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-disclosure/light-disclosure.js\"\n  LightDisclosure.define()\n  // =&gt; Registers as &lt;light-disclosure&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;light-disclosure&gt;\nimport \"light-pen/exports/components/light-disclosure/light-disclosure-register.js\"\n\n// Manual Register\nimport LightDisclosure \"light-pen/exports/components/light-disclosure/light-disclosure.js\"\nLightDisclosure.define()\n// =&gt; Registers as &lt;light-disclosure&gt;\n\n\n\n\n\nSlots\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    default\n  \n  \n    The code to use for highlighting\n  \n\n\n    \n  \n\n\nAttributes\n\n\n  \n    \n      \n        Name\n        Description\n        Reflects\n        Type\n        Default\n      \n    \n    \n      \n  \n      [Attribute + Property]\n      \n      summary\n  \n  \n    -\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      open\n  \n  \n    -\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n    \n  \n\n\nEvents\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    light-toggle\n  \n  \n    -\n  \n\n\n    \n  \n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    click()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    focus()\n  \n  \n    -\n  \n  \n    options: FocusOptions\n  \n\n\n\n  \n    handleTransitionEnd()\n  \n  \n    -\n  \n  \n    e: TransitionEvent\n  \n\n\n\n  \n    handleToggle()\n  \n  \n    Toggle fires after the attribute is set / unset, so its useless for expanded. But useful for when users search a page with “ctrl+f”\n  \n  \n    _e: Event\n  \n\n\n\n  \n    handleSummaryClick()\n  \n  \n    -\n  \n  \n    e: Event"
        },
        {
          "id": "light-pen-components-light-editor",
          "title": "<light-editor>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/light-editor/",
          "content": "If you check the source code in the above example, you’ll notice a &amp;lt;/script&gt;.\n\nFor more on why script tags are used, check out Why script tags\nfor further reading.\n\nExamples\n\nUsing the value attribute\n\nUsing the value attribute is the generally recommended way to provide the most consistent experience. By default,\nleading and trailing newlines / whitespace will be stripped.\n\n\n  \n\n\nPreserve white space with value attribute\n\nBy default, extra white space before the first character and after the last character will be stripped.\nIf you want to leave extra white-space, pass the preserve-whitespace boolean attribute to the editor.\n\n\n  \n    \n    \n  \n\n\nWith a template tag\n\nWe can use a &lt;template&gt; tag to be able to “slot” in the default value\n\n\n  \n    \n      \n        \n          Hello World\n          What's up dude\n        \n\n        \n          A template in a template?!!?!?\n        \n\n        This is madness!!\n      \n    \n\n  \n\n\nChanging the highlight language to CSS\n\nBy default, the highlighter from Highlight.js only supports HTML / CSS / JS.\nThis is intentional to keep the bundle size low. Supported languages are html, css, and js.\n\n\n  \n    \n      \n        html, body {\n          min-height: 100%;\n          height: 100%;\n          padding: 0;\n          margin: 0;\n        }\n\n        light-pen {\n          height: 100%;\n        }\n      \n    \n\n  \n\n\nUsing a script tag\n\n&lt;light-editor&gt;\n  &lt;!-- Important to use `type=\"text/plain\"` --&gt;\n  &lt;script type=\"text/plain\"&gt;\n    &lt;script&gt;&amp;lt;/script&gt;\n  &lt;/script&gt;\n&lt;/light-editor&gt;\n\n\nDisabled Editor\n\nTo disable the editor, provide a disabled attribute.\n\n\n  \n\n\nEditor with a placeholder\n\nTo provide a placeholder, use the placeholder attribute. Note, this does not support a &lt;slot&gt;\nbecause it’s using the native &lt;textarea&gt; placeholder attribute.\n\n\n  \n    \n  \n\n\nEditor with validations\n\nValidations are handled using “Form Associated Custom Elements”.\n\n&lt;light-editor&gt; supports minlength, maxlength, and required just like the\nnative &lt;textarea&gt; element.\n\nminlength, maxlength, required validations\n\n\n  \n\n\nRemoving line numbers\n\nRemoving line numbers can be done with the boolean attribute disable-line-numbers\n\n\n  \n\n\nWhitespace wrapping\n\nBy default &lt;light-preview&gt; will “soft wrap” lines for you. Meaning, code will wrap and not overflow\nthe container. If this is undesirable, you can pass wrap=\"hard\" and lines will not wrap.\n\nHere’s a preview of soft wrapping vs hard wrapping.\n\n\n  \n    \n      \n        With \"soft\" wrapping\n        \n          \n        \n      \n      \n        With \"hard\" wrapping\n        \n          \n        \n      \n    \n  \n\n\nAdditional Notes\n\nCaveats to the initial editor value\n\nDeclarative slots are hard. The most “consistent” way to provide a default value for the editor\nis to use value attribute. Like so:\n\n&lt;light-editor value=\"&lt;html&gt;&lt;/html&gt;\"&gt;&lt;/light-editor&gt;\n\n\nProblems with declarative slotting\n\nIf you really want declarative slotting, it’s best to use a &lt;textarea&gt; in the default slot.\nThe editor is really a &lt;textarea&gt; at it’s core, so its recommended to use the &lt;textarea&gt; element to slot in elements.\nIt has 1 drawback which is around not being able to slot in a &lt;textarea&gt; directly.\nAnd showing &amp;lt; and &amp;gt; literals is challenging. &amp;amp;lt;html&amp;amp;gt; is equivalent to &amp;gt;html&amp;lt;&gt;\nThis limitation only exists for slotting.\n\nUsing a &lt;textarea&gt; element for the default slot requires the following markup to nest a\n&lt;textarea&gt; string literal inside of it:\n\n&lt;light-editor&gt;\n  &lt;textarea&gt;\n    &amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;\n  &lt;/textarea&gt;\n&lt;/light-editor&gt;\n\n\nOther slottable tags\n\n&lt;template&gt; formats the HTML and strips improper HTML. It’s also not suitable for non-HTML strings. You can do it, but you’ve been warned.\n&lt;xmp&gt; is deprecated and also has some issues around if you do something like: &lt;!DOCTYPE html &gt;\n&lt;!-- --&gt; isn’t supported like with Prism’s auto escape plugin could be used, but runs into issues if you want comments nested in comments.\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;light-editor&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-editor/light-editor-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;light-editor&gt;\n  import \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-editor/light-editor-register.js\"\n\n  // Manual Register\n  import LightEditor from \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-editor/light-editor.js\"\n  LightEditor.define()\n  // =&gt; Registers as &lt;light-editor&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;light-editor&gt;\nimport \"light-pen/exports/components/light-editor/light-editor-register.js\"\n\n// Manual Register\nimport LightEditor \"light-pen/exports/components/light-editor/light-editor.js\"\nLightEditor.define()\n// =&gt; Registers as &lt;light-editor&gt;\n\n\n\n\n\nAttributes\n\n\n  \n    \n      \n        Name\n        Description\n        Reflects\n        Type\n        Default\n      \n    \n    \n      \n  \n      [Attribute + Property]\n      \n      language\n  \n  \n    The language used for highlighting. Default is “html”. “css” and “js” also included by default.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;html&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      src\n  \n  \n    Points to a remote file source that should be accessible via fetch()\n  \n  \n    \n  \n  \n    string | null\n  \n  \n    null\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      wrap\n  \n  \n    If wrap=\"soft\", lines will wrap when they reach the edge of their container. If wrap=\"hard\", lines will not wrap instead all the user to scroll horizontally to see more code.\n  \n  \n    \n  \n  \n    &quot;soft&quot; | &quot;hard&quot;\n  \n  \n    &quot;soft&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      preserve-whitespace\n      \n      [Property]\n      \n      preserveWhitespace\n  \n  \n    Whether to strip whitespace before first character, and after the last character.\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      disable-line-numbers\n      \n      [Property]\n      \n      disableLineNumbers\n  \n  \n    -\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      data-has-focused\n      \n      [Property]\n      \n      hasFocused\n  \n  \n    -\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    -\n  \n\n\n    \n  \n\n\nEvents\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    light-value-change\n  \n  \n    Emitted whenever the “value” attribute of the editor changes.\n  \n\n\n\n  \n    change\n  \n  \n    -\n  \n\n\n\n  \n    light-focus\n  \n  \n    Re-emits the textarea’s “focus” event\n  \n\n\n\n  \n    light-blur\n  \n  \n    Re-emits the textarea’s “blur” event\n  \n\n\n\n  \n    light-selectionchange\n  \n  \n    Re-emits the textarea’s “selectionchange” event\n  \n\n\n\n  \n    light-input\n  \n  \n    Re-emits the textarea’s “input” event\n  \n\n\n\n  \n    input\n  \n  \n    -\n  \n\n\n\n  \n    light-resize\n  \n  \n    Is emitting whenever the editor resizes.\n  \n\n\n\n  \n    light-change\n  \n  \n    Re-emits the textarea’s “change” event\n  \n\n\n    \n  \n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    click()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    focus()\n  \n  \n    -\n  \n  \n    options: FocusOptions\n  \n\n\n\n  \n    getCaretPosition()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    setCurrentLineHighlight()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    getLinesToSelectionStart()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    getCurrentLineNumber()\n  \n  \n    -\n  \n  \n    -"
        },
        {
          "id": "light-pen-components-light-pen",
          "title": "<light-pen>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/light-pen/",
          "content": "Examples\n\nDefault Usage\n\n\n  \n    \n      \n        \n          This is kind of wild huh? We have a &lt;light-pen&gt;\n          component running inside of a &lt;light-pen&gt; component!!\n        \n      \n\n      \n        code {\n          padding: 2px 6px;\n          display: inline-block;\n          font-size: 0.9em;\n          background-color: rgba(0,0,0,0.05);\n          border-radius: 4px;\n        }\n      \n    \n\n  \n\n  \n    html, body {\n      height: 100%;\n      min-height: 100%;\n      width: 100%;\n      margin: 0;\n    }\n\n    light-pen {\n      height: 100%;\n    }\n\n  \n\n  \n    import LightPen from \"/light-pen/bridgetown/static/light-pen/exports/components/light-pen/light-pen.4F2BZL62.js\";\n    LightPen.define()\n  \n\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;light-pen&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-pen/light-pen-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;light-pen&gt;\n  import \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-pen/light-pen-register.js\"\n\n  // Manual Register\n  import LightPen from \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-pen/light-pen.js\"\n  LightPen.define()\n  // =&gt; Registers as &lt;light-pen&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;light-pen&gt;\nimport \"light-pen/exports/components/light-pen/light-pen-register.js\"\n\n// Manual Register\nimport LightPen \"light-pen/exports/components/light-pen/light-pen.js\"\nLightPen.define()\n// =&gt; Registers as &lt;light-pen&gt;\n\n\n\n\n\nSlots\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    html\n  \n  \n    HTML to insert\n  \n\n\n\n  \n    css\n  \n  \n    CSS to insert\n  \n\n\n\n  \n    js\n  \n  \n    JavaScript to insert\n  \n\n\n\n  \n    title\n  \n  \n    The title to appear at the top of the editor\n  \n\n\n    \n  \n\n\nAttributes\n\n\n  \n    \n      \n        Name\n        Description\n        Reflects\n        Type\n        Default\n      \n    \n    \n      \n  \n      [Attribute + Property]\n      \n      resizePosition\n  \n  \n    -\n  \n  \n    \n  \n  \n    number\n  \n  \n    50\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      openLanguages\n  \n  \n    Languages to have open on initial render\nComma separated list of elements to open on initial render “html,css,js” to open all.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      console\n  \n  \n    Not implemented.\n  \n  \n    \n  \n  \n    &quot;enabled&quot; | &quot;disabled&quot;\n  \n  \n    &quot;disabled&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      sandbox-settings\n      \n      [Property]\n      \n      sandboxSettings\n  \n  \n    -\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      preserve-whitespace\n      \n      [Property]\n      \n      preserveWhitespace\n  \n  \n    Passed down to the editors.\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n    \n  \n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    updateCachedWidth()\n  \n  \n    Sets an initial width so we dont need to keep computing getBoundingClientRect\n  \n  \n    -\n  \n\n\n\n  \n    handleResize()\n  \n  \n    -\n  \n  \n    entries: ResizeObserverEntry[]\n  \n\n\n\n  \n    updateIframeContent()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    handleResizerKeydown()\n  \n  \n    -\n  \n  \n    event: KeyboardEvent\n  \n\n\n\n  \n    updateResizePosition()\n  \n  \n    -\n  \n  \n    resizePosition\n  \n\n\n\n  \n    resetValues()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    renderConsole()\n  \n  \n    -\n  \n  \n    -\n  \n\n\n\n  \n    handleDrag()\n  \n  \n    -\n  \n  \n    event: PointerEvent\n  \n\n\n    \n  \n\n\nParts\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    base\n  \n  \n    The base wrapper\n  \n\n\n\n  \n    sandbox\n  \n  \n    The wrapper around the editor and the iframe\n  \n\n\n\n  \n    sandbox-header\n  \n  \n    The wrapper around the header area"
        },
        {
          "id": "light-pen-components-light-preview",
          "title": "<light-preview>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/light-pen/components/light-preview/",
          "content": "Examples\n\n\n  \n  \n\n\nNesting a light-preview inside of a light-preview\n\n\n  \n    \n\n    \n      \n        Displaying a super cool button\n      \n    \n\n    \n\n  \n\n  \n    \n\n    \n      \n        Displaying a super cool button\n      \n    \n\n    \n\n  \n\n\nLoading inside a shadow DOM\n\nBy default, previews are loaded inside an &lt;iframe&gt; for true “encapsulation”. This may not always be desirable.\nFor not as strict encapsulation you can use preview-mode=\"shadow-dom\"\n\n\n  \n    \n      \n        \n\n        Displaying a super cool button not inside an iframe\n\n        \n        \n          This button lives in a \"Shadow DOM\" and not inside an iframe!!\n        \n      \n    \n\n    \n\n  \n\n\nAdding Additional buttons\n\n\n\n\n  \n    \n\n    \n      \n        Showing off more buttons\n      \n\n      HTML\n      Codepen\n    \n\n    \n\n  \n\nHTML\nCodepen\n\n\nEscaping nested script tags\n\n\n  \n\n\nHighlight Lines\n\n\n  \n  \n\n\nIf you check the source code in the above example, you’ll notice a &amp;lt;/script&gt;.\n\nAdditional Notes\n\nFor more on why script tags are used, check out Why script tags\nfor further reading.\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;light-preview&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-preview/light-preview-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;light-preview&gt;\n  import \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-preview/light-preview-register.js\"\n\n  // Manual Register\n  import LightPreview from \"https://cdn.jsdelivr.net/npm/light-pen/exports/components/light-preview/light-preview.js\"\n  LightPreview.define()\n  // =&gt; Registers as &lt;light-preview&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;light-preview&gt;\nimport \"light-pen/exports/components/light-preview/light-preview-register.js\"\n\n// Manual Register\nimport LightPreview \"light-pen/exports/components/light-preview/light-preview.js\"\nLightPreview.define()\n// =&gt; Registers as &lt;light-preview&gt;\n\n\n\n\n\nSlots\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    resize-icon\n  \n  \n    The icon to display in the resizer button. Override this to provide your own icon.\n  \n\n\n\n  \n    summary\n  \n  \n    What to display in source code expander\n  \n\n\n\n  \n    source-code-toggle-icon\n  \n  \n    Slot in your own icon to override the default caret.\n  \n\n\n\n  \n    actions\n  \n  \n    Slot in buttons / links to allow for additional actions in the bottom bar.\n  \n\n\n\n  \n    preview-html\n  \n  \n    If you want to run code that is slightly different from the source code you want to display, slot it into “preview-html”\n  \n\n\n\n  \n    code\n  \n  \n    Used to display both source code and to power your preview in the iframe. If you slot in “preview-html”, then it will only be used to show / highlight your source code.\n  \n\n\n    \n  \n\n\nAttributes\n\n\n  \n    \n      \n        Name\n        Description\n        Reflects\n        Type\n        Default\n      \n    \n    \n      \n  \n      [Attribute]\n      \n      sandbox-settings\n      \n      [Property]\n      \n      sandboxSettings\n  \n  \n    The sandbox settings to provide to the &lt;iframe&gt;\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      summary\n  \n  \n    The text to provide in the  toggle button\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;Show source code&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      preview-mode\n      \n      [Property]\n      \n      previewMode\n  \n  \n    Set to true to not use an &lt;iframe&gt; for previewing\n  \n  \n    \n  \n  \n    &quot;iframe&quot; | &quot;shadow-dom&quot;\n  \n  \n    &quot;iframe&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      resizing\n  \n  \n    When the resizer is being dragged, this will be true.\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      preview-html\n      \n      [Property]\n      \n      previewHtml\n  \n  \n    If disableHighlight is true, then you must pass in an element into previewHtml to be able to get\n  the code to run in the previewer.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      open\n  \n  \n    Whether or not the source code is being shown\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      resize-position\n      \n      [Property]\n      \n      resizePosition\n  \n  \n    The current position of the resizer. 100 means all the way to right. 0 means all the way to left.\n  \n  \n    \n  \n  \n    number\n  \n  \n    100\n  \n\n\n\n  \n      [Attribute]\n      \n      script-scope\n      \n      [Property]\n      \n      scriptScope\n  \n  \n    When using preview-mode=\"shadow-dom\",\nThere’s a funky issue with previews where if you want the location of the shadowRoot\nyou are, you can’t get it. As a result, &lt;light-preview&gt; supports the idea of a “scriptScope”\nwhere document is bound to the current shadowRoot instead of the actual top level document\nFor more info, check out this GitHub issue:\n  \n  \n    \n  \n  \n    &quot;document&quot; | &quot;shadow-dom&quot;\n  \n  \n    &quot;document&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      language\n  \n  \n    The language to highlight for.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;html&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      preserve-whitespace\n      \n      [Property]\n      \n      preserveWhitespace\n  \n  \n    Preserve leading and trailing whitespace.\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      disable-highlight\n      \n      [Property]\n      \n      disableHighlight\n  \n  \n    If disabled, its on you to provide &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      highlight-lines\n      \n      [Property]\n      \n      highlightLines\n  \n  \n    A string of possible lines to highlight. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      inserted-lines\n      \n      [Property]\n      \n      insertedLines\n  \n  \n    A string of lines that are inserted for diffs. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      deleted-lines\n      \n      [Property]\n      \n      deletedLines\n  \n  \n    A string of lines that are deleted for diffs. Example: “{1-9, 16, 18}”\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute]\n      \n      disable-line-numbers\n      \n      [Property]\n      \n      disableLineNumbers\n  \n  \n    whether or not to disable line numbers\n  \n  \n    \n  \n  \n    boolean\n  \n  \n    false\n  \n\n\n\n  \n      [Attribute]\n      \n      line-number-start\n      \n      [Property]\n      \n      lineNumberStart\n  \n  \n    Where to start counting indexes in the gutter. Note, this is purely for display purposes.\n  \n  \n    \n  \n  \n    number\n  \n  \n    1\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      code\n  \n  \n    We will take the code, wrap it in &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt; and run it through\nPrism.js.\nIf the element has disableHighlight, we will not touch their code. Instead they must pass in escapedHTML.\n  \n  \n    \n  \n  \n    string\n  \n  \n    &quot;&quot;\n  \n\n\n\n  \n      [Attribute + Property]\n      \n      wrap\n  \n  \n    If wrap=\"soft\", lines will wrap when they reach the edge of their container. If wrap=\"none\", lines will not wrap instead all the user to scroll horizontally to see more code.\n  \n  \n    \n  \n  \n    &quot;soft&quot; | &quot;hard&quot;\n  \n  \n    &quot;soft&quot;\n  \n\n\n    \n  \n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    highlight()\n  \n  \n    -\n  \n  \n    code\n  \n\n\n\n  \n    addShadowRootToPreview()\n  \n  \n    -\n  \n  \n    root: HTMLElement | Element | ShadowRoot\n  \n\n\n    \n  \n\n\nParts\n\n\n  \n    \n      \n        Name\n        Description\n      \n    \n    \n      \n  \n    base\n  \n  \n    The base wrapping element\n  \n\n\n\n  \n    preview\n  \n  \n    The wrapper around the iframe / div preview showing your code being run in the browser.\n  \n\n\n\n  \n    start-panel\n  \n  \n    The iframe or preview-div\n  \n\n\n\n  \n    preview-div\n  \n  \n    used for inline previews\n  \n\n\n\n  \n    iframe\n  \n  \n    used for iframe based previews (default)\n  \n\n\n\n  \n    panel-resizer\n  \n  \n    The button that resizes the panel\n  \n\n\n\n  \n    end-panel\n  \n  \n    The white space when dragging the resizer\n  \n\n\n\n  \n    source-details\n  \n  \n    The details element that shows the source code\n  \n\n\n\n  \n    code-wrapper\n  \n  \n    The div that wraps the &lt;pre&gt; +  elements containing your highlighted code\n  \n\n\n\n  \n    pre\n  \n  \n    The &lt;pre&gt; element wrapping the source code\n  \n\n\n\n  \n    code\n  \n  \n    The   element wrapping the source code\n  \n\n\n\n  \n    actions\n  \n  \n    The buttons at the bottom of the code previewer\n  \n\n\n\n  \n    source-code-toggle\n  \n  \n    The button to show the source code\n  \n\n\n\n  \n    source-code-toggle-icon\n  \n  \n    The caret icon in the source code toggle"
        },
        {
          "id": "light-pen-guides-getting-started",
          "title": "Getting Started",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/light-pen/guides/getting-started/",
          "content": "Installation\n\nnpm install light-pen\n\n# If supporting older browsers\nnpm install element-internals-polyfill\n\n\nNPM Usage\n\n// entrypoint.js\nimport \"element-internals-polyfill\"; // Optional polyfill for ElementInternals() for older browsers.\nimport \"light-pen\";\n\n\nCDN usage\n\n&lt;script type=\"module\"&gt;\n  import \"https://esm.run/element-internals-polyfill\";\n  import \"https://esm.run/light-pen\";\n\n  // Loading a version range. This will load the latest &gt;= 3 and &lt; 4 of light-pen.\n  import \"https://esm.run/light-pen@^3.0.0\";\n\n  // Loading a specific version. This will only load v3.0.0\n  import \"https://esm.run/light-pen@3.0.0\";\n&lt;/script&gt;\n\n\n&lt;!-- Your HTML file --&gt;\n&lt;light-pen&gt;\n  &lt;script type=\"text/plain\" slot=\"html\"&gt;\n    &lt;!-- HTML --&gt;\n  &lt;/script&gt;\n\n  &lt;script type=\"text/plain\" slot=\"css\"&gt;\n    &lt;!-- CSS --&gt;\n  &lt;/script&gt;\n\n  &lt;script type=\"text/plain\" slot=\"js\"&gt;\n    &lt;!-- JS --&gt;\n  &lt;/script&gt;\n&lt;/light-pen&gt;\n\n\nPolyfills\n\n\n  \n  \n  This library makes use of ElementInternals\nfor “Form Association”. If you support older browsers, it’s recommended you download the element-internals-polyfill.\n\nhttps://caniuse.com/?search=element%20internals\n\n\nFor additional components and how to use them, check out their component pages."
        },
        {
          "id": "light-pen-guides-adding-languages-for-highlighting",
          "title": "Adding languages for highlighting",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/light-pen/guides/adding-languages-for-highlighting/",
          "content": "&lt;light-preview&gt;, &lt;light-code&gt;, and &lt;light-editor&gt; all have a highlighter property on them.\n\nThis property holds an instance of a fork of PrismJS called PrismJS ESM\n\nThe reason a fork is used is because PrismJS expects a singleton. This doesn’t work well if you have multiple components on a page and may need different plugins or hooks or other various things per-component. The fork is an attempt to make it ESM compatible and allow multiple instance to exist.\n\nMoving on, to add a language, we can query for our &lt;light-*&gt; component, modify the highlighter, and reassign it.\n\nLet’s for example create a &lt;light-editor&gt; component, add the markdown loader and change it’s language to markdown.\n\n\n  \n\n\nCaveats\n\nBe aware that only “loaders” added to your PrismJS instance can perform syntax highlighting on code blocks.\n\nFor example, the default Prism instance only comes loaded with the following languages / grammars:\n\n\n  markup\n  markup-templating\n  css\n  css-extras\n  javascript\n  js-extras\n  js-templates\n  jsx\n  typescript\n  tsx\n\n\nA full list of all possible languages and grammars can be found here:\n\nhttps://github.com/KonnorRogers/prism-esm/tree/master/components\n\nThe general syntax is as follows:\n\n// Import the loader\nimport { loader as RubyLoader } from \"https://cdn.jsdelivr.net/npm/prism-esm/components/prism-ruby.js\")\n\n// Find the `&lt;light-editor&gt;` element\nconst lightEditor = document.querySelector(\"light-editor\")\n\n// Get the Prism highlighter instance\nconst highlighter = lightEditor.highlighter\n\n// Add the \"grammar\"\nRubyLoader(highlighter)\n\n// Force an update\nlightEditor.setAttribute(\"language\", \"markdown\")\nlightEditor.requestUpdate(\"highlighter\")"
        },
        {
          "id": "light-pen-guides",
          "title": "Guides",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/light-pen/guides/",
          "content": ""
        },
        {
          "id": "light-pen-references",
          "title": "References",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/light-pen/references/",
          "content": "Coming Soon…"
        },
        {
          "id": "light-pen-references-why-script-tags",
          "title": "Why script tags",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/light-pen/references/why-script-tags/",
          "content": "You’ll notice in examples for &lt;light-*&gt; elements that slotted elements it uses &lt;script type=\"text/plain\"&gt; tags and not &lt;template&gt; tags.\n\nThe &lt;template&gt; tag is not suitable for syntax highlighting because it applies formatting and is subject to the HTML parser. It is meant purely for HTML intended to be rendered. As a result, it will do things like strip / format text. As a result, &lt;script type=\"text/plain\"&gt; is the best way to get a “plaintext” representation of your code to be highlighted.\n\nTLDR: Use &lt;template&gt; for displaying HTML. Use &lt;script type=\"text/plain\"&gt; for non-html languages, or for escape sequences like &lt;!DOCTYPE html&gt; which will get stripped by &lt;template&gt; as well as invalid HTML. Overall, &lt;script type=\"text/plain\"&gt; results in code that doesn’t get lost.\n\nUnescaping tags\n\nBecause we use the workaround of slotting elements like this, there is the edge case of if you need a &lt;script&gt; within a &lt;script&gt;.\n\nLike so:\n\n&lt;light-preview preview-mode=\"shadow-dom\"&gt;\n  &lt;script type=\"text/plain\" slot=\"code\"&gt;\n    &lt;script&gt;\n      console.log(\"Hello World\")\n    &lt;/script&gt;\n  &lt;/script&gt;\n&lt;/light-preview&gt;\n\n\nTo workaround this, &lt;light-*&gt; components have a convention of automatically unescaping tags that look like this:\n\n&amp;lt;/script&gt; and turns them into proper closing tags. &lt;/script&gt;\n\nSo if we were to rewrite the example above, we would write it like this:\n\n&lt;light-preview preview-mode=\"shadow-dom\"&gt;\n  &lt;script type=\"text/plain\" slot=\"code\"&gt;\n    &lt;script&gt;\n      console.log(\"Hello World\")\n    &amp;lt;/script&gt;\n  &lt;/script&gt;\n&lt;/light-preview&gt;"
        },
        {
          "id": "light-pen-references-changelog",
          "title": "Changelog",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/light-pen/references/changelog/",
          "content": "Next\n\n\n  BREAKING_CHANGE: All components are now scoped under exports/components/&lt;component-name&gt;/&lt;component-name&gt;.js\n\n\nv3.1.2 - 07/18/2024\n\n\n  Bug Fix(light-code): wrap=\"none\" properly renamed to wrap=\"hard\" #22\n  Bug Fix(light-code): Fixes wrapping in light-editor, and adjusts the wrap values to align with &lt;light-pen&gt; #22\n  Bug Fix(light-code) Line highlights now work properly when using wrap=\"hard\" #22\n  Bug Fix(light-code): Added cursor syncing due to line numbers obstructing view of text #22\n\n\nv3.1.1 - 06/01/2024\n\n\n  \n    Bug Fix(light-code): Fixed a bug that caused LineNumberPlugin to run before the Prism afterTokenize hooks.\n  \n  \n    Styles(light-code): &lt;light-code&gt; refactored to use CSS variables for easier initial styling.\n  \n  \n    Dependencies: Upgraded Lit and form-associated-helpers\n  \n\n\nv3.1.0 - 05/28/2024\n\n\n  Feature: Add src attribute for loading remote content into &lt;light-editor&gt;\n  \n    Feature: Added highlighter property to &lt;light-code&gt;, &lt;light-preview&gt;, and &lt;light-editor&gt; for customizing the Prism instance.\n  \n  \n    Bug Fix: required is not a proper boolean on &lt;light-editor&gt;\n  \n  \n    Styles(light-code): &lt;light-code&gt; (and &lt;light-preview&gt; / &lt;light-editor&gt;) got updates to their default theme and now have a number of syntax tokens to use for easy themeing.\n  \n  Docs: Added documentation on how to extend the Prism instance.\n\n\nv3.0.6 - 04/04/2024\n\n\n  Bug Fix: &lt;light-editor&gt; now properly scrolls. #15\n\n\nv3.0.5 - 04/04/2024\n\n\n  Bug Fix: gutter now behaves appropriately when scrolling on wrap=\"hard\" #14\n\n\nv3.0.4 - 03/31/2024\n\n\n  Bug Fix: No longer wipe away state when resizing a &lt;light-preview&gt; #13\n\n\nv3.0.3 03/28/2024\n\n\n  Bug Fix: Fixed gutter in &lt;light-code&gt; not extending the entire height of the element.\n  Bug Fix: Make &lt;iframe&gt; max-width: 100%; so it doesn’t overflow preview container.\n\n\nv3.0.2 - 03/11/2024\n\n\n  Styles: overflow: auto; moved to [part~=\"base\"] in &lt;light-preview&gt;\n  Bug Fix: disable-highlight and disable-line-numbers now works as expected in &lt;light-preview&gt;\n  Bug Fix: &lt;light-preview&gt; fixes unescapeBehavior attribute to unescape-behavior\n  Bug Fix: &lt;light-code&gt; now properly supports wrap=\"hard\".\n\n\nv3.0.1 - 02/27/2024\n\n\n  Bug Fix: Properly add sandbox-settings for &lt;light-preview&gt; and &lt;light-pen&gt;\n\n\nv3.0.0 - 02/26/2024\n\nBug Fix: &lt;light-preview&gt; now correctly passes the wrap property down to &lt;light-code&gt;\n\nv3.0.0 - 02/27/2024\n\n\n  BREAKING_CHANGE: The default entrypoint now registers all elements.\n  BREAKING_CHANGE: previewCode has changed to previewHtml property and preview-html attribute for &lt;light-preview&gt;.\n  Feature: Added lineNumberStart for counting indexes starting at a specific number.\n  Feature: code and preview-code attributes are now supported on &lt;light-preview&gt;\n  Feature: Added &lt;light-code&gt; for displaying code.\n  Feature: Added line numbers to all code displays.\n  Bug Fix: &lt;script&gt; tags now properly execute inside of &lt;light-preview&gt; and have the scope of their shadow dom bound.\n  Improvement: &lt;light-editor&gt;, &lt;light-code&gt;, and &lt;light-preview&gt; all use &lt;light-code&gt; internally now.\n  Improvement: Use declarative shadow DOM and fallback to polyfill in &lt;light-preview&gt;\n\n\nv2.3.1 - 02/13/2024\n\n\n  Update form associated package\n\n\nv2.3.0 - 02/13/2024\n\n\n  Added form association to &lt;light-editor&gt;\n  Added wrap=\"soft | hard\" to &lt;light-preview&gt; and &lt;light-editor&gt;\n  Added preserve-whitespace to the &lt;light-pen&gt; to pass down to &lt;light-editor&gt;\n  &lt;light-preview&gt; now properly creates a second level shadow dom so the preview’s shadow dom styles don’t leak.\n\n\nv2.2.0 - 12/03/2023\n\n\n  Switch to a Prism fork to play nicely with ESM and allow testing.\n\n\nv2.1.0\n\n\n  Added initialValue to the &lt;light-editor&gt; to allow for resetting the form input.\n  Fixed a bug where we would have Prism running automatically.\n  Fixed a bug where &lt;light-pen&gt; was no resetting to initial values.\n\n\nv2.0.0\n\n\n  BREAKING_CHANGE: Renamed inline-preview to preview-mode for &lt;light-preview&gt; with options of \"iframe\" or \"shadow-dom\"\n  BREAKING_CHANGE: Changed underlying highlighting library from Highlight.JS to PrismJS\n  BREAKING_CHANGE: &lt;light-editor&gt; and &lt;light-preview&gt; No longer attempt to escape / unescape characters in editors and previews.\n  BREAKING_CHANGE: &lt;light-preview&gt; has renamed highlightLanguage property to language. highlight-language attribute has been renamed to language.\n  Added &lt;light-disclosure&gt;\n\n\nv1.2.0\n\n\n  Added &lt;light-editor&gt;\n  &lt;light-pen&gt; now uses &lt;light-editor&gt; under the hood. A number of parts have been moved around for the editor.\n\n\nv1.1.2\n\n\n  Don’t use src or srcdoc, return to using iframe.contentWindow.writeln(content) due to fixing\nsome CORS bugs.\n\n\nv1.1.0\n\n\n  A number of fixes including allowing &lt;template&gt; elements to be slotted into &lt;light-pen&gt; and &lt;light-preview&gt;\n\n\nv1.0.2\n\n\n  fix: issues with &amp;gt; and &amp;lt;\n\n\nv1.0.1\n\n\n  fix: allow any HTML Element for templating"
        },
        {
          "id": "light-pen",
          "title": "Light Pen",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/light-pen/",
          "content": "A collection of components that may not fit a design system, but that I wanted to build."
        },
        {
          "id": "light-pen-bridgetown_quick_search-index.json",
          "title": "Index",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/light-pen/bridgetown_quick_search/index.json",
          "content": "[\n  {%- assign looped = false %}\n  {%- assign documents = site.documents %}\n  {%- if site.content_engine == \"resource\" %}{% assign documents = site.resources %}{% endif %}\n  {%- for document in documents %}\n    {%- if document.title %}\n      {%- unless document.exclude_from_search or document.id == \"\" %}\n        {%- assign url = document.url %}\n        {%- if site.content_engine == \"resource\" %}{% assign url = document.relative_url %}{% endif %}\n        {%- if looped %},{% endif %}\n        {\n          \"id\": \"{{ url | slugify }}\",\n          \"title\": {{ document.title | jsonify }},\n          {%- if document.collection %}\n          \"collection\": {\n            \"label\": {{ document.collection.label | jsonify }},\n            \"name\": {{ document.collection.name | default: \"Posts\" | jsonify }}\n          },\n          {%- endif %}\n          \"categories\": {{ document.categories | join: \", \" | jsonify }},\n          \"tags\": {{ document.tags | join: \", \" | jsonify }},\n          \"url\": {{ url | jsonify }},\n          \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n        }\n        {%- assign looped = true %}\n      {%- endunless %}\n    {%- endif %}\n  {%- endfor %}\n  {%- for document in site.generated_pages %}\n    {%- if document.name contains \".md\" or document.name contains \".html\" %}\n      {%- if document.title %}\n        {%- unless document.exclude_from_search %}\n          {%- if looped %},{% endif %}\n          {\n            \"id\": \"{{ document.url | slugify }}\",\n            \"title\": {{ document.title | jsonify }},\n            \"categories\": {{ document.categories | join: \", \" | jsonify }},\n            \"tags\": {{ document.tags | join: \", \" | jsonify }},\n            \"url\": {{ document.url | jsonify }},\n            \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n          }\n        {%- endunless %}\n      {%- endif %}\n    {%- endif %}\n  {%- endfor %}\n]"
        },
        {
          "id": "",
          "title": "Lightweight components editing and syntax highlighting.",
          "collection": {
            "label": "data",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "",
          "content": ""
        }
]
