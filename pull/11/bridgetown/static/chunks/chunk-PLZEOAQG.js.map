{
  "version": 3,
  "sources": ["../../../../../exports/light-preview.styles.js", "../../../../../exports/light-preview.js"],
  "sourcesContent": ["import { css } from \"lit\"\n\nexport const previewStyles = css`\n:host {\n  --border-color: lightgray;\n}\n\n:host,\n[part~=\"base\"] {\n  max-width: 100%;\n}\n\n:host([resizing]) [part=~\"base\"] {\n  cursor: col-resize;\n}\n\n[part~=\"base\"] {\n  border: 1px solid var(--border-color);\n  border-radius: 3px;\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-template-rows: minmax(0, auto) minmax(0, 1fr) minmax(0, auto);\n  height: 100%;\n  min-height: inherit;\n}\n\n[part~=\"panel-resizer\"] {\n  border-color: transparent;\n  border-radius: 0;\n  border-inline-start: 1px solid var(--border-color);\n}\n\n:host(:not([resize-position=\"100\"])) [part~=\"panel-resizer\"] {\n  border-inline-end: 1px solid var(--border-color);\n}\n\n[part~=\"preview\"] {\n  display: grid;\n  grid-template-columns: minmax(0, var(--start-panel-width, 1fr)) minmax(0, auto) minmax(0, var(--end-panel-width, auto));\n  overflow: auto;\n  max-height: 100%;\n  resize: vertical;\n\n}\n\n[part~=\"start-panel\"] {\n  padding: 1rem;\n  min-width: 100%;\n}\n\n[part~=\"preview\"] {\n  min-height: 100%;\n  max-height: 100%;\n  width: 100%;\n}\n\n[part~=\"end-panel\"] {\n  background-color: rgba(0,0,0,0.025);\n}\n\n[part~=\"code-wrapper\"] {\n  border-top: 1px solid var(--border-color);\n}\n\n[part~=\"actions\"] {\n  display: grid;\n  align-items: center;\n  grid-auto-flow: column;\n  grid-template-columns: minmax(0, 1fr) repeat(auto-fill, minmax(0, auto));\n}\n\nbutton[part~=\"source-code-toggle\"] {\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  justify-content: center;\n  border-color: transparent;\n  border-top-left-radius: 0px;\n  border-top-right-radius: 0px;\n  border-top: 1px solid var(--border-color);\n  min-height: 100%;\n  font-size: 1em;\n  padding: 0.75rem;\n}\n\n[part~=\"source-code-toggle\"] svg {\n  transform-origin: 50% 50%;\n  transition: .25s transform ease;\n}\n\n[part~=\"source-code-toggle\"][aria-expanded=\"true\"] svg {\n  transform: rotate(180deg);\n}\n\n[part~=\"source-details\"]::part(summary) {\n  display: none;\n}\n`\n", "// @ts-check\nimport { html } from \"lit\";\nimport { buttonStyles, baseStyles } from \"./base-styles.js\";\n\nimport { when } from \"lit/directives/when.js\";\nimport { previewStyles } from \"./light-preview.styles.js\";\nimport { drag } from \"../internal/drag.js\";\nimport { clamp } from \"../internal/clamp.js\";\nimport { stringMap } from \"../internal/string-map.js\";\nimport { debounce } from \"../internal/debounce.js\";\nimport { resizeIcon } from \"../internal/resize-icon.js\";\nimport { BaseElement } from \"../internal/base-element.js\";\nimport LightDisclosure from \"./light-disclosure.js\";\nimport { elementsToString } from \"../internal/elements-to-strings.js\";\nimport { dedent } from \"../internal/dedent.js\";\nimport LightCode from \"./light-code.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nconst sourceCodeFallback = \"Show source code\"\n\n/**\n * LightPreview is a very lightweight code previewer designed to load your code sample\n *   inside of an iFrame for encapsulated viewing. `<light-preview>` uses PrismJS as it's\n * @customElement\n * @tagname light-preview\n *\n * @csspart base - The base wrapping element\n * @csspart preview - The wrapper around the iframe / div preview showing your code being run in the browser.\n * @csspart start-panel - The iframe or preview-div\n * @csspart preview-div - used for inline previews\n * @csspart iframe - used for iframe based previews (default)\n * @csspart panel-resizer - The button that resizes the panel\n * @csspart end-panel - The white space when dragging the resizer\n * @csspart source-details - The details element that shows the source code\n * @csspart code-wrapper - The div that wraps the <pre> + <code> elements containing your highlighted code\n * @csspart pre - The <pre> element wrapping the source code\n * @csspart code - The <code>  element wrapping the source code\n * @csspart actions - The buttons at the bottom of the code previewer\n * @csspart source-code-toggle - The button to show the source code\n * @csspart source-code-toggle-icon - The caret icon in the source code toggle\n *\n * @slot resize-icon - The icon to display in the resizer button. Override this to provide your own icon.\n * @slot summary - What to display in source code expander\n * @slot source-code-toggle-icon - Slot in your own icon to override the default caret.\n * @slot actions - Slot in buttons / links to allow for additional actions in the bottom bar.\n * @slot preview-html - If you want to run code that is slightly different from the source code you want to display, slot it into \"preview-html\"\n * @slot code - Used to display both source code and to power your preview in the iframe. If you slot in \"preview-html\", then it will only be used to show / highlight your source code.\n */\nexport default class LightPreview extends BaseElement {\n  /**\n   * @override\n   */\n  static baseName = \"light-preview\"\n\n  /**\n   * @override\n   */\n  static dependencies = {\n    \"light-disclosure\": LightDisclosure,\n    \"light-code\": LightCode\n  }\n\n  /**\n   * @override\n   */\n  static styles = [\n    baseStyles,\n    buttonStyles,\n    previewStyles,\n  ]\n\n  /**\n   * @override\n   */\n  static properties = {\n    summary: {},\n    sandboxSettings: { reflect: true, attribute: \"sandbox-settings\" },\n    previewMode: { reflect: true, attribute: \"preview-mode\" },\n    disableHighlight: { type: Boolean, attribute: \"disable-highlight\" },\n    open: { reflect: true, type: Boolean },\n    resizePosition: { reflect: true, type: Number, attribute: \"resize-position\" },\n    resizing: { reflect: true, type: Boolean },\n    language: { reflect: true },\n    unescapeBehavior: { attribute: \"unescape-behavior\", reflect: true },\n    disableLineNumbers: {type: Boolean, reflect: true, attribute: \"disable-line-numbers\"},\n    highlightLines: {attribute: \"highlight-lines\"},\n    insertedLines: {attribute: \"inserted-lines\"},\n    deletedLines: {attribute: \"deleted-lines\"},\n    lineNumberStart: {type: Number, attribute: \"line-number-start\"},\n    scriptScope: {attribute: \"script-scope\"},\n    wrap: {},\n    code: {},\n    previewHtml: { attribute: \"preview-html\" },\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * The sandbox settings to provide to the <iframe>\n     * @type {string}\n     */\n    this.sandboxSettings = \"\"\n\n    /**\n     * The text to provide in the <details> toggle button\n     * @type {string}\n     */\n    this.summary = sourceCodeFallback\n\n    /**\n     * The language to highlight for.\n     * @type {string}\n     */\n    this.language = \"html\"\n\n    /**\n     * Set to true to not use an <iframe> for previewing\n     * @type {\"iframe\" | \"shadow-dom\"}\n     */\n    this.previewMode = \"iframe\"\n\n    /**\n     * When the resizer is being dragged, this will be true.\n     * @type {boolean}\n     */\n    this.resizing = false\n\n    /**\n     * If disabled, its on you to provide `<pre><code></code></pre>`\n     * @type {boolean}\n     */\n    this.disableHighlight = false\n\n\n    /**\n     * @type {string} - A string of possible lines to highlight. Example: \"{1-9, 16, 18}\"\n     */\n    this.highlightLines = \"\"\n\n    /**\n     * @type {string} - A string of lines that are inserted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.insertedLines = \"\"\n\n    /**\n     * @type {string} - A string of lines that are deleted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.deletedLines = \"\"\n\n    /**\n     * @type {boolean} whether or not to disable line numbers\n     */\n    this.disableLineNumbers = false\n\n    /**\n     * Where to start counting indexes in the gutter. Note, this is purely for display purposes.\n     * @type {number}\n     */\n    this.lineNumberStart = 1\n\n    /**\n     * We will take the code, wrap it in `<pre><code></code></pre>` and run it through\n     * Prism.js.\n     * If the element has `disableHighlight`, we will not touch their code. Instead they must pass in escapedHTML.\n     * @type {string}\n     */\n    this.code = \"\"\n\n    /**\n     * If `disableHighlight` is true, then you must pass in an element into `previewHtml` to be able to get\n     *   the code to run in the previewer.\n     * @type {string}\n     */\n    this.previewHtml = \"\"\n\n    /**\n     * Whether or not the source code is being shown\n     * @type {boolean}\n     */\n    this.open = false\n\n    /**\n     * The current position of the resizer. 100 means all the way to right. 0 means all the way to left.\n     * @type {number}\n     */\n    this.resizePosition = 100\n\n    /**\n     * @internal\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));\n\n    /**\n     * @internal\n     * @type {MutationObserverInit}\n     */\n    this.__mutationObserverConfig = {childList: true, subtree: true, characterData: true }\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.previewHtmlDebounce = debounce(() => this.handleMutation(\"preview-html\"), 20)\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.codeDebounce = debounce(() => this.handleMutation(\"code\"), 20)\n\n    /**\n     * @property\n     * @type {\"soft\" | \"hard\"}\n     * If `wrap=\"soft\"`, lines will wrap when they reach the edge of their container. If `wrap=\"none\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\n     */\n    this.wrap = \"soft\"\n\n\n    /**\n     * Whether or not to transform `&lt;/script>` into `<script>`\n     * If true, will run transform. If false, will leave the code as is.\n     * @type {\"all\" | \"last\" | \"none\"}\n     */\n    this.unescapeBehavior = \"last\"\n\n    /**\n     * When using `preview-mode=\"shadow-dom\"`,\n     * There's a funky issue with previews where if you want the location of the shadowRoot\n     * you are, you can't get it. As a result, `<light-preview>` supports the idea of a \"scriptScope\"\n     * where `document` is bound to the current shadowRoot instead of the actual top level `document`\n     * For more info, check out this GitHub issue:\n     * @link {https://github.com/WICG/webcomponents/issues/717#issuecomment-1126786185}\n     *\n     * @type {\"document\" | \"shadow-dom\"}\n     */\n    this.scriptScope = \"document\"\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation on slotted preview-html\n   */\n  resetIframeCodeMutationObserver () {\n    if (this.previewHtmlMutationObserver) {\n      this.previewHtmlMutationObserver.disconnect()\n    }\n    this.previewHtmlMutationObserver = new MutationObserver((..._args) => this.previewHtmlDebounce())\n\n    const targets = this.findSlot(\"preview-html\")?.assignedElements({ flatten: true }) || []\n\n    for (const target of targets) {\n      this.previewHtmlMutationObserver.observe(target, this.__mutationObserverConfig)\n    }\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation observer on slotted code\n   */\n  resetCodeMutationObserver () {\n    if (this.codeMutationObserver) {\n      this.codeMutationObserver.disconnect()\n    }\n    this.codeMutationObserver = new MutationObserver((..._args) => this.codeDebounce())\n\n    const targets = this.findSlot(\"code\")?.assignedElements({ flatten: true }) || []\n\n    for (const target of targets) {\n      this.codeMutationObserver.observe(target, this.__mutationObserverConfig)\n    }\n  }\n\n\n  /**\n   * @internal\n   * @param {\"preview-html\" | \"code\"} variable\n   */\n  handleMutation (variable) {\n    if (variable === \"preview-html\") {\n      this.handleTemplate({ target: this.findSlot(\"preview-html\") })\n      return\n    }\n\n    if (variable === \"code\") {\n      this.handleTemplate({ target: this.findSlot(\"code\") })\n      return\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} name\n   * @returns {HTMLSlotElement | null | undefined}\n   */\n  findSlot(name) {\n    return this.shadowRoot?.querySelector(`slot[name='${name}']`)\n  }\n\n  /**\n   * @internal\n   * @param {Event | { target?: undefined | null | HTMLSlotElement }} e\n   */\n  handleTemplate (e) {\n    /**\n     * @type {HTMLSlotElement | null | undefined}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    if (slot == null) return\n\n    const name = slot.getAttribute(\"name\")\n\n    if ([\"preview-html\", \"code\"].includes(name || \"\") === false) return\n\n    let shouldReset = \"type\" in e && e.type === \"slotchange\"\n\n    let elements = slot.assignedElements({flatten: true})\n\n    const code = dedent(elementsToString(...elements).trim())\n\n    if (name === \"preview-html\") {\n      if (shouldReset) this.resetIframeCodeMutationObserver()\n      this.previewHtml = code\n      this.requestUpdate(\"previewHtml\")\n      return\n    }\n\n    if (name === \"code\") {\n      if (shouldReset) this.resetCodeMutationObserver()\n      this.code = code\n      this.requestUpdate(\"code\")\n      return\n    }\n  }\n\n  /**\n   * @internal\n   */\n  updateIframeContent () {\n    const code = this.previewHtml || this.code\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\")\n\n    if (!iframe) return\n\n    const content = `\n      <!doctype html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n        </head>\n        <body>\n          ${code}\n        </body>\n      </html>`\n\n    iframe.srcdoc = content\n  }\n\n  /**\n   * @internal\n   * @param {string} text\n   */\n  escapeCharacters(text) {\n    return text\n    // return text.replaceAll(new RegExp(\"<\", \"g\"), \"&lt;\").replaceAll(new RegExp(\">\", \"g\"), \"&gt;\")\n  }\n\n  /**\n   * Only used to unescape things like `&lt;/script>` from slotted content.\n   * @internal\n   * @param {string} text\n   */\n  transformTags (text) {\n    const unescapeRegex = /&lt;\\/([\\w\\d\\.-_]+)>/g\n    if (this.unescapeBehavior === \"last\") {\n      return replaceLast(text, unescapeRegex)\n    }\n\n    if (this.unescapeBehavior === \"all\") {\n      return text.replaceAll(unescapeRegex, \"</$1>\");\n    }\n\n    return text\n  }\n\n  /**\n   * @override\n   * @internal\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate (changedProperties) {\n    if (/** @type {Array<\"previewHtml\" | \"code\">} */ ([\"previewHtml\", \"code\"]).some((str) => changedProperties.has((str)))) {\n      if (this._iframeDebounce != null) window.clearTimeout(this._iframeDebounce)\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300)\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition()\n    }\n\n    super.willUpdate(changedProperties)\n  }\n\n  /**\n   * @internal\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth () {\n    const { left, right } = this.getBoundingClientRect()\n    const width = left + right\n    this.cachedWidth = width\n  }\n\n  /**\n   * @internal\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize (entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right\n    // Resize when a primary panel is set\n    this.cachedWidth = width\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback () {\n    super.connectedCallback()\n\n    this.updateCachedWidth()\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this)\n\n      this.resetIframeCodeMutationObserver()\n      this.resetCodeMutationObserver()\n    })\n  }\n\n  /**\n   * @public\n   * Override this function to use your own highlighter\n   */\n  highlight (code = this.code) {\n    return code\n  }\n\n  /**\n   * @private\n   * @param {HTMLElement | Element | ShadowRoot} root\n   */\n  addShadowRootToPreview (root) {\n    const previewDiv = root.querySelector(\"[part~='preview-div']\")\n\n    if (!previewDiv) return\n\n    const transformedTags = this.transformTags(this.code || this.previewHtml)\n\n    if (!previewDiv.shadowRoot) {\n      previewDiv.attachShadow({ mode: \"open\" })\n    }\n\n    // This shouldnt happen. but :shrug:\n    if (!previewDiv.shadowRoot) return\n\n    previewDiv.shadowRoot.innerHTML = transformedTags\n\n    /**\n     * @param {HTMLElement} target\n     * @param {HTMLElement} source\n     */\n    function cloneAttributes(target, source) {\n      Array.from(source.attributes).forEach(attr => {\n        target.setAttribute(attr.nodeName, attr.nodeValue || \"\")\n      })\n    }\n\n    previewDiv.shadowRoot?.querySelectorAll(\"script\").forEach((script) => {\n      if (script.type === \"module\" || script.type.trim() === \"\" || script.type.includes(\"javascript\")) {\n        const newScript = document.createElement(\"script\")\n        newScript.innerHTML = script.innerHTML\n\n        cloneAttributes(newScript, script)\n\n        if (this.scriptScope !== \"shadow-dom\") {\n          script.replaceWith(newScript)\n          return\n        }\n\n        script.remove()\n\n        // https://github.com/WICG/webcomponents/issues/717#issuecomment-1126786185\n        const host = previewDiv;\n        const shadowRoot = previewDiv.shadowRoot\n        /** @param {string} script */\n        const scopedEval = (script) => Function('document', script).bind(host, shadowRoot, script)();\n        scopedEval(newScript.innerHTML)\n      }\n    })\n  }\n\n  /**\n   * @override\n   */\n  render () {\n    const finalHTML = html`\n      <div part=${stringMap({\n          \"base\": true,\n        })}>\n        <div part=\"preview\">\n          ${when(this.previewMode === \"shadow-dom\",\n              () => html`<div part=\"start-panel preview-div\"></div>`,\n              () => html`\n                <iframe part=\"start-panel iframe\" height=\"auto\" frameborder=\"0\" sandbox=${ifDefined(this.sandboxSettings ? this.sandboxSettings : null)}></iframe>\n              `\n           )}\n          <button\n            id=\"panel-resizer\"\n            part=\"panel-resizer\"\n            role=\"separator\"\n            aria-valuenow=${this.resizePosition}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            @keydown=${this.handleResizerKeydown}\n            @pointerdown=${this.handleDrag}\n            @touchstart=${this.handleDrag}\n            class=${`light-button ${this.resizing ? \"is-active\" : \"\"}`}\n          >\n            <slot name=\"resize-icon\">\n              ${resizeIcon}\n            </slot>\n          </button>\n\n          <div part=\"end-panel\"></div>\n        </div>\n\n        <light-disclosure\n          id=\"details\"\n          ?open=${this.open}\n          @light-toggle=${(/** @type {Event} */ e) => this.open = /** @type {LightDisclosure} */ (e.currentTarget).open}\n          part=\"source-details\"\n          aria-labelledby=\"summary\"\n          exportparts=\"\n            summary:source-details__summary\n          \"\n        >\n          <div part=\"code-wrapper\">\n            <light-code\n              .language=${this.language}\n              .code=${this.transformTags(this.code)}\n              wrap=${this.wrap}\n              ?disableHighlight=${this.disableHighlight}\n              ?disableLineNumbers=${this.disableLineNumbers}\n              .highlightLines=${this.highlightLines}\n              .insertedLines=${this.insertedLines}\n              .deletedLines=${this.deletedLines}\n              .lineNumberStart=${this.lineNumberStart}\n            ></light-code>\n          </div>\n        </light-disclosure>\n\n        <div part=\"actions\">\n          <button class=\"light-button\" part=\"source-code-toggle\" aria-expanded=${this.open} aria-controls=\"details\" @click=${() => this.open = !this.open} type=\"button\">\n            <slot name=\"summary\">${this.summary || sourceCodeFallback}</slot>\n            <slot name=\"source-code-toggle-icon\">\n              <svg part=\"source-code-toggle-icon\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <polyline points=\"6 9 12 15 18 9\"></polyline>\n              </svg>\n            </slot>\n          </button>\n\n          <slot name=\"actions\"></slot>\n        </div>\n      </div>\n\n      <div hidden>\n        <slot name=\"preview-html\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"code\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n    `\n\n    if (this.shadowRoot) {\n      this.addShadowRootToPreview(this.shadowRoot)\n    }\n\n    return finalHTML\n  }\n\n\n  /**\n   * @internal\n   */\n  get panelResizer () {\n    return this.shadowRoot?.querySelector(\"[part~='panel-resizer']\")\n  }\n\n\n  /** Drag stuff */\n  /**\n   * @internal\n   * @param {PointerEvent} event\n   */\n  handleDrag (event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\")\n    if (iframe) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      iframe.style.pointerEvents = \"none\"\n    }\n\n    this.resizing = true\n\n    const target = event.currentTarget\n\n    // @ts-expect-error\n    const halfWidth = (target?.offsetWidth || 0) / 2\n\n    drag(this, {\n      onMove: (x, _y) => {\n        let newPositionInPixels = x + halfWidth;\n\n        this.resizePosition = clamp(0, this.pixelsToPercentage(newPositionInPixels), 100);\n        this.updateResizePosition()\n        this.resizing = true\n      },\n      onStop: () => {\n        const iframe = this.shadowRoot?.querySelector(\"iframe\")\n        if (iframe) {\n        // Re-enable pointerevents so you can use tab keys etc.\n          iframe.style.pointerEvents = \"auto\"\n        }\n\n        this.resizing = false\n      },\n      initialEvent: event\n    });\n  }\n\n  /**\n   * @internal\n   */\n  updateResizePosition (resizePosition = this.resizePosition) {\n    const startWidth = resizePosition\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth\n      this.style.setProperty(\"--start-panel-width\", `clamp(100px, ${startWidth}%, 100%)`)\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`)\n    }\n  }\n\n  /**\n   * @internal\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown (event) {\n    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * (1);\n\n      event.preventDefault();\n\n      if (event.key === 'ArrowLeft') {\n        newPosition -= incr;\n      }\n\n      if (event.key === 'ArrowRight') {\n        newPosition += incr;\n      }\n\n      if (event.key === 'Home') {\n        newPosition = 100;\n      }\n\n      if (event.key === 'End') {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(0, newPosition, 100);\n    }\n  }\n\n\n  /**\n   * @internal\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage (pixels) {\n    // @ts-expect-error\n    return (pixels / this.cachedWidth) * 100\n  }\n}\n\n/**\n  * @param {string} s - The string to replace\n  * @param {number} start - The start index\n  * @param {number} end - The end index\n  * @param {string} substitute - the substituting string\n  */\nfunction replaceRange(s, start, end, substitute) {\n    return s.substring(0, start) + substitute + s.substring(end);\n}\n\n/**\n * @param {string} text\n * @param {RegExp} regex\n */\nfunction replaceLast (text, regex) {\n  const matches = [...text.matchAll(regex)]\n\n  const lastMatch = matches[matches.length - 1]\n\n  if (!lastMatch) return text\n  if (lastMatch.index == null) return text\n\n  const { index } = lastMatch\n\n  const start = index\n  const end = index + lastMatch[0].length\n  const substitution = \"</\" + lastMatch[1] + \">\"\n  return replaceRange(text, start, end, substitution)\n}\n"],
  "mappings": "8UAEO,IAAMA,EAAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECgB7B,IAAMC,EAAqB,mBA8BNC,EAArB,cAA0CC,CAAY,CA+CpD,aAAe,CACb,MAAM,EAMN,KAAK,gBAAkB,GAMvB,KAAK,QAAUF,EAMf,KAAK,SAAW,OAMhB,KAAK,YAAc,SAMnB,KAAK,SAAW,GAMhB,KAAK,iBAAmB,GAMxB,KAAK,eAAiB,GAKtB,KAAK,cAAgB,GAKrB,KAAK,aAAe,GAKpB,KAAK,mBAAqB,GAM1B,KAAK,gBAAkB,EAQvB,KAAK,KAAO,GAOZ,KAAK,YAAc,GAMnB,KAAK,KAAO,GAMZ,KAAK,eAAiB,IAMtB,KAAK,eAAiB,IAAI,eAAgBG,GAAY,KAAK,aAAaA,CAAO,CAAC,EAMhF,KAAK,yBAA2B,CAAC,UAAW,GAAM,QAAS,GAAM,cAAe,EAAK,EAMrF,KAAK,oBAAsBC,EAAS,IAAM,KAAK,eAAe,cAAc,EAAG,EAAE,EAMjF,KAAK,aAAeA,EAAS,IAAM,KAAK,eAAe,MAAM,EAAG,EAAE,EAOlE,KAAK,KAAO,OAQZ,KAAK,iBAAmB,OAYxB,KAAK,YAAc,UACrB,CAMA,iCAAmC,CAC7B,KAAK,6BACP,KAAK,4BAA4B,WAAW,EAE9C,KAAK,4BAA8B,IAAI,iBAAiB,IAAIC,IAAU,KAAK,oBAAoB,CAAC,EAEhG,IAAMC,EAAU,KAAK,SAAS,cAAc,GAAG,iBAAiB,CAAE,QAAS,EAAK,CAAC,GAAK,CAAC,EAEvF,QAAWC,KAAUD,EACnB,KAAK,4BAA4B,QAAQC,EAAQ,KAAK,wBAAwB,CAElF,CAMA,2BAA6B,CACvB,KAAK,sBACP,KAAK,qBAAqB,WAAW,EAEvC,KAAK,qBAAuB,IAAI,iBAAiB,IAAIF,IAAU,KAAK,aAAa,CAAC,EAElF,IAAMC,EAAU,KAAK,SAAS,MAAM,GAAG,iBAAiB,CAAE,QAAS,EAAK,CAAC,GAAK,CAAC,EAE/E,QAAWC,KAAUD,EACnB,KAAK,qBAAqB,QAAQC,EAAQ,KAAK,wBAAwB,CAE3E,CAOA,eAAgBC,EAAU,CACxB,GAAIA,IAAa,eAAgB,CAC/B,KAAK,eAAe,CAAE,OAAQ,KAAK,SAAS,cAAc,CAAE,CAAC,EAC7D,MACF,CAEA,GAAIA,IAAa,OAAQ,CACvB,KAAK,eAAe,CAAE,OAAQ,KAAK,SAAS,MAAM,CAAE,CAAC,EACrD,MACF,CACF,CAOA,SAASC,EAAM,CACb,OAAO,KAAK,YAAY,cAAc,cAAcA,CAAI,IAAI,CAC9D,CAMA,eAAgB,EAAG,CAKjB,IAAMC,EAAO,EAAE,OAEf,GAAIA,GAAQ,KAAM,OAElB,IAAMD,EAAOC,EAAK,aAAa,MAAM,EAErC,GAAI,CAAC,eAAgB,MAAM,EAAE,SAASD,GAAQ,EAAE,IAAM,GAAO,OAE7D,IAAIE,EAAc,SAAU,GAAK,EAAE,OAAS,aAExCC,EAAWF,EAAK,iBAAiB,CAAC,QAAS,EAAI,CAAC,EAE9CG,EAAOC,EAAOC,EAAiB,GAAGH,CAAQ,EAAE,KAAK,CAAC,EAExD,GAAIH,IAAS,eAAgB,CACvBE,GAAa,KAAK,gCAAgC,EACtD,KAAK,YAAcE,EACnB,KAAK,cAAc,aAAa,EAChC,MACF,CAEA,GAAIJ,IAAS,OAAQ,CACfE,GAAa,KAAK,0BAA0B,EAChD,KAAK,KAAOE,EACZ,KAAK,cAAc,MAAM,EACzB,MACF,CACF,CAKA,qBAAuB,CACrB,IAAMA,EAAO,KAAK,aAAe,KAAK,KAEhCG,EAAS,KAAK,YAAY,cAAc,QAAQ,EAEtD,GAAI,CAACA,EAAQ,OAEb,IAAMC,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAORJ,CAAI;AAAA;AAAA,eAIZG,EAAO,OAASC,CAClB,CAMA,iBAAiBC,EAAM,CACrB,OAAOA,CAET,CAOA,cAAeA,EAAM,CACnB,IAAMC,EAAgB,wBACtB,OAAI,KAAK,mBAAqB,OACrBC,EAAYF,EAAMC,CAAa,EAGpC,KAAK,mBAAqB,MACrBD,EAAK,WAAWC,EAAe,OAAO,EAGxCD,CACT,CAOA,WAAYG,EAAmB,CACqB,CAAC,cAAe,MAAM,EAAG,KAAMC,GAAQD,EAAkB,IAAKC,CAAI,CAAC,IAC/G,KAAK,iBAAmB,MAAM,OAAO,aAAa,KAAK,eAAe,EAC1E,KAAK,gBAAkB,WAAW,IAAM,KAAK,oBAAoB,EAAG,GAAG,GAGrED,EAAkB,IAAI,gBAAgB,GACxC,KAAK,qBAAqB,EAG5B,MAAM,WAAWA,CAAiB,CACpC,CAMA,mBAAqB,CACnB,GAAM,CAAE,KAAAE,EAAM,MAAAC,CAAM,EAAI,KAAK,sBAAsB,EAC7CC,EAAQF,EAAOC,EACrB,KAAK,YAAcC,CACrB,CAMA,aAActB,EAAS,CACrB,GAAM,CAAE,KAAAoB,EAAM,MAAAC,CAAM,EAAIrB,EAAQ,CAAC,EAAE,YAE7BsB,EAAQF,EAAOC,EAErB,KAAK,YAAcC,CACrB,CAKA,mBAAqB,CACnB,MAAM,kBAAkB,EAExB,KAAK,kBAAkB,EAEvB,KAAK,eAAe,KAAK,IAAM,CAC7B,KAAK,eAAe,QAAQ,IAAI,EAEhC,KAAK,gCAAgC,EACrC,KAAK,0BAA0B,CACjC,CAAC,CACH,CAMA,UAAWZ,EAAO,KAAK,KAAM,CAC3B,OAAOA,CACT,CAMA,uBAAwBa,EAAM,CAC5B,IAAMC,EAAaD,EAAK,cAAc,uBAAuB,EAE7D,GAAI,CAACC,EAAY,OAEjB,IAAMC,EAAkB,KAAK,cAAc,KAAK,MAAQ,KAAK,WAAW,EAOxE,GALKD,EAAW,YACdA,EAAW,aAAa,CAAE,KAAM,MAAO,CAAC,EAItC,CAACA,EAAW,WAAY,OAE5BA,EAAW,WAAW,UAAYC,EAMlC,SAASC,EAAgBtB,EAAQuB,EAAQ,CACvC,MAAM,KAAKA,EAAO,UAAU,EAAE,QAAQC,GAAQ,CAC5CxB,EAAO,aAAawB,EAAK,SAAUA,EAAK,WAAa,EAAE,CACzD,CAAC,CACH,CAEAJ,EAAW,YAAY,iBAAiB,QAAQ,EAAE,QAASK,GAAW,CACpE,GAAIA,EAAO,OAAS,UAAYA,EAAO,KAAK,KAAK,IAAM,IAAMA,EAAO,KAAK,SAAS,YAAY,EAAG,CAC/F,IAAMC,EAAY,SAAS,cAAc,QAAQ,EAKjD,GAJAA,EAAU,UAAYD,EAAO,UAE7BH,EAAgBI,EAAWD,CAAM,EAE7B,KAAK,cAAgB,aAAc,CACrCA,EAAO,YAAYC,CAAS,EAC5B,MACF,CAEAD,EAAO,OAAO,EAGd,IAAME,EAAOP,EACPQ,EAAaR,EAAW,YAEVK,GAAW,SAAS,WAAYA,CAAM,EAAE,KAAKE,EAAMC,EAAYH,CAAM,EAAE,GAChFC,EAAU,SAAS,CAChC,CACF,CAAC,CACH,CAKA,QAAU,CACR,IAAMG,EAAYC;AAAA,kBACJC,EAAU,CAClB,KAAQ,EACV,CAAC,CAAC;AAAA;AAAA,YAEEC,EAAK,KAAK,cAAgB,aACxB,IAAMF,8CACN,IAAMA;AAAA,0FACsEG,EAAU,KAAK,gBAAkB,KAAK,gBAAkB,IAAI,CAAC;AAAA,eAE5I,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,4BAKgB,KAAK,cAAc;AAAA;AAAA;AAAA,uBAGxB,KAAK,oBAAoB;AAAA,2BACrB,KAAK,UAAU;AAAA,0BAChB,KAAK,UAAU;AAAA,oBACrB,gBAAgB,KAAK,SAAW,YAAc,EAAE,EAAE;AAAA;AAAA;AAAA,gBAGtDC,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASR,KAAK,IAAI;AAAA,0BACqBC,GAAM,KAAK,KAAuCA,EAAE,cAAe,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAS7F,KAAK,QAAQ;AAAA,sBACjB,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,qBAC9B,KAAK,IAAI;AAAA,kCACI,KAAK,gBAAgB;AAAA,oCACnB,KAAK,kBAAkB;AAAA,gCAC3B,KAAK,cAAc;AAAA,+BACpB,KAAK,aAAa;AAAA,8BACnB,KAAK,YAAY;AAAA,iCACd,KAAK,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAM4B,KAAK,IAAI,mCAAmC,IAAM,KAAK,KAAO,CAAC,KAAK,IAAI;AAAA,mCACtH,KAAK,SAAW1C,CAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAarB,KAAK,cAAc;AAAA,wCAC3B,KAAK,cAAc;AAAA;AAAA,MAIvD,OAAI,KAAK,YACP,KAAK,uBAAuB,KAAK,UAAU,EAGtCoC,CACT,CAMA,IAAI,cAAgB,CAClB,OAAO,KAAK,YAAY,cAAc,yBAAyB,CACjE,CAQA,WAAYO,EAAO,CAEbA,EAAM,YACRA,EAAM,eAAe,EAGvB,IAAM3B,EAAS,KAAK,YAAY,cAAc,QAAQ,EAClDA,IAEFA,EAAO,MAAM,cAAgB,QAG/B,KAAK,SAAW,GAKhB,IAAM4B,GAHSD,EAAM,eAGM,aAAe,GAAK,EAE/CE,EAAK,KAAM,CACT,OAAQ,CAACR,EAAGS,IAAO,CACjB,IAAIC,EAAsBV,EAAIO,EAE9B,KAAK,eAAiBI,EAAM,EAAG,KAAK,mBAAmBD,CAAmB,EAAG,GAAG,EAChF,KAAK,qBAAqB,EAC1B,KAAK,SAAW,EAClB,EACA,OAAQ,IAAM,CACZ,IAAM/B,EAAS,KAAK,YAAY,cAAc,QAAQ,EAClDA,IAEFA,EAAO,MAAM,cAAgB,QAG/B,KAAK,SAAW,EAClB,EACA,aAAc2B,CAChB,CAAC,CACH,CAKA,qBAAsBM,EAAiB,KAAK,eAAgB,CAC1D,IAAMC,EAAaD,EAEnB,GAAIC,GAAc,KAAM,CACtB,IAAMC,EAAW,IAAMD,EACvB,KAAK,MAAM,YAAY,sBAAuB,gBAAgBA,CAAU,UAAU,EAClF,KAAK,MAAM,YAAY,oBAAqB,GAAGC,CAAQ,GAAG,CAC5D,CACF,CAMA,qBAAsBR,EAAO,CAC3B,GAAI,CAAC,YAAa,aAAc,UAAW,YAAa,OAAQ,KAAK,EAAE,SAASA,EAAM,GAAG,EAAG,CAC1F,IAAIS,EAAc,KAAK,eACjBC,GAAQV,EAAM,SAAW,GAAK,GAAM,EAE1CA,EAAM,eAAe,EAEjBA,EAAM,MAAQ,cAChBS,GAAeC,GAGbV,EAAM,MAAQ,eAChBS,GAAeC,GAGbV,EAAM,MAAQ,SAChBS,EAAc,KAGZT,EAAM,MAAQ,QAChBS,EAAc,GAGhB,KAAK,eAAiBJ,EAAM,EAAGI,EAAa,GAAG,CACjD,CACF,CAQA,mBAAoBE,EAAQ,CAE1B,OAAQA,EAAS,KAAK,YAAe,GACvC,CACF,EA1oBEC,EAJmBtD,EAIZ,WAAW,iBAKlBsD,EATmBtD,EASZ,eAAe,CACpB,mBAAoBuD,EACpB,aAAcC,CAChB,GAKAF,EAjBmBtD,EAiBZ,SAAS,CACdyD,EACAC,EACAC,CACF,GAKAL,EA1BmBtD,EA0BZ,aAAa,CAClB,QAAS,CAAC,EACV,gBAAiB,CAAE,QAAS,GAAM,UAAW,kBAAmB,EAChE,YAAa,CAAE,QAAS,GAAM,UAAW,cAAe,EACxD,iBAAkB,CAAE,KAAM,QAAS,UAAW,mBAAoB,EAClE,KAAM,CAAE,QAAS,GAAM,KAAM,OAAQ,EACrC,eAAgB,CAAE,QAAS,GAAM,KAAM,OAAQ,UAAW,iBAAkB,EAC5E,SAAU,CAAE,QAAS,GAAM,KAAM,OAAQ,EACzC,SAAU,CAAE,QAAS,EAAK,EAC1B,iBAAkB,CAAE,UAAW,oBAAqB,QAAS,EAAK,EAClE,mBAAoB,CAAC,KAAM,QAAS,QAAS,GAAM,UAAW,sBAAsB,EACpF,eAAgB,CAAC,UAAW,iBAAiB,EAC7C,cAAe,CAAC,UAAW,gBAAgB,EAC3C,aAAc,CAAC,UAAW,eAAe,EACzC,gBAAiB,CAAC,KAAM,OAAQ,UAAW,mBAAmB,EAC9D,YAAa,CAAC,UAAW,cAAc,EACvC,KAAM,CAAC,EACP,KAAM,CAAC,EACP,YAAa,CAAE,UAAW,cAAe,CAC3C,GAymBF,SAAS4D,EAAaC,EAAGC,EAAOC,EAAKC,EAAY,CAC7C,OAAOH,EAAE,UAAU,EAAGC,CAAK,EAAIE,EAAaH,EAAE,UAAUE,CAAG,CAC/D,CAMA,SAAS5C,EAAaF,EAAMgD,EAAO,CACjC,IAAMC,EAAU,CAAC,GAAGjD,EAAK,SAASgD,CAAK,CAAC,EAElCE,EAAYD,EAAQA,EAAQ,OAAS,CAAC,EAG5C,GADI,CAACC,GACDA,EAAU,OAAS,KAAM,OAAOlD,EAEpC,GAAM,CAAE,MAAAmD,CAAM,EAAID,EAEZL,EAAQM,EACRL,EAAMK,EAAQD,EAAU,CAAC,EAAE,OAC3BE,EAAe,KAAOF,EAAU,CAAC,EAAI,IAC3C,OAAOP,EAAa3C,EAAM6C,EAAOC,EAAKM,CAAY,CACpD",
  "names": ["previewStyles", "i", "sourceCodeFallback", "LightPreview", "BaseElement", "entries", "debounce", "_args", "targets", "target", "variable", "name", "slot", "shouldReset", "elements", "code", "dedent", "elementsToString", "iframe", "content", "text", "unescapeRegex", "replaceLast", "changedProperties", "str", "left", "right", "width", "root", "previewDiv", "transformedTags", "cloneAttributes", "source", "attr", "script", "newScript", "host", "shadowRoot", "finalHTML", "x", "stringMap", "n", "l", "resizeIcon", "e", "event", "halfWidth", "drag", "_y", "newPositionInPixels", "clamp", "resizePosition", "startWidth", "endWidth", "newPosition", "incr", "pixels", "__publicField", "LightDisclosure", "LightCode", "baseStyles", "buttonStyles", "previewStyles", "replaceRange", "s", "start", "end", "substitute", "regex", "matches", "lastMatch", "index", "substitution"]
}
