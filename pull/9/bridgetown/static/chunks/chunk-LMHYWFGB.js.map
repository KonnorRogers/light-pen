{
  "version": 3,
  "sources": ["../../../../../exports/light-code.js"],
  "sourcesContent": ["// @ts-check\nimport { html } from \"lit\";\nimport { baseStyles } from \"./base-styles.js\";\n\nimport { theme } from './default-theme.styles.js'\nimport { PrismHighlight, prism } from '../internal/prism-highlight.js';\n\nimport { when } from \"lit/directives/when.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { stringMap } from \"../internal/string-map.js\";\nimport { debounce } from \"../internal/debounce.js\";\nimport { BaseElement } from \"../internal/base-element.js\";\nimport { elementsToString } from \"../internal/elements-to-strings.js\";\nimport { dedent } from \"../internal/dedent.js\";\nimport { codeStyles } from \"./code-styles.js\";\nimport { LineNumberPlugin } from \"../internal/line-number-plugin.js\";\n\n/**\n * LightCode is a minimal wrapper around Prism for displaying code highlighting\n *\n * @customElement\n * @tagname light-code\n *\n * @csspart base - The base wrapping element\n * @csspart pre - The <pre> element wrapping the source code\n * @csspart code - The <code>  element wrapping the source code\n\n * @slot default - The code to use for highlighting\n */\nexport default class LightCode extends BaseElement {\n  /**\n   * @override\n   */\n  static baseName = \"light-code\"\n\n  /**\n   * @override\n   */\n  static styles = [\n    baseStyles,\n    codeStyles,\n    theme\n  ]\n\n  /**\n   * @override\n   */\n  static properties = {\n    summary: {},\n    disableHighlight: { type: Boolean, attribute: \"disable-highlight\" },\n    preserveWhitespace: { type: Boolean, attribute: \"preserveWhitespace\" },\n    highlightLines: { attribute: \"highlight-lines\" },\n    addedLines: { attribute: \"added-lines\" },\n    removedLines: { attribute: \"removed-lines\" },\n    lineNumbers: { type: Boolean, attribute: \"line-numbers\" },\n    wrap: { reflect: true, attribute: \"wrap\" },\n    language: {},\n    code: {},\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * The language to highlight for.\n     * @type {string}\n     */\n    this.language = \"html\"\n\n    /**\n     * If disabled, its on you to provide `<pre><code></code></pre>`\n     * @type {boolean}\n     */\n    this.disableHighlight = false\n\n    /**\n     * We will take the code, wrap it in `<pre><code></code></pre>` and run it through\n     * Highlight.js.\n     * If the element has `disableHighlight`, we will not touch their code. Instead they must pass in escapedHTML.\n     * @type {string}\n     */\n    this.code = \"\"\n\n    /**\n     * @internal\n     * @type {MutationObserverInit}\n     */\n    this.__mutationObserverConfig = {childList: true, subtree: true, characterData: true }\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.codeDebounce = debounce(() => this.handleMutation(\"code\"), 20)\n\n    /**\n     * @property\n     * @type {\"soft\" | \"hard\"}\n     * If `wrap=\"soft\"`, lines will wrap when they reach the edge of their container. If `wrap=\"none\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\n     */\n    this.wrap = \"soft\"\n\n    /**\n     * @property\n     * @type {Boolean}\n     * Whether or not to preserve white spaces from templates and attempt to dedent and chomp new lines.\n     */\n    this.preserveWhitespace = false\n  }\n\n  /**\n   * @internal\n   * @param {\"preview-code\" | \"code\"} variable\n   */\n  handleMutation (variable) {\n    if (variable === \"code\") {\n      this.handleTemplate({ target: this.findSlot(\"code\") })\n      return\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} name\n   * @returns {HTMLSlotElement | null | undefined}\n   */\n  findSlot(name) {\n    return this.shadowRoot?.querySelector(`slot[name='${name}']`)\n  }\n\n  /**\n   * @internal\n   * @param {Event | { target?: undefined | null | HTMLSlotElement }} e\n   */\n  handleTemplate (e) {\n    /**\n     * @type {HTMLSlotElement | null | undefined}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    if (slot == null) return\n\n    const name = slot.getAttribute(\"name\")\n\n    if ([\"preview-code\", \"code\"].includes(name || \"\") === false) return\n\n    let elements = slot.assignedElements({flatten: true})\n\n\t\tlet code = this.unescapeTags(elementsToString(...elements))\n\n\t\tif (!this.preserveWhitespace) {\n    \tcode = dedent(code.trim())\n    }\n\n    if (name === \"code\") {\n      this.code = code\n      return\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} text\n   */\n  escapeCharacters(text) {\n    return text\n  }\n\n  /**\n   * Only used to unescape things like `&lt;/script>` from slotted content.\n   * @internal\n   * @param {string} text\n   */\n  unescapeTags (text) {\n    // Replace usages of `&lt;/script>` with `</script>`. Match against\n    // `&lt;/` so that other usages of &lt; aren't replaced.\n    // return text.replace(/&lt;\\//g, '</');\n\n    return text.replaceAll(/&lt;\\/([\\w\\d\\.-_]+)>/g, \"</$1>\")\n    // return text\n  }\n\n  /**\n   * @public\n   * Override this function to use your own highlighter\n   */\n  highlight (code = this.code) {\n    code = PrismHighlight(code, prism.languages[this.language], this.language, {\n      afterTokenize: [\n        LineNumberPlugin(),\n        (env) => {\n          const tokens = env.tokens\n          if (!Array.isArray(tokens)) return\n\n          let index = -1;\n          for (const token of tokens) {\n            index++;\n            if (typeof token === \"string\") continue\n\n            if (token.type === \"light-line\") {\n              token.type += \" highlight-\" + index.toString()\n            }\n          }\n        }\n      ]\n    })\n    return code\n  }\n\n  /**\n   * @override\n   */\n  render () {\n    const language = this.language\n\n    const finalHTML = html`\n      <div part=${stringMap({\n          \"base\": true,\n        })}>\n          ${when(!this.disableHighlight,\n            () => html`\n\t\t\t\t\t    <pre\n                id=\"pre-${language}\"\n                data-code-lang=${language}\n                aria-hidden=\"true\"\n                part=\"pre pre-${language}\"\n                tabindex=\"0\"\n                aria-labelledby=\"source-code-label\"\n                class=\"language-${language}\"\n                role=\"region\"\n              ><code\n                  part=\"code code-${language}\"\n                  class=\"language-${language}\"\n                >${unsafeHTML(this.highlight(this.code))}</code></pre>`,\n            () => html`${unsafeHTML(this.code)}`\n          )}\n      </div>\n\n      <div hidden>\n        <slot name=\"code\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n    `\n\n    return finalHTML\n  }\n}\n"],
  "mappings": "sdA6BA,IAAqBA,EAArB,cAAuCC,CAAY,CA+BjD,aAAe,CACb,MAAM,EAMN,KAAK,SAAW,OAMhB,KAAK,iBAAmB,GAQxB,KAAK,KAAO,GAMZ,KAAK,yBAA2B,CAAC,UAAW,GAAM,QAAS,GAAM,cAAe,EAAK,EAMrF,KAAK,aAAeC,EAAS,IAAM,KAAK,eAAe,MAAM,EAAG,EAAE,EAOlE,KAAK,KAAO,OAOZ,KAAK,mBAAqB,EAC5B,CAMA,eAAgBC,EAAU,CACxB,GAAIA,IAAa,OAAQ,CACvB,KAAK,eAAe,CAAE,OAAQ,KAAK,SAAS,MAAM,CAAE,CAAC,EACrD,MACF,CACF,CAOA,SAASC,EAAM,CACb,OAAO,KAAK,YAAY,cAAc,cAAcA,CAAI,IAAI,CAC9D,CAMA,eAAgB,EAAG,CAKjB,IAAMC,EAAO,EAAE,OAEf,GAAIA,GAAQ,KAAM,OAElB,IAAMD,EAAOC,EAAK,aAAa,MAAM,EAErC,GAAI,CAAC,eAAgB,MAAM,EAAE,SAASD,GAAQ,EAAE,IAAM,GAAO,OAE7D,IAAIE,EAAWD,EAAK,iBAAiB,CAAC,QAAS,EAAI,CAAC,EAElDE,EAAO,KAAK,aAAaC,EAAiB,GAAGF,CAAQ,CAAC,EAMxD,GAJG,KAAK,qBACPC,EAAOE,EAAOF,EAAK,KAAK,CAAC,GAGtBH,IAAS,OAAQ,CACnB,KAAK,KAAOG,EACZ,MACF,CACF,CAMA,iBAAiBG,EAAM,CACrB,OAAOA,CACT,CAOA,aAAcA,EAAM,CAKlB,OAAOA,EAAK,WAAW,wBAAyB,OAAO,CAEzD,CAMA,UAAWH,EAAO,KAAK,KAAM,CAC3B,OAAAA,EAAOI,EAAeJ,EAAMK,EAAM,UAAU,KAAK,QAAQ,EAAG,KAAK,SAAU,CACzE,cAAe,CACbC,EAAiB,EAChBC,GAAQ,CACP,IAAMC,EAASD,EAAI,OACnB,GAAI,CAAC,MAAM,QAAQC,CAAM,EAAG,OAE5B,IAAIC,EAAQ,GACZ,QAAWC,KAASF,EAClBC,IACI,OAAOC,GAAU,UAEjBA,EAAM,OAAS,eACjBA,EAAM,MAAQ,cAAgBD,EAAM,SAAS,EAGnD,CACF,CACF,CAAC,EACMT,CACT,CAKA,QAAU,CACR,IAAMW,EAAW,KAAK,SA8BtB,OA5BkBC;AAAA,kBACJC,EAAU,CAClB,KAAQ,EACV,CAAC,CAAC;AAAA,YACEC,EAAK,CAAC,KAAK,iBACX,IAAMF;AAAA;AAAA,0BAEQD,CAAQ;AAAA,iCACDA,CAAQ;AAAA;AAAA,gCAETA,CAAQ;AAAA;AAAA;AAAA,kCAGNA,CAAQ;AAAA;AAAA;AAAA,oCAGNA,CAAQ;AAAA,oCACRA,CAAQ;AAAA,mBACzBI,EAAW,KAAK,UAAU,KAAK,IAAI,CAAC,CAAC,gBAC5C,IAAMH,IAAOG,EAAW,KAAK,IAAI,CAAC,EACpC,CAAC;AAAA;AAAA;AAAA;AAAA,wCAI6B,KAAK,cAAc;AAAA;AAAA,KAKzD,CACF,EArNEC,EAJmBvB,EAIZ,WAAW,cAKlBuB,EATmBvB,EASZ,SAAS,CACdwB,EACAC,EACAC,CACF,GAKAH,EAlBmBvB,EAkBZ,aAAa,CAClB,QAAS,CAAC,EACV,iBAAkB,CAAE,KAAM,QAAS,UAAW,mBAAoB,EAClE,mBAAoB,CAAE,KAAM,QAAS,UAAW,oBAAqB,EACrE,eAAgB,CAAE,UAAW,iBAAkB,EAC/C,WAAY,CAAE,UAAW,aAAc,EACvC,aAAc,CAAE,UAAW,eAAgB,EAC3C,YAAa,CAAE,KAAM,QAAS,UAAW,cAAe,EACxD,KAAM,CAAE,QAAS,GAAM,UAAW,MAAO,EACzC,SAAU,CAAC,EACX,KAAM,CAAC,CACT",
  "names": ["LightCode", "BaseElement", "debounce", "variable", "name", "slot", "elements", "code", "elementsToString", "dedent", "text", "PrismHighlight", "prism", "LineNumberPlugin", "env", "tokens", "index", "token", "language", "x", "stringMap", "n", "o", "__publicField", "baseStyles", "codeStyles", "theme"]
}
