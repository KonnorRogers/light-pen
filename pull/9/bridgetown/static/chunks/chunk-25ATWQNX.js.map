{
  "version": 3,
  "sources": ["../../../../../internal/line-number-plugin.js"],
  "sourcesContent": ["// @ts-check\nimport { Token } from 'prism-esm';\n\nconst newLineRegex = /\\r\\n|\\r|\\n/\n\n/**\n * Options for the LineNumberPlugin. Currently nothing.\n * @typedef {object} Options\n */\n\n/**\n * @param {Options} [options={}]\n * @return {import('./prism-highlight.js').Hook}\n */\nexport function LineNumberPlugin(\n  options = {}\n) {\n  /**\n   * @type {import('./prism-highlight.js').Hook}\n   */\n  return function lineNumberPlugin (env) {\n    env.tokens = splitLinesRec(env.tokens).map((ary) => {\n      if (ary.length <= 0) {\n        ary.push(\" \")\n      }\n\n      return new Token(\"light-line\", ary)\n    });\n\n  }\n}\n\n/**\n * @param {Array<Token | string> | Token | string} content\n * @return {Array<Token | string>}\n */\nfunction wrapContent(\n  content,\n) {\n  return Array.isArray(content) ? content : [content];\n}\n\n/**\n * @param {Array<Token | string>} content\n * @return {Array<Token | string> | string}\n */\nfunction unwrapContent(\n  content,\n) {\n  if (content.length === 0) {\n    return '';\n  } else if (content.length === 1 && typeof content[0] === 'string') {\n    return content[0];\n  }\n\n  return content;\n}\n\n\n/**\n * @param {Array<Token | string>} tokens\n * @return {Array<Array<Token | string>>}\n */\nfunction splitLinesRec(\n  tokens\n) {\n  /** @type {Array<Token | string>} */\n  let currentLine = [];\n  /** @type {Array<Array<Token | string>>} */\n  const lines = [currentLine];\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (typeof token === 'string') {\n      const split = token.split(newLineRegex);\n      for (let j = 0; j < split.length; j++) {\n        if (j > 0) {\n          lines.push((currentLine = []));\n        }\n\n        const token1 = split[j];\n        if (token1) {\n          currentLine.push(token1);\n        }\n      }\n    } else {\n      // @ts-expect-error\n      const split = splitLinesRec(wrapContent(token.content));\n      if (split.length > 1) {\n        for (let j = 0; j < split.length; j++) {\n          if (j > 0) {\n            lines.push((currentLine = []));\n          }\n\n          const line = split[j];\n          if (line.length) {\n            const token1 = new Token(\n              token.type,\n              unwrapContent(line),\n              token.alias,\n            );\n            token1.length = line.reduce((l, t) => l + t.length, 0);\n            currentLine.push(token1);\n          }\n        }\n      } else {\n        currentLine.push(token);\n      }\n    }\n  }\n\n  return lines;\n}\n\n"],
  "mappings": "iFAGA,IAAMA,EAAe,aAWd,SAASC,EACdC,EAAU,CAAC,EACX,CAIA,OAAO,SAA2BC,EAAK,CACrCA,EAAI,OAASC,EAAcD,EAAI,MAAM,EAAE,IAAKE,IACtCA,EAAI,QAAU,GAChBA,EAAI,KAAK,GAAG,EAGP,IAAIC,EAAM,aAAcD,CAAG,EACnC,CAEH,CACF,CAMA,SAASE,EACPC,EACA,CACA,OAAO,MAAM,QAAQA,CAAO,EAAIA,EAAU,CAACA,CAAO,CACpD,CAMA,SAASC,EACPD,EACA,CACA,OAAIA,EAAQ,SAAW,EACd,GACEA,EAAQ,SAAW,GAAK,OAAOA,EAAQ,CAAC,GAAM,SAChDA,EAAQ,CAAC,EAGXA,CACT,CAOA,SAASJ,EACPM,EACA,CAEA,IAAIC,EAAc,CAAC,EAEbC,EAAQ,CAACD,CAAW,EAE1B,QAAS,EAAI,EAAG,EAAID,EAAO,OAAQ,IAAK,CACtC,IAAMG,EAAQH,EAAO,CAAC,EACtB,GAAI,OAAOG,GAAU,SAAU,CAC7B,IAAMC,EAAQD,EAAM,MAAMb,CAAY,EACtC,QAASe,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACjCA,EAAI,GACNH,EAAM,KAAMD,EAAc,CAAC,CAAE,EAG/B,IAAMK,EAASF,EAAMC,CAAC,EAClBC,GACFL,EAAY,KAAKK,CAAM,CAE3B,CACF,KAAO,CAEL,IAAMF,EAAQV,EAAcG,EAAYM,EAAM,OAAO,CAAC,EACtD,GAAIC,EAAM,OAAS,EACjB,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACjCA,EAAI,GACNH,EAAM,KAAMD,EAAc,CAAC,CAAE,EAG/B,IAAMM,EAAOH,EAAMC,CAAC,EACpB,GAAIE,EAAK,OAAQ,CACf,IAAMD,EAAS,IAAIV,EACjBO,EAAM,KACNJ,EAAcQ,CAAI,EAClBJ,EAAM,KACR,EACAG,EAAO,OAASC,EAAK,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAE,OAAQ,CAAC,EACrDR,EAAY,KAAKK,CAAM,CACzB,CACF,MAEAL,EAAY,KAAKE,CAAK,CAE1B,CACF,CAEA,OAAOD,CACT",
  "names": ["newLineRegex", "LineNumberPlugin", "options", "env", "splitLinesRec", "ary", "Token", "wrapContent", "content", "unwrapContent", "tokens", "currentLine", "lines", "token", "split", "j", "token1", "line", "l", "t"]
}
