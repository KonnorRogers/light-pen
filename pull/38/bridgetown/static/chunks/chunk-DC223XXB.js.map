{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/file+/node_modules/light-pen/exports/styles/base-styles.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/exports/styles/default-theme.styles.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/exports/styles/code-styles.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/prism-highlight.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/debounce.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/base-element.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/elements-to-strings.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/dedent.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/line-number-plugin.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/number-range.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/internal/line-highlight-plugin.js", "../../../../../node_modules/.pnpm/file+/node_modules/light-pen/exports/components/light-code/light-code.js"],
  "sourcesContent": ["import { css } from \"lit\";\n\nexport const baseStyles = css`\n  *,\n  *:after,\n  *:before {\n    box-sizing: border-box;\n  }\n\n  .visually-hidden:not(:focus-within) {\n    position: absolute;\n    overflow: hidden;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    width: 1px;\n    height: 1px;\n    white-space: nowrap;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n\n  :host {\n    display: block;\n  }\n`;\n\n/**\n * @param {string[]} selectors\n */\nexport const buttonStyles = css`\n  .light-button {\n    appearance: none;\n    -webkit-appearance: none;\n    border: 1px solid gray;\n    background-color: inherit;\n    padding: 0.4em 0.6em;\n    color: inherit;\n    border-radius: 4px;\n  }\n\n  .light-button:focus-visible {\n    outline: 2px solid hsl(203, 77%, 43%);\n  }\n\n  @supports not selector(:focus-visible) {\n    .light-button:focus-within {\n      outline: 2px solid hsl(203, 77%, 43%);\n    }\n  }\n\n  .light-button:is(:active, :hover, .is-active) {\n    cursor: pointer;\n    color: hsla(203, 77%, 43%);\n    background-color: hsla(203, 77%, 93%);\n  }\n`;\n", "import { css } from \"lit\";\nexport const theme = css`\n  /**\n * One Light theme for prism.js\n * Based on Atom's One Light theme: https://github.com/atom/atom/tree/master/packages/one-light-syntax\n */\n\n  /**\n * One Light colours (accurate as of commit eb064bf on 19 Feb 2021)\n * From colors.less\n * --mono-1: hsl(230, 8%, 24%);\n * --mono-2: hsl(230, 6%, 44%);\n * --mono-3: hsl(230, 4%, 64%);\n * --hue-1: hsl(198, 99%, 37%);\n * --hue-2: hsl(221, 87%, 60%);\n * --hue-3: hsl(301, 63%, 40%);\n * --hue-4: hsl(119, 34%, 47%);\n * --hue-5: hsl(5, 74%, 59%);\n * --hue-5-2: hsl(344, 84%, 43%);\n * --hue-6: hsl(35, 99%, 36%);\n * --hue-6-2: hsl(35, 99%, 40%);\n * --syntax-fg: hsl(230, 8%, 24%);\n * --syntax-bg: hsl(230, 1%, 98%);\n * --syntax-gutter: hsl(230, 1%, 62%);\n * --syntax-guide: hsla(230, 8%, 24%, 0.2);\n * --syntax-accent: hsl(230, 100%, 66%);\n * From syntax-variables.less\n * --syntax-selection-color: hsl(230, 1%, 90%);\n * --syntax-gutter-background-color-selected: hsl(230, 1%, 90%);\n * --syntax-cursor-line: hsla(230, 8%, 24%, 0.05);\n * <---- Additional Tokens --->\n * --syntax-gutter-border: 1px solid darkgray;\n * --syntax-highlight-bg: hsl(210, 9%, 95%);\n * --syntax-highlight-selected-bg: hsla(230, 8%, 79%, 0.5);\n\n *  --syntax-deleted-selected-bg: hsla(353, 95%, 66%, 0.25);\n *  --syntax-deleted-bg: hsla(353, 95%, 66%, 0.25);\n\n *  --syntax-inserted-bg: hsla(137, 100%, 95%);\n *  --syntax-inserted-selected-bg: hsla(135, 73%, 55%, 0.25)\n */\n\n  :host {\n    --mono-1: hsl(230, 8%, 24%);\n    --mono-2: hsl(230, 6%, 44%);\n    --mono-3: hsl(230, 4%, 64%);\n    --hue-1: hsl(198, 99%, 37%);\n    --hue-2: hsl(221, 87%, 60%);\n    --hue-3: hsl(301, 63%, 40%);\n    --hue-4: hsl(119, 34%, 47%);\n    --hue-5: hsl(5, 74%, 59%);\n    --hue-5-2: hsl(344, 84%, 43%);\n    --hue-6: hsl(35, 99%, 36%);\n    --hue-6-2: hsl(35, 99%, 40%);\n    --syntax-fg: hsl(230, 8%, 24%);\n    --syntax-bg: hsl(230, 1%, 98%);\n    --syntax-gutter: hsl(230, 1%, 62%);\n    --syntax-guide: hsla(230, 8%, 24%, 0.2);\n    --syntax-accent: hsl(230, 100%, 66%);\n    /** From syntax-variables.less */\n    --syntax-selection-color: hsl(230, 1%, 90%);\n    --syntax-gutter-background-color-selected: hsl(230, 1%, 90%);\n    --syntax-cursor-line: hsla(230, 8%, 24%, 0.05);\n\n    /* --- additional tokens --> */\n    --syntax-gutter-border: 1px solid darkgray;\n\n    --syntax-highlight-bg: hsl(210, 9%, 95%);\n    --syntax-highlight-selected-bg: hsla(230, 8%, 79%, 0.5);\n\n    --syntax-deleted-bg: hsla(353, 95%, 86%, 0.25);\n    --syntax-deleted-selected-bg: hsla(353, 95%, 66%, 0.25);\n\n    --syntax-inserted-bg: hsla(137, 100%, 95%);\n    --syntax-inserted-selected-bg: hsla(135, 73%, 55%, 0.25);\n  }\n\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    background: var(--syntax-bg);\n    color: var(--syntax-fg);\n    direction: ltr;\n    text-align: left;\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n  }\n\n  /* Selection */\n  code[class*=\"language-\"]::-moz-selection,\n  code[class*=\"language-\"] *::-moz-selection,\n  pre[class*=\"language-\"] *::-moz-selection {\n    background: var(--syntax-selection-color);\n    color: inherit;\n  }\n\n  code[class*=\"language-\"]::selection,\n  code[class*=\"language-\"] *::selection,\n  pre[class*=\"language-\"] *::selection {\n    background: var(--syntax-selection-color);\n    color: inherit;\n  }\n\n  .token.comment,\n  .token.prolog,\n  .token.cdata {\n    color: var(--mono-3);\n  }\n\n  .token.doctype,\n  .token.punctuation,\n  .token.entity {\n    color: var(--mono-1);\n  }\n\n  .token.attr-name,\n  .token.class-name,\n  .token.boolean,\n  .token.constant,\n  .token.number,\n  .token.atrule {\n    color: var(--hue-6);\n  }\n\n  .token.keyword {\n    color: var(--hue-3);\n  }\n\n  .token.property,\n  .token.tag,\n  .token.symbol,\n  .token.deleted,\n  .token.important {\n    color: var(--hue-5);\n  }\n\n  .token.selector,\n  .token.string,\n  .token.char,\n  .token.builtin,\n  .token.inserted,\n  .token.regex,\n  .token.attr-value,\n  .token.attr-value > .token.punctuation {\n    color: var(--hue-4);\n  }\n\n  .token.variable,\n  .token.operator,\n  .token.function {\n    color: var(--hue-2);\n  }\n\n  .token.url {\n    color: var(--hue-1);\n  }\n\n  /* HTML overrides */\n  .token.attr-value > .token.punctuation.attr-equals,\n  .token.special-attr > .token.attr-value > .token.value.css {\n    color: var(--mono-1);\n  }\n\n  /* CSS overrides */\n  .language-css .token.selector {\n    color: var(--hue-5);\n  }\n\n  .language-css .token.property {\n    color: var(--mono-1);\n  }\n\n  .language-css .token.function,\n  .language-css .token.url > .token.function {\n    color: var(--hue-1);\n  }\n\n  .language-css .token.url > .token.string.url {\n    color: var(--hue-4);\n  }\n\n  .language-css .token.important,\n  .language-css .token.atrule .token.rule {\n    color: var(--hue-3);\n  }\n\n  /* JS overrides */\n  .language-javascript .token.operator {\n    color: var(--hue-3);\n  }\n\n  .language-javascript\n    .token.template-string\n    > .token.interpolation\n    > .token.interpolation-punctuation.punctuation {\n    color: var(--hue-5-2);\n  }\n\n  /* JSON overrides */\n  .language-json .token.operator {\n    color: var(--mono-1);\n  }\n\n  .language-json .token.null.keyword {\n    color: var(--hue-6);\n  }\n\n  /* MD overrides */\n  .language-markdown .token.url,\n  .language-markdown .token.url > .token.operator,\n  .language-markdown .token.url-reference.url > .token.string {\n    color: var(--mono-1);\n  }\n\n  .language-markdown .token.url > .token.content {\n    color: var(--hue-2);\n  }\n\n  .language-markdown .token.url > .token.url,\n  .language-markdown .token.url-reference.url {\n    color: var(--hue-1);\n  }\n\n  .language-markdown .token.blockquote.punctuation,\n  .language-markdown .token.hr.punctuation {\n    color: var(--mono-3);\n    font-style: italic;\n  }\n\n  .language-markdown .token.code-snippet {\n    color: var(--hue-4);\n  }\n\n  .language-markdown .token.bold .token.content {\n    color: var(--hue-6);\n  }\n\n  .language-markdown .token.italic .token.content {\n    color: var(--hue-3);\n  }\n\n  .language-markdown .token.strike .token.content,\n  .language-markdown .token.strike .token.punctuation,\n  .language-markdown .token.list.punctuation,\n  .language-markdown .token.title.important > .token.punctuation {\n    color: var(--hue-5);\n  }\n\n  /* General */\n  .token.bold {\n    font-weight: bold;\n  }\n\n  .token.comment,\n  .token.italic {\n    font-style: italic;\n  }\n\n  .token.entity {\n    cursor: help;\n  }\n\n  .token.namespace {\n    opacity: 0.8;\n  }\n\n  /* Plugin overrides */\n  /* Selectors should have higher specificity than those in the plugins' default stylesheets */\n\n  /* Show Invisibles plugin overrides */\n  .token.token.tab:not(:empty):before,\n  .token.token.cr:before,\n  .token.token.lf:before,\n  .token.token.space:before {\n    color: var(--syntax-guide);\n  }\n\n  /* Toolbar plugin overrides */\n  /* Space out all buttons and move them away from the right edge of the code block */\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item {\n    margin-right: 0.4em;\n  }\n\n  /* Styling the buttons */\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span {\n    background: var(--syntax-selection-color);\n    color: var(--mono-2);\n    padding: 0.1em 0.4em;\n    border-radius: 0.3em;\n  }\n\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:hover,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:focus,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:hover,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:focus,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:hover,\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:focus {\n    background: hsl(230, 1%, 78%); /* custom: darken(--syntax-bg, 20%) */\n    color: var(--mono-1);\n  }\n\n  /* Line Highlight plugin overrides */\n  /* The highlighted line itself */\n  .line-highlight.line-highlight {\n    background: var(--syntax-highlight-bg);\n  }\n\n  /* Selection on highlighted lines */\n  pre.diff-highlight\n    > code\n    .token.token.line-highlight:not(.prefix)::-moz-selection,\n  pre.diff-highlight\n    > code\n    .token.token.line-highlight:not(.prefix)\n    *::-moz-selection,\n  pre\n    > code.diff-highlight\n    .token.token.line-highlight:not(.prefix)::-moz-selection,\n  pre\n    > code.diff-highlight\n    .token.token.line-highlight:not(.prefix)\n    *::-moz-selection {\n    background-color: var(--syntax-highlight-selected-bg);\n  }\n\n  /* Selection on highlighted lines */\n  pre.diff-highlight > code .token.token.line-highlight:not(.prefix)::selection,\n  pre.diff-highlight\n    > code\n    .token.token.line-highlight:not(.prefix)\n    *::selection,\n  pre > code.diff-highlight .token.token.line-highlight:not(.prefix)::selection,\n  pre\n    > code.diff-highlight\n    .token.token.line-highlight:not(.prefix)\n    *::selection {\n    background-color: var(--syntax-highlight-selected-bg);\n  }\n\n  /* Hovering over a linkable line number (in the gutter area) */\n  /* Requires Line Numbers plugin as well */\n  pre[id].linkable-line-numbers.linkable-line-numbers\n    span.line-numbers-rows\n    > span:hover:before {\n    background-color: var(--syntax-cursor-line);\n  }\n\n  /* Line Numbers and Command Line plugins overrides */\n  /* Line separating gutter from coding area */\n  .line-numbers.line-numbers .line-numbers-rows,\n  .command-line .command-line-prompt {\n    border-right-color: var(--syntax-guide);\n  }\n\n  /* Stuff in the gutter */\n  .line-numbers .line-numbers-rows > span:before,\n  .command-line .command-line-prompt > span:before {\n    color: var(--syntax-gutter);\n  }\n\n  /* Match Braces plugin overrides */\n  /* Note: Outline colour is inherited from the braces */\n  .rainbow-braces .token.token.punctuation.brace-level-1,\n  .rainbow-braces .token.token.punctuation.brace-level-5,\n  .rainbow-braces .token.token.punctuation.brace-level-9 {\n    color: var(--hue-5);\n  }\n\n  .rainbow-braces .token.token.punctuation.brace-level-2,\n  .rainbow-braces .token.token.punctuation.brace-level-6,\n  .rainbow-braces .token.token.punctuation.brace-level-10 {\n    color: var(--hue-4);\n  }\n\n  .rainbow-braces .token.token.punctuation.brace-level-3,\n  .rainbow-braces .token.token.punctuation.brace-level-7,\n  .rainbow-braces .token.token.punctuation.brace-level-11 {\n    color: var(--hue-2);\n  }\n\n  .rainbow-braces .token.token.punctuation.brace-level-4,\n  .rainbow-braces .token.token.punctuation.brace-level-8,\n  .rainbow-braces .token.token.punctuation.brace-level-12 {\n    color: var(--hue-3);\n  }\n\n  /* Diff Highlight plugin overrides */\n  /* Taken from https://github.com/atom/github/blob/master/styles/variables.less */\n  pre.diff-highlight > code .token.token.deleted:not(.prefix),\n  pre > code.diff-highlight .token.token.deleted:not(.prefix) {\n    background-color: var(--syntax-deleted-bg);\n  }\n\n  pre.diff-highlight > code .token.token.deleted:not(.prefix)::-moz-selection,\n  pre.diff-highlight > code .token.token.deleted:not(.prefix) *::-moz-selection,\n  pre > code.diff-highlight .token.token.deleted:not(.prefix)::-moz-selection,\n  pre\n    > code.diff-highlight\n    .token.token.deleted:not(.prefix)\n    *::-moz-selection {\n    background-color: var(--syntax-deleted-selected-bg);\n  }\n\n  pre.diff-highlight > code .token.token.deleted:not(.prefix)::selection,\n  pre.diff-highlight > code .token.token.deleted:not(.prefix) *::selection,\n  pre > code.diff-highlight .token.token.deleted:not(.prefix)::selection,\n  pre > code.diff-highlight .token.token.deleted:not(.prefix) *::selection {\n    background-color: var(--syntax-deleted-selected-bg);\n  }\n\n  pre.diff-highlight > code .token.token.inserted:not(.prefix),\n  pre > code.diff-highlight .token.token.inserted:not(.prefix) {\n    background-color: var(--syntax-inserted-bg);\n  }\n\n  pre.diff-highlight > code .token.token.inserted:not(.prefix)::-moz-selection,\n  pre.diff-highlight\n    > code\n    .token.token.inserted:not(.prefix)\n    *::-moz-selection,\n  pre > code.diff-highlight .token.token.inserted:not(.prefix)::-moz-selection,\n  pre\n    > code.diff-highlight\n    .token.token.inserted:not(.prefix)\n    *::-moz-selection {\n    background-color: var(--syntax-inserted-selected-bg);\n  }\n\n  pre.diff-highlight > code .token.token.inserted:not(.prefix)::selection,\n  pre.diff-highlight > code .token.token.inserted:not(.prefix) *::selection,\n  pre > code.diff-highlight .token.token.inserted:not(.prefix)::selection,\n  pre > code.diff-highlight .token.token.inserted:not(.prefix) *::selection {\n    background-color: var(--syntax-inserted-selected-bg);\n  }\n\n  /* Previewers plugin overrides */\n  /* Based on https://github.com/atom-community/atom-ide-datatip/blob/master/styles/atom-ide-datatips.less and https://github.com/atom/atom/blob/master/packages/one-light-ui */\n  /* Border around popup */\n  .prism-previewer.prism-previewer:before,\n  .prism-previewer-gradient.prism-previewer-gradient div {\n    border-color: hsl(0, 0, 95%);\n  }\n\n  /* Angle and time should remain as circles and are hence not included */\n  .prism-previewer-color.prism-previewer-color:before,\n  .prism-previewer-gradient.prism-previewer-gradient div,\n  .prism-previewer-easing.prism-previewer-easing:before {\n    border-radius: 0.3em;\n  }\n\n  /* Triangles pointing to the code */\n  .prism-previewer.prism-previewer:after {\n    border-top-color: hsl(0, 0, 95%);\n  }\n\n  .prism-previewer-flipped.prism-previewer-flipped.after {\n    border-bottom-color: hsl(0, 0, 95%);\n  }\n\n  /* Background colour within the popup */\n  .prism-previewer-angle.prism-previewer-angle:before,\n  .prism-previewer-time.prism-previewer-time:before,\n  .prism-previewer-easing.prism-previewer-easing {\n    background: hsl(0, 0%, 100%);\n  }\n\n  /* For angle, this is the positive area (eg. 90deg will display one quadrant in this colour) */\n  /* For time, this is the alternate colour */\n  .prism-previewer-angle.prism-previewer-angle circle,\n  .prism-previewer-time.prism-previewer-time circle {\n    stroke: var(--mono-1);\n    stroke-opacity: 1;\n  }\n\n  /* Stroke colours of the handle, direction point, and vector itself */\n  .prism-previewer-easing.prism-previewer-easing circle,\n  .prism-previewer-easing.prism-previewer-easing path,\n  .prism-previewer-easing.prism-previewer-easing line {\n    stroke: var(--mono-1);\n  }\n\n  /* Fill colour of the handle */\n  .prism-previewer-easing.prism-previewer-easing circle {\n    fill: transparent;\n  }\n`;\n", "import { css } from \"lit\";\n\nexport const codeStyles = css`\n  [part~=\"pre\"],\n  [part~=\"code\"] {\n    background: hsl(230, 1%, 98%);\n    color: hsl(230, 8%, 24%);\n    line-height: 1.8;\n  }\n\n  [part~=\"pre\"] {\n    margin: 0;\n    /* This removes line wrapping */\n    word-break: break-all;\n    white-space: pre;\n    padding: 0;\n    height: 100%;\n  }\n\n  [part~=\"code\"] {\n    display: grid;\n    grid-template-columns: max-content minmax(max-content, 1fr);\n  }\n\n  :host([wrap=\"soft\"]) [part~=\"code\"] {\n    grid-template-columns: max-content minmax(auto, 1fr);\n  }\n\n  :host([wrap=\"soft\"]) [part~=\"pre\"],\n  :host([wrap=\"soft\"]) [part~=\"code\"] {\n    /* this creates line-wrapping. */\n    word-break: break-word;\n    white-space: pre-wrap;\n  }\n\n  :host([disable-line-numbers]) [part~=\"code\"] {\n    grid-template-columns: minmax(0, 1fr);\n  }\n\n  :host([wrap=\"soft\"][disable-line-numbers]) [part~=\"code\"] {\n    grid-template-columns: minmax(0, auto);\n  }\n\n  [part~=\"line\"] {\n    display: inline-block;\n    width: 100%;\n    padding-inline-start: 6px;\n    padding-inline-end: 6px;\n    min-height: 1lh;\n  }\n\n  [part~=\"line\"]::before {\n    content: \" \";\n    line-height: inherit;\n    padding-inline-end: 6px;\n  }\n\n  [part~=\"line\"]:not(.deleted, .inserted)::before {\n    user-select: none;\n    -webkit-user-select: none;\n  }\n\n  [part~=\"line\"].deleted::before {\n    content: \"-\";\n    padding-inline-start: 0px;\n  }\n\n  [part~=\"line\"].inserted::before {\n    content: \"+\";\n    padding-inline-start: 0px;\n  }\n\n  [part~=\"gutter-cell\"] {\n    display: inline-block;\n    padding-inline-end: 0.5em;\n    padding-inline-start: 0.75em;\n    user-select: none;\n    -webkit-user-select: none;\n    color: rgba(0, 0, 0, 0.35);\n    background-color: var(--syntax-bg);\n    font-variant-numeric: tabular-nums;\n    text-align: end;\n    position: sticky;\n    z-index: 1;\n    left: 0px;\n  }\n`;\n", "// A custom Prism highlight implementation specific for adding line numbers for the editor by\n// modifying the tokenizer.\n\nimport { Prism as PrismJS, Token } from \"prism-esm\";\n\n// HTML\n// import { loader as markdownLoader } from \"prism-esm/components/prism-markdown.js\"\nimport { loader as markupLoader } from \"prism-esm/components/prism-markup.js\";\nimport { loader as markupTemplatingLoader } from \"prism-esm/components/prism-markup-templating.js\";\n\n// CSS\nimport { loader as cssLoader } from \"prism-esm/components/prism-css.js\";\nimport { loader as cssExtrasLoader } from \"prism-esm/components/prism-css-extras.js\";\n\n// JS\nimport { loader as javascriptLoader } from \"prism-esm/components/prism-javascript.js\";\nimport { loader as javascriptExtrasLoader } from \"prism-esm/components/prism-js-extras.js\";\nimport { loader as javascriptTemplatesLoader } from \"prism-esm/components/prism-js-templates.js\";\n\n// JSX\nimport { loader as jsxLoader } from \"prism-esm/components/prism-jsx.js\";\n\n// TS\nimport { loader as tsLoader } from \"prism-esm/components/prism-typescript.js\";\n\n// TSX\nimport { loader as tsxLoader } from \"prism-esm/components/prism-tsx.js\";\n\n/**\n * @typedef {{ code: string, grammar: import(\"prism-esm\").Grammar, language: string } & { tokens: Array<string | Token>}} Env\n * @typedef {import(\"prism-esm\").HookCallback} HookCallback\n */\n\n/**\n * Custom hooks to run with our custom tokenizer.\n * @typedef {Object} Hooks\n * @property {Hook[]} [beforeTokenize]\n * @property {Hook[]} [afterTokenize]\n */\n\n/**\n * Custom hooks to run with our custom tokenizer.\n * @typedef {(env: Env) => void} Hook\n */\n\nexport function createPrismInstance() {\n  const prism = new PrismJS();\n  markupLoader(prism);\n  markupTemplatingLoader(prism);\n  cssLoader(prism);\n  cssExtrasLoader(prism);\n  javascriptLoader(prism);\n  javascriptExtrasLoader(prism);\n  javascriptTemplatesLoader(prism);\n  jsxLoader(prism);\n  tsLoader(prism);\n  tsxLoader(prism);\n  // markdownLoader(prism)\n  return prism;\n}\n\nclass PrismSingleton {\n  static get instance() {\n    if (!this.__singleton__) {\n      this.__singleton__ = createPrismInstance();\n    }\n\n    return this.__singleton__;\n  }\n}\n\n/**\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\n * @param {string} text - The code to highlight\n * @param {import(\"prism-esm\").Grammar} grammar - The grammar to use\n * @param {string} language - The language to detect\n * @param {typeof PrismSingleton[\"instance\"]} highlighter\n * @param {Hooks} hooks\n */\nexport function PrismHighlight(\n  text,\n  grammar,\n  language,\n  highlighter,\n  hooks = {},\n) {\n  const env = PrismEnv(text, grammar, language, highlighter, hooks);\n  return Token.stringify(\n    highlighter.util.encode(/** @type {Array<Token>} */ (env.tokens)),\n    env.language,\n    highlighter,\n  );\n}\n\n/**\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\n * @param {string} text - The code to highlight\n * @param {import(\"prism-esm\").Grammar} grammar - The grammar to use\n * @param {string} language - The language to detect\n * @param {typeof PrismSingleton[\"instance\"]} highlighter\n * @param {Hooks} hooks\n */\nexport function PrismEnv(text, grammar, language, highlighter, hooks = {}) {\n  if (!highlighter) {\n    highlighter = PrismSingleton.instance;\n  }\n\n  if (!grammar) {\n    grammar = highlighter.languages[\"markup\"];\n  }\n\n  /**\n   * @type {Env}\n   */\n  var env = {\n    code: text,\n    grammar: grammar,\n    language: language,\n    tokens: [],\n  };\n\n  highlighter.hooks.run(\"before-tokenize\", env);\n\n  hooks.beforeTokenize?.forEach((hook) => {\n    hook(env);\n  });\n\n  if (!env.grammar) {\n    throw new Error('The language \"' + env.language + '\" has no grammar.');\n  }\n\n  // New tokenizer wrapping every new line\n  env.tokens = /** @type {Array<Token>} */ (\n    highlighter.tokenize(env.code, env.grammar)\n  );\n\n  highlighter.hooks.run(\"after-tokenize\", env);\n\n  /** Make sure these run after the real after-tokenize for line number plugins. */\n  hooks.afterTokenize?.forEach((hook) => {\n    hook(env);\n  });\n\n  return env;\n}\n", "// @ts-check\n/**\n * @template {(...args: any[]) => any} T\n * @param {T} callback\n * @param {number} wait\n */\nexport function debounce(callback, wait = 0) {\n  /**\n   * @type {number | null}\n   */\n  let timeoutId = null;\n\n  /**\n   * @param {any[]} args\n   */\n  return (...args) => {\n    if (timeoutId) {\n      window.clearTimeout(timeoutId);\n    }\n\n    timeoutId = window.setTimeout(() => {\n      callback.apply(null, args);\n    }, wait);\n  };\n}\n", "import { LitElement } from \"lit\";\nimport { DefineableMixin } from \"web-component-define\";\n\n/**\n * @customElement\n */\nexport class BaseElement extends DefineableMixin(LitElement) {\n  /**\n   * @type {Record<string, typeof BaseElement>}\n   */\n  static dependencies = {};\n\n  constructor() {\n    super();\n    Object.entries(\n      /** @type {typeof BaseElement} */ (this.constructor).dependencies,\n    ).forEach(([name, ctor]) => {\n      ctor.define(name);\n    });\n  }\n}\n", "/**\n * @param {Element[]} elements\n */\nexport function elementsToString(...elements) {\n  const strings = [];\n\n  const scratch = document.createElement(\"div\");\n\n  for (const el of elements) {\n    if (el instanceof HTMLTemplateElement) {\n      const node = el.content.cloneNode(true);\n\n      scratch.append(node);\n      strings.push(scratch.innerHTML);\n      scratch.innerHTML = \"\";\n      continue;\n    }\n\n    if (el instanceof HTMLScriptElement) {\n      strings.push(el.textContent);\n      continue;\n    }\n\n    // We don't want this for preview, only for <light-editor>\n    if (el instanceof HTMLTextAreaElement) {\n      strings.push(el.value);\n      continue;\n    }\n\n    strings.push(el.innerHTML);\n  }\n\n  return strings.join(\"\\n\");\n}\n", "/**\n * This may be wrong, but we assume a `\\t` is equivalent to 2 spaces.\n */\nconst TAB_LENGTH = 2;\n\nconst INDENT_REGEXP = new RegExp(`(\\t| {${TAB_LENGTH}})`);\n\n/**\n * @param {TemplateStringsArray|string} templateStrings\n * @param {any[]} values\n * @returns {string}\n */\nexport function dedent(templateStrings, ...values) {\n  let matches = [];\n  let strings =\n    typeof templateStrings === \"string\"\n      ? [templateStrings]\n      : templateStrings.slice();\n\n  /**\n   * @param {string[]} strings\n   * @param {unknown[]} values\n   */\n  function interpolate(strings, values) {\n    let finalString = [];\n    finalString.push(strings[0]);\n\n    for (let i = 0; i < values.length; i++) {\n      finalString.push(values[i] + strings[i + 1]);\n    }\n\n    return finalString.join(\"\\n\").trim();\n  }\n\n  // 1. check if its dedentable.\n  let isDedentable = true;\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  for (let i = 0; i < strings.length; i++) {\n    let match;\n\n    // If any new line starts without any indentation and not an empty string, mark it as not dedentable, and then break the loop.\n    if (strings[i].match(/\\n[^\\f\\r\\n\\t ]/)) {\n      isDedentable = false;\n      break;\n    }\n\n    if (\n      (match = strings[i].match(new RegExp(`\\n${INDENT_REGEXP.source}+`, \"g\")))\n    ) {\n      matches.push(...match);\n    }\n  }\n\n  if (!isDedentable) {\n    return interpolate(strings, values);\n  }\n\n  // 3. Remove the common indentation from all strings.\n  if (matches.length) {\n    let size = Math.min(...matches.map((value) => value.length - 1));\n    let pattern = new RegExp(`\\n(\\t| ){${size}}`, \"g\");\n\n    for (let i = 0; i < strings.length; i++) {\n      strings[i] = strings[i].replaceAll(pattern, \"\\n\");\n    }\n  }\n\n  // 5. Perform interpolation.\n  return interpolate(strings, values);\n}\n", "// @ts-check\nimport { Token } from \"prism-esm\";\n\nconst newLineRegex = /\\r\\n|\\r|\\n/;\n\n/**\n * Options for the LineNumberPlugin. Currently nothing.\n * @typedef {object} Options\n * @property {boolean} [disableLineNumbers] - Toggle line numbers off.\n * @property {number} [lineNumberStart=1] - Where to start counting from. Default is 1.\n * @property {(ary: Array<string | Token>, index: number, tokens: Array<Token>) => void} [callback] - substitute your own callback for each line.\n */\n\n/**\n * @param {Options} [options={}]\n * @return {import('./prism-highlight.js').Hook}\n */\nexport function LineNumberPlugin(options = {}) {\n  const disableLineNumbers = options.disableLineNumbers ?? false;\n  const lineNumberStart = options.lineNumberStart ?? 1;\n\n  let callback = options.callback;\n\n  if (typeof callback !== \"function\") {\n    callback = (ary, index, tokens) => {\n      if (ary.length <= 0) {\n        return;\n      }\n\n      if (!options.disableLineNumbers) {\n        tokens.push(\n          new Token(\"light-gutter-cell\", (index + lineNumberStart).toString()),\n        );\n      }\n\n      tokens.push(new Token(\"light-line\", ary));\n    };\n  }\n\n  /**\n   * @type {import('./prism-highlight.js').Hook}\n   */\n  return function lineNumberPlugin(env) {\n    /**\n     * @type {Token[]}\n     */\n    const tokens = [];\n    splitLinesRec(env.tokens).forEach((ary, index) => {\n      callback(ary, index, tokens);\n    });\n\n    env.tokens = tokens;\n  };\n}\n\n/**\n * @param {Array<Token | string> | Token | string} content\n * @return {Array<Token | string>}\n */\nfunction wrapContent(content) {\n  return Array.isArray(content) ? content : [content];\n}\n\n/**\n * @param {Array<Token | string>} content\n * @return {Array<Token | string> | string}\n */\nfunction unwrapContent(content) {\n  if (content.length === 0) {\n    return \"\";\n  } else if (content.length === 1 && typeof content[0] === \"string\") {\n    return content[0];\n  }\n\n  return content;\n}\n\n/**\n * @param {Array<Token | string>} tokens\n * @return {Array<Array<Token | string>>}\n */\nfunction splitLinesRec(tokens) {\n  /** @type {Array<Token | string>} */\n  let currentLine = [];\n  /** @type {Array<Array<Token | string>>} */\n  const lines = [currentLine];\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (typeof token === \"string\") {\n      const split = token.split(newLineRegex);\n      for (let j = 0; j < split.length; j++) {\n        if (j > 0) {\n          lines.push((currentLine = []));\n        }\n\n        const token1 = split[j];\n        if (token1) {\n          currentLine.push(token1);\n        }\n      }\n    } else {\n      // @ts-expect-error\n      const split = splitLinesRec(wrapContent(token.content));\n\n      if (split.length > 1) {\n        for (let j = 0; j < split.length; j++) {\n          if (j > 0) {\n            lines.push((currentLine = []));\n          }\n\n          const line = split[j];\n          if (line.length) {\n            const token1 = new Token(\n              token.type,\n              unwrapContent(line),\n              token.alias,\n            );\n            token1.length = line.reduce((l, t) => l + t.length, 0);\n            currentLine.push(token1);\n          }\n        }\n      } else {\n        currentLine.push(token);\n      }\n    }\n  }\n\n  return lines;\n}\n", "/**\n * Used for constructing and manipulating ranges.\n * @example String Construction\n *\t\tnew Range()\n *\t\t\t\t\t.parse(\"{1-4, 6, 7}\")\n *\t\t\t\t\t.includes(4) // => true\n *\n * @example Manual Construction\n *    const range = new Range()\n *      range.ranges.push([0, 5])\n *      range.numbers.add(7)\n *\n */\nexport class NumberRange {\n  constructor() {\n    const reset = () => {\n      /**\n       * @type {Array<Error>}\n       */\n      this.errors = [];\n\n      /**\n       * Ranges is an array of tuples. [0] is min, [1] is max.\n       * @type {Array<[number, number]>}\n       */\n      this.ranges = [];\n\n      /**\n       * Possible single numbers\n       * @type {Set<number>}\n       */\n      this.numbers = new Set();\n    };\n    this.reset = reset;\n\n    this.reset();\n  }\n\n  /**\n   * Checks if the parsed range includes the value.\n   * @param {number} num\n   */\n  includes(num) {\n    if (this.numbers.has(num)) {\n      return true;\n    }\n\n    if (this.ranges.length == 0) {\n      return false;\n    }\n\n    for (const range of this.ranges) {\n      const [min, max] = range;\n\n      if (num >= min && num <= max) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Given a string like this: \"{1-3, 4, 5}\" create a Range. Also accepts an array of numbers or a Set of numbers.\n   * @param {Set<number> | Array<number> | string} str\n   */\n  parse(str) {\n    this.reset();\n\n    if (Array.isArray(str)) {\n      str.forEach((num) => this.numbers.add(num));\n      return this;\n    }\n\n    if (str instanceof Set) {\n      this.numbers = str;\n      return this;\n    }\n\n    if (!str.includes(\"{\")) {\n      this.errors.push(new Error(\"Unable to parse range. No `{` found.\"));\n      return this;\n    }\n\n    if (!str.includes(\"}\")) {\n      this.errors.push(new Error(\"Unable to parse range. No `}` found.\"));\n      return this;\n    }\n\n    str = str.split(/{/)[1];\n\n    if (!str) {\n      this.errors.push(new Error(\"Invalid string provided for range.\"));\n      return this;\n    }\n\n    str = str.split(/}/)[0];\n\n    str.split(/,\\s*/).forEach((val) => {\n      // Turn them all into tuples.\n      const [minStr, maxStr] = val.split(/-/);\n\n      const min = Number(minStr);\n      const max = Number(maxStr);\n\n      if (min == null || isNaN(min)) return;\n\n      // We were only given a line number.\n      if (max == null || isNaN(max)) {\n        this.numbers.add(min);\n        return;\n      }\n\n      this.ranges.push([min, max]);\n    });\n\n    return this;\n  }\n}\n", "/**\n * @typedef {object} lineHighlightOptions\n * @property {import(\"./number-range.js\").NumberRange} highlightLinesRange\n * @property {import(\"./number-range.js\").NumberRange} insertedLinesRange\n * @property {import(\"./number-range.js\").NumberRange} deletedLinesRange\n */\n\n/**\n * @param {lineHighlightOptions} options\n */\nexport function LineHighlightPlugin(options) {\n  const { highlightLinesRange, insertedLinesRange, deletedLinesRange } =\n    options;\n  /**\n   * @param {import(\"./prism-highlight.js\").Env} env\n   */\n  return function (env) {\n    // -1 for 0-index.\n    let index = 1;\n    for (const token of env.tokens) {\n      if (typeof token === \"string\") continue;\n\n      if (highlightLinesRange.includes(index)) {\n        // line-highlight is what prism themes expect.\n        token.type += \" line-highlight\";\n      }\n\n      if (insertedLinesRange.includes(index)) {\n        token.type += \" inserted\";\n      }\n\n      if (deletedLinesRange.includes(index)) {\n        token.type += \" deleted\";\n      }\n\n      // Tokens can only ever be \"light-line\" or \"light-gutter-cell\" so we just increment on \"light-line\"\n      if (token.type.includes(\"light-line\")) {\n        index++;\n      }\n    }\n  };\n}\n\n/**\n * @typedef {object} WrapEnv\n * @property {string} type\n * @property {string} content\n * @property {Array<string>} classes\n * @property {Record<string, string>} attributes\n * @property {string} language\n */\n\n/**\n * @example\n *   prism.hooks.add(\"wrap\", LineHighlightWrapPlugin)\n */\nexport function LineHighlightWrapPlugin() {\n  const partTypes = [\"inserted\", \"line-highlight\", \"deleted\"];\n\n  /**\n   * @param {{ type: string, attributes: Record<string, string> }} token\n   * @param {string} tokenName - Name of token to find\n   * @param {string} partName - Name of part to add\n   */\n  function addParts(token, tokenName, partName) {\n    if (token.type.includes(tokenName)) {\n      token.attributes[\"part\"] = partName;\n\n      partTypes.forEach((type) => {\n        if (!token.type.includes(type)) return;\n        if (type === \"line-highlight\") type = \"highlight\";\n\n        token.attributes[\"part\"] += ` ${partName}-${type}`;\n      });\n    }\n  }\n  /**\n   * @param {WrapEnv} env\n   */\n  return function (env) {\n    addParts(env, \"light-line\", \"line\");\n    addParts(env, \"light-gutter-cell\", \"gutter-cell\");\n    addParts(env, \"light-marker\", \"marker\");\n  };\n}\n", "// @ts-check\nimport { css, html } from \"lit\";\nimport { when } from \"lit/directives/when.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\n\nimport { baseStyles } from \"../../styles/base-styles.js\";\nimport { theme } from \"../../styles/default-theme.styles.js\";\nimport { codeStyles } from \"../../styles/code-styles.js\";\n\nimport {\n  PrismHighlight,\n  createPrismInstance,\n} from \"../../../internal/prism-highlight.js\";\nimport { debounce } from \"../../../internal/debounce.js\";\nimport { BaseElement } from \"../../../internal/base-element.js\";\nimport { elementsToString } from \"../../../internal/elements-to-strings.js\";\nimport { dedent } from \"../../../internal/dedent.js\";\nimport { LineNumberPlugin } from \"../../../internal/line-number-plugin.js\";\nimport { NumberRange } from \"../../../internal/number-range.js\";\nimport {\n  LineHighlightPlugin,\n  LineHighlightWrapPlugin,\n} from \"../../../internal/line-highlight-plugin.js\";\n\n/**\n * LightCode is a minimal wrapper around Prism for displaying code highlighting\n *\n * @customElement\n * @tagname light-code\n *\n * @csspart base - The base wrapping element\n * @csspart pre - The <pre> element wrapping the source code\n * @csspart code - The <code>  element wrapping the source code\n * @csspart gutter - The gutter for line numbers. This is only for the overlay for when the lines dont correspond to size of the code.\n * @csspart gutter-cell - The element that holds line numbers.\n\n * @slot default - The code to use for highlighting\n */\nexport default class LightCode extends BaseElement {\n  /**\n   * @override\n   */\n  static baseName = \"light-code\";\n\n  /**\n   * @override\n   */\n  static styles = [\n    baseStyles,\n    codeStyles,\n    theme,\n    css`\n      :host {\n        display: grid;\n      }\n      [part~=\"base\"] {\n        height: 100%;\n        position: relative;\n        z-index: 0;\n        background: hsl(230, 1%, 98%);\n        color: hsl(230, 8%, 24%);\n        display: grid;\n      }\n\n      [part~=\"pre\"] {\n        height: 100%;\n        display: grid;\n        place-items: start;\n      }\n\n      [part~=\"code\"] {\n        width: 100%;\n        height: 100%;\n        place-content: start;\n        overflow: auto;\n      }\n\n      [part~=\"gutter\"] {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: calc(var(--gutter-cell-width, 40px));\n        border-inline-end: var(--syntax-gutter-border);\n        height: calc(100% - var(--scrollbar-height, 0px));\n        max-height: 100%;\n        overflow: hidden;\n        pointer-events: none;\n        z-index: 2;\n      }\n    `,\n  ];\n\n  /**\n   * @override\n   */\n  static properties = {\n    disableHighlight: { type: Boolean, attribute: \"disable-highlight\" },\n    preserveWhitespace: { type: Boolean, attribute: \"preserve-whitespace\" },\n    highlightLines: { attribute: \"highlight-lines\" },\n    insertedLines: { attribute: \"inserted-lines\" },\n    deletedLines: { attribute: \"deleted-lines\" },\n    disableLineNumbers: {\n      type: Boolean,\n      reflect: true,\n      attribute: \"disable-line-numbers\",\n    },\n    lineNumberStart: { type: Number, attribute: \"line-number-start\" },\n    wrap: { reflect: true, attribute: \"wrap\" },\n    language: {},\n    code: {},\n    highlighter: { attribute: false, state: true },\n    __highlightedCode__: { attribute: false, state: true },\n  };\n\n  constructor() {\n    super();\n\n    /**\n     * The language to highlight for.\n     * @type {string}\n     */\n    this.language = \"html\";\n\n    /**\n     * If disabled, its on you to provide `<pre><code></code></pre>`\n     * @type {boolean}\n     */\n    this.disableHighlight = false;\n\n    /**\n     * We will take the code, wrap it in `<pre><code></code></pre>` and run it through\n     * PrismJS.\n     * If the element has `disableHighlight`, we will not touch their code. Instead they must pass in escapedHTML.\n     * @type {string}\n     */\n    this.code = \"\";\n\n    /**\n     * @internal\n     * @type {MutationObserverInit}\n     */\n    this.__mutationObserverConfig = {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    };\n\n    /**\n     * @internal\n     * @type {() => void}\n     */\n    this.codeDebounce = debounce(() => this.handleMutation(\"code\"), 20);\n\n    /**\n     * @property\n     * @type {\"soft\" | \"hard\"}\n     * If `wrap=\"soft\"`, lines will wrap when they reach the edge of their container. If `wrap=\"hard\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\n     */\n    this.wrap = \"hard\";\n\n    /**\n     * @property\n     * @type {Boolean}\n     * Whether or not to preserve white spaces from templates and attempt to dedent and chomp new lines.\n     */\n    this.preserveWhitespace = false;\n\n    /**\n     * @type {string} - A string of possible lines to highlight. Example: \"{1-9, 16, 18}\"\n     */\n    this.highlightLines = \"\";\n\n    /**\n     * @type {string} - A string of lines that are inserted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.insertedLines = \"\";\n\n    /**\n     * @type {string} - A string of lines that are deleted for diffs. Example: \"{1-9, 16, 18}\"\n     */\n    this.deletedLines = \"\";\n\n    /**\n     * @type {boolean} whether or not to disable line numbers\n     */\n    this.disableLineNumbers = false;\n\n    /**\n     * Where to start counting from indexes. Note, this is only for display purposes in the gutter.\n     * @type {number}\n     */\n    this.lineNumberStart = 1;\n\n    /**\n     * Highlighter to use for highlighting code. Default is Prism.\n     */\n    this.highlighter = createPrismInstance();\n\n    this.__resizeObserver = new ResizeObserver(() =>\n      this.__setGutterMeasurements(),\n    );\n\n    this.newLineRegex = /\\r\\n|\\r|\\n/;\n    this.__highlightedCode__ = \"\";\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__resizeObserver.observe(this);\n  }\n\n  /**\n   * @override\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__resizeObserver.unobserve(this);\n  }\n\n  /**\n   * @override\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate(changedProperties) {\n    if (\n      changedProperties.has(\"highlighter\") ||\n      changedProperties.has(\"language\") ||\n      changedProperties.has(\"code\")\n      // We purposely don't re-highlight on line number changes for performance reasons.\n    ) {\n      this.__highlightedCode__ = this.highlight(this.code);\n    }\n\n    super.willUpdate(changedProperties);\n  }\n\n  /**\n   * @override\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  updated(changedProperties) {\n    if (\n      (changedProperties.has(\"insertedLines\") ||\n        changedProperties.has(\"deletedLines\") ||\n        changedProperties.has(\"highlightLines\")) &&\n      !changedProperties.has(\"code\")\n    ) {\n      const lines = this.shadowRoot?.querySelectorAll(\n        \".light-gutter-cell, .light-line\",\n      );\n\n      if (lines?.length) {\n        const highlightLinesRange = new NumberRange().parse(\n          this.highlightLines,\n        );\n        const insertedLinesRange = new NumberRange().parse(this.insertedLines);\n        const deletedLinesRange = new NumberRange().parse(this.deletedLines);\n\n        lines.forEach((el, index) => {\n          // We have twice as many lines as line numbers.\n          const divisor = index % 2 === 0 ? index : index - 1;\n          const lineNumber = divisor / 2 + 1;\n\n          el.classList.toggle(\n            \"line-highlight\",\n            highlightLinesRange.includes(lineNumber),\n          );\n          el.part.toggle(\n            \"line-highlight\",\n            highlightLinesRange.includes(lineNumber),\n          );\n\n          el.classList.toggle(\n            \"inserted\",\n            insertedLinesRange.includes(lineNumber),\n          );\n          el.part.toggle(\"inserted\", insertedLinesRange.includes(lineNumber));\n\n          el.classList.toggle(\n            \"deleted\",\n            deletedLinesRange.includes(lineNumber),\n          );\n          el.part.toggle(\"deleted\", deletedLinesRange.includes(lineNumber));\n        });\n      }\n    }\n\n    super.updated(changedProperties);\n  }\n\n  /**\n   * @internal\n   * @param {\"preview-code\" | \"code\"} variable\n   */\n  handleMutation(variable) {\n    if (variable === \"code\") {\n      this.handleTemplate({ target: this.findSlot(\"code\") });\n      return;\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} name\n   * @returns {HTMLSlotElement | null | undefined}\n   */\n  findSlot(name) {\n    return this.shadowRoot?.querySelector(`slot[name='${name}']`);\n  }\n\n  /**\n   * @internal\n   * @param {Event | { target?: undefined | null | HTMLSlotElement }} e\n   */\n  handleTemplate(e) {\n    /**\n     * @type {HTMLSlotElement | null | undefined}\n     */\n    // @ts-expect-error\n    const slot = e.target;\n\n    if (slot == null) return;\n\n    const name = slot.getAttribute(\"name\");\n\n    if ([\"preview-code\", \"code\"].includes(name || \"\") === false) return;\n\n    let elements = slot.assignedElements({ flatten: true });\n\n    let code = this.unescapeTags(elementsToString(...elements));\n\n    if (!this.preserveWhitespace) {\n      code = dedent(code.trim());\n    }\n\n    if (name === \"code\") {\n      this.code = code;\n      return;\n    }\n  }\n\n  /**\n   * Only used to unescape things like `&lt;/script>` from slotted content.\n   * @internal\n   * @param {string} text\n   */\n  unescapeTags(text) {\n    // Replace usages of `&lt;/script>` with `</script>`. Match against\n    // `&lt;/` so that other usages of &lt; aren't replaced.\n    return text.replaceAll(/&lt;\\/([\\w\\d\\.-_]+)>/g, \"</$1>\");\n  }\n\n  /**\n   * @public\n   * Override this function to use your own highlight function\n   */\n  highlight(code = this.code) {\n    // const newLineRegex = /\\r\\n|\\r|\\n/\n    // const CELL_START = `<span class=\"token light-gutter-cell\" part=\"gutter-cell\">`\n    // const LINE_START = `</span><span class=\"token light-line\" part=\"line\">`\n    // const LINE_END = `</span>`\n\n    // const ESCAPE_STRING_HASH = {\n    //   \"&\": \"&amp;\",\n    //   \"<\": \"&lt;\",\n    //   \">\": \"&gt;\",\n    //   '\"': \"&quot;\",\n    //   \"'\": \"&#x27;\"\n    // }\n\n    // const escapeString = (str) => {\n    //   return str\n    //     .replaceAll(/&/g, \"&amp;\")\n    //     .replaceAll(/[<>\"']/g, (match) => ESCAPE_STRING_HASH[match])\n    // }\n\n    // code = code.split(newLineRegex).map((line, index) => {\n    //   return CELL_START + (index + 1) + LINE_START + escapeString(line) + LINE_END\n    // }).join(\"\\n\")\n\n    code = code\n      .split(this.newLineRegex)\n      .map((str) => {\n        if (str === \"\") {\n          return \" \";\n        }\n\n        return str;\n      })\n      .join(\"\\n\");\n\n    if (!this.highlighter) {\n      this.highlighter = createPrismInstance();\n    }\n    const afterTokenizePlugins = [\n      LineNumberPlugin({\n        lineNumberStart: this.lineNumberStart,\n        disableLineNumbers: this.disableLineNumbers,\n      }),\n      LineHighlightPlugin({\n        insertedLinesRange: new NumberRange().parse(this.insertedLines),\n        deletedLinesRange: new NumberRange().parse(this.deletedLines),\n        highlightLinesRange: new NumberRange().parse(this.highlightLines),\n      }),\n    ];\n\n    this.highlighter.hooks.add(\n      \"wrap\",\n      /** @type {any} */ (LineHighlightWrapPlugin()),\n    );\n\n    code = PrismHighlight(\n      code,\n      this.highlighter.languages[this.language],\n      this.language,\n      this.highlighter,\n      {\n        afterTokenize: afterTokenizePlugins,\n      },\n    );\n\n    return code;\n  }\n\n  /**\n   * @internal\n   */\n  __setGutterMeasurements() {\n    const gutterWidth = /** @type {null | undefined | HTMLElement} */ (\n      this.shadowRoot?.querySelector(\"[part~='gutter-cell']\")\n    )?.offsetWidth;\n\n    if (gutterWidth) {\n      this.style.setProperty(\"--gutter-cell-width\", `${gutterWidth}px`);\n    }\n\n    const codeEl = this.shadowRoot?.querySelector(\"[part~='code']\");\n\n    if (codeEl) {\n      const { offsetHeight, clientHeight } = /** @type {HTMLElement} */ (\n        codeEl\n      );\n      const scrollbarHeight = offsetHeight - clientHeight;\n      this.style.setProperty(\"--scrollbar-height\", `${scrollbarHeight}px`);\n    }\n  }\n\n  /**\n   * @override\n   */\n  render() {\n    const language = this.language;\n\n    const finalHTML = html`\n      <div part=\"base\">\n        ${when(\n          !this.disableHighlight,\n          () =>\n            html` <pre\n              id=\"pre-${language}\"\n              data-code-lang=${language}\n              aria-hidden=\"true\"\n              part=\"pre pre-${language}\"\n              class=\"diff-highlight language-${language}\"\n            ><code\n                tabindex=\"0\"\n                aria-labelledby=\"source-code-label\"\n                role=\"region\"\n                part=\"code code-${language}\"\n                class=\"language-${language}\"\n                .innerHTML=${this.__highlightedCode__}\n              ></code></pre>`,\n          () => html`${unsafeHTML(this.code)}`,\n        )}\n        <!-- This gutter is for showing when line numbers may not correspond to existing lines. -->\n        ${when(\n          this.disableLineNumbers,\n          () => html``,\n          () => html`<div part=\"gutter\"></div>`,\n        )}\n      </div>\n\n      <div hidden>\n        <slot name=\"code\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n    `;\n\n    setTimeout(async () => {\n      await this.updateComplete;\n      setTimeout(() => this.__setGutterMeasurements());\n    });\n\n    return finalHTML;\n  }\n}\n"],
  "mappings": "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",
  "names": ["baseStyles", "i", "buttonStyles", "theme", "i", "codeStyles", "i", "createPrismInstance", "prism", "Prism", "loader", "PrismSingleton", "PrismHighlight", "text", "grammar", "language", "highlighter", "hooks", "env", "PrismEnv", "Token", "hook", "debounce", "callback", "wait", "timeoutId", "args", "BaseElement", "DefineableMixin", "i", "name", "ctor", "__publicField", "elementsToString", "elements", "strings", "scratch", "el", "node", "INDENT_REGEXP", "dedent", "templateStrings", "values", "matches", "strings", "interpolate", "finalString", "i", "isDedentable", "match", "size", "value", "pattern", "newLineRegex", "LineNumberPlugin", "options", "disableLineNumbers", "lineNumberStart", "callback", "ary", "index", "tokens", "Token", "env", "splitLinesRec", "wrapContent", "content", "unwrapContent", "currentLine", "lines", "i", "token", "split", "j", "token1", "line", "l", "t", "NumberRange", "reset", "num", "range", "min", "max", "str", "val", "minStr", "maxStr", "LineHighlightPlugin", "options", "highlightLinesRange", "insertedLinesRange", "deletedLinesRange", "env", "index", "token", "LineHighlightWrapPlugin", "partTypes", "addParts", "tokenName", "partName", "type", "LightCode", "BaseElement", "debounce", "createPrismInstance", "changedProperties", "lines", "highlightLinesRange", "NumberRange", "insertedLinesRange", "deletedLinesRange", "el", "index", "lineNumber", "variable", "name", "slot", "elements", "code", "elementsToString", "dedent", "text", "str", "afterTokenizePlugins", "LineNumberPlugin", "LineHighlightPlugin", "LineHighlightWrapPlugin", "PrismHighlight", "gutterWidth", "codeEl", "offsetHeight", "clientHeight", "scrollbarHeight", "language", "finalHTML", "x", "n", "o", "__publicField", "baseStyles", "codeStyles", "theme", "i"]
}
