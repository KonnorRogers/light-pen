{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directive-helpers.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/async-directive.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directives/ref.ts", "../../../../../exports/light-editor.styles.js", "../../../../../internal/base-event.js", "../../../../../exports/events/light-resize-event.js", "../../../../../exports/light-editor.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback: WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n> = new WeakMap();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "import { css } from \"lit\"\n\nexport const styles = css`\n  [part~=\"base\"] {\n    display:grid;\n    grid-template-columns: minmax(0, 1fr);\n    grid-template-rows: minmax(0, 1fr);\n    column-gap: 0;\n    row-gap: 0;\n    position: relative;\n    padding-top: 3px;\n  }\n\n  [part~=\"textarea\"] {\n    position: relative;\n    color: transparent;\n    background-color: transparent;\n    caret-color: black;\n    z-index: 1;\n    resize: vertical;\n  }\n\n  [part~=\"pre\"],\n  [part~=\"textarea\"] {\n    grid-area:1/1/2/2;\n    margin-bottom:0;\n    min-height:15em;\n    margin: 0;\n    padding: 0;\n\t  display: block;\n\t  line-height: 1.5;\n    padding: 8px;\n    border: none;\n    overflow: auto;\n    position: relative;\n\n    /* this creates line-wrapping. */\n\t  word-break: break-word;\n    white-space: pre-wrap;\n\n    /* No wrapping */\n\t  /* word-break: break-all; */\n    /* white-space: pre; */\n    tab-size: 2;\n  }\n\n  [part~=\"pre\"],\n  [part~=\"code\"] {\n\t  color: #272727;\n\t  background-color: #f7f7f7;\n  }\n\n  [part~=\"pre\"] {\n    height: var(--textarea-height, auto);\n    max-height: var(--textarea-height, auto);\n    width: var(--textarea-width, auto);\n    max-width: var(--textarea-width, auto);\n  }\n\n  [part~=\"pre\"],\n  [part~=\"code\"],\n  [part~=\"textarea\"] {\n\t  font-family: Menlo, Monaco, \"Courier New\", monospace;\n\t  font-size: 0.875rem;\n  }\n\n  [part~=\"textarea\"]::selection {\n    color: inherit;\n    background-color: rgba(0,0,0,0.15);\n  }\n`\n", "export class BaseEvent extends Event {\n  /**\n   * @param {string} name\n   * @param {EventInit} [options={}]\n   */\n  constructor (name, options = {}) {\n    if (options.bubbles == null) options.bubbles = true\n    if (options.composed == null) options.composed = true\n    super(name, options)\n  }\n}\n", "// @ts-check\nimport { BaseEvent } from \"../../internal/base-event.js\"\n\nexport class LightResizeEvent extends BaseEvent {\n  /**\n   * @param {\"light-resize\" | Omit<string, \"light-resize\"> & string} [name=\"light-resize\"]\n   * @param {Partial<EventInit & { height: number, width: number }>} [options={}]\n   */\n  constructor (name = \"light-resize\", options = {}) {\n    super(name, options)\n\n    this.height = options.height\n    this.width = options.width\n  }\n}\n\n", "import { html } from \"lit\";\nimport HighlightJS from 'highlight.js/lib/core';\nimport JavaScript from 'highlight.js/lib/languages/javascript';\nimport HTML from 'highlight.js/lib/languages/xml';\nimport CSS from 'highlight.js/lib/languages/css';\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ref } from \"lit/directives/ref.js\";\n\nimport { BaseElement } from \"../internal/base-element.js\";\nimport { baseStyles } from \"./base-styles.js\";\nimport { styles } from \"./light-editor.styles.js\";\nimport { theme } from \"./default-theme.styles.js\";\nimport { LightResizeEvent } from \"./events/light-resize-event.js\"\n\nHighlightJS.registerLanguage('javascript', JavaScript);\nHighlightJS.registerLanguage('xml', HTML);\nHighlightJS.registerLanguage('css', CSS);\n\n/**\n * A bare bones plain text editor with syntax highlighting.\n * @customElement\n * @tagname light-editor\n *\n * @event {Event} light-change - Re-emits the textarea's \"change\" event\n * @event {Event} light-selectionchange - Re-emits the textarea's \"selectionchange\" event\n * @event {Event} light-input - Re-emits the textarea's \"input\" event\n *\n */\nexport default class LightEditor extends BaseElement {\n  static baseName = \"light-editor\"\n\n  static styles = [\n    baseStyles,\n    styles,\n    theme,\n  ]\n\n  // One day.\n  // static formAssociated = true\n\n  static properties = {\n    label: {},\n    value: {},\n    language: {reflect: true}\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * @type {string}\n     */\n    this.language = 'xml'\n\n    /**\n     * @type {string}\n     */\n    this.value = ''\n\n    /**\n     * @type {null | HTMLTextAreaElement}\n     */\n    this.textarea = null\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleTextAreaResize (entries) {\n    const { target } = entries[0]\n    const {\n      left, right,\n      top, bottom\n    } = entries[0].contentRect;\n    const width = left + right\n    const height = top + bottom\n\n    // @ts-expect-error\n    target.parentElement.style.setProperty(\"--textarea-height\", `${height}px`)\n\n\n    /**\n     * Fires whenever the editor resizes\n     */\n    this.dispatchEvent(new LightResizeEvent(\"light-resize\", {height, width}))\n    // One day we'll allow the textarea to resize the width.\n    // target.parentElement.style.setProperty(\"--textarea-width\", `${width}px`)\n  }\n\n  render () {\n    const language = this.language\n\n    const highlightedCode = this.value ? unsafeHTML(this.highlightCode({ code: this.value, language })) : \"\"\n\n    return html`\n\t\t\t<div class=\"base\" part=\"base\">\n        <!-- This is where the fancy syntax highlighting comes in -->\n\t\t\t\t<pre\n          id=\"pre-${language}\"\n          data-code-lang=${language}\n          aria-hidden=\"true\"\n          part=\"pre pre-${language}\"\n        ><code\n            part=\"code code-${language}\"\n            class=\"language-${language}\"\n          >${highlightedCode}</code></pre>\n        <!-- IMPORTANT! There must be no white-space above. -->\n\t\t\t\t<textarea\n          id=\"textarea-${language}\"\n          data-code-lang=${language}\n          part=\"textarea textarea-${language}\"\n          spellcheck=\"false\"\n          autocorrect=\"off\"\n          autocapitalize=\"off\"\n          translate=\"no\"\n          ${ref(this.textareaChanged)}\n          @keydown=${this.keydownHandler}\n          @selectionchange=${/** @param {Event} e */ (e) => {\n            this.dispatchEvent(new Event(\"light-selectionchange\", { bubbles: true, composed: true }))\n          }}\n          @input=${/** @param {Event} e */ (e) => {\n            this.syncScroll(e)\n            this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n            this.dispatchEvent(new Event(\"light-input\", { bubbles: true, composed: true }))\n          }}\n          @change=${/** @param {Event} e */ (e) => {\n            this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n            this.dispatchEvent(new Event(\"light-change\", { bubbles: true, composed: true }))\n          }}\n          @scroll=${this.syncScroll}\n          .value=${this.value}\n        >${this.value}</textarea>\n\t\t\t</div>\n\n      <slot hidden></slot>\n\t\t`\n  }\n\n  /**\n   * @param {Element | undefined} element\n   */\n  textareaChanged (element) {\n    if (!(element instanceof HTMLTextAreaElement)) {\n      return\n    }\n\n    const textarea = element\n\n    this.textareaResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    this.textareaResizeObserver.observe(textarea)\n\n    this.textareaMutationObserver = new MutationObserver((mutationRecords) => {\n      // We actually don't care about what the mutation is, just update and move on.\n      // for (const mutation of mutationRecords) {\n      // }\n      this.value = textarea.value\n    })\n\n    this.textareaMutationObserver.observe(textarea, {\n      characterData: true,\n      subtree: true\n    })\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleSlotChangeEvent (e) {\n    const target = /** @type {HTMLSlotElement} */ (e.target)\n\n    this.currentWatchedElements = target.assignedElements({ flatten: true })\n    // @TODO: Attach mutations observers to update value.\n  }\n\n  /**\n   * @internal\n   * @param {Event} e\n   */\n  syncScroll (e) {\n    /**\n     * @type {null | HTMLTextAreaElement}\n     */\n    // @ts-expect-error\n    const textarea = e.target\n\n    if (textarea == null) return\n\n    const pre = this.shadowRoot?.querySelector(`pre`)\n\n    if (pre == null) return\n\n    pre.scrollTop = textarea.scrollTop;\n    pre.scrollLeft = textarea.scrollLeft;\n  }\n\n  disconnectedCallback () {\n    this.textareaResizeObserver?.disconnect()\n    this.textareaMutationObserver?.disconnect()\n    super.disconnectedCallback()\n  }\n\n  /**\n   * @param {KeyboardEvent} evt\n   */\n  keydownHandler(evt) {\n    /**\n     * @type {HTMLTextAreaElement}\n     */\n    // @ts-expect-error\n    const target = evt.target\n\n    if ('Tab' === evt.key) {\n      evt.preventDefault()\n      target.setRangeText('\\t', target.selectionStart, target.selectionEnd, 'end')\n      this.value = target.value\n      return\n    }\n  }\n\n  /**\n   * Override this to use a highlighter of your choice.\n   * @param {{code: string, language: string}} options\n   */\n  highlightCode (options) {\n    let { code, language } = options\n\n    code = this.unescapeCharacters(code)\n    // Dedent is nice, but we don't want to do it on user type data.\n    // code = dedent(code)\n    code = this.injectNewLine(code)\n\n    return HighlightJS.highlight(code, {language}).value\n  }\n\n  /**\n   * @param {string} text\n   */\n  unescapeCharacters (text) {\n    // Update code\n    return text.replaceAll(\"&lt;/script>\", \"</script>\")\n  }\n\n  /**\n   * Highlighters strip newlines. But you can see new lines in <textarea>, this fixes that.\n   * @param {string} text\n   */\n  injectNewLine (text) {\n    // Handle final newlines (see article)\n    if(text[text.length-1] == \"\\n\") { // If the last character is a newline character\n      text += \"\\n\"; // Add a placeholder space character to the final line\n    }\n\n    return text\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["_ChildPart", "ChildPart", "_$LH", "isSingleExpression", "part", "strings", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "_b", "_a", "o", "e", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_c", "_$notifyConnectionChanged", "_d", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "_$initialize", "part", "attributeIndex", "super", "_$isConnected", "_$AO", "isClearingDirective", "r", "reconnected", "call", "disconnected", "setValue", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "render", "_ref", "nothing", "update", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "_a", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "t", "_b", "_c", "disconnected", "reconnected", "styles", "i", "BaseEvent", "name", "options", "LightResizeEvent", "BaseEvent", "name", "options", "core_default", "javascript", "xml", "css", "LightEditor", "BaseElement", "entries", "target", "left", "right", "top", "bottom", "width", "height", "LightResizeEvent", "language", "highlightedCode", "o", "x", "n", "e", "element", "textarea", "mutationRecords", "pre", "evt", "options", "code", "text", "__publicField", "baseStyles", "styles", "theme"]
}
