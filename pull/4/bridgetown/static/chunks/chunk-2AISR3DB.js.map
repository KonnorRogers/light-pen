{
  "version": 3,
  "sources": ["../../../../../exports/light-pen.styles.js", "../../../../../exports/light-pen.js"],
  "sourcesContent": ["import { css } from \"lit\"\nexport const styles = css`\n[part~=\"sandbox-iframe\"] {\n  width: 100%;\n  height: 100%;\n  border: 1px solid darkgray;\n}\n\n[part~=\"sandbox\"] {\n  color:#272727;\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-template-rows: minmax(0, auto) minmax(0, 1fr);\n}\n\n[part~=\"summary\"] {\n  font-size: .8125rem;\n  font-weight: bold;\n  padding: 0.4rem 0.6rem;\n}\n\n[part~=\"summary\"]:focus {\n  outline: 2px solid blue;\n}\n\n[part~=\"sandbox-editor\"] {\n  max-height: var(--textarea-height, 33vh);\n}\n\n[part~=\"base\"] {\n\tword-wrap: break-word;\n\tcolor: inherit;\n\tfont-size: 1em;\n}\n\n[part~=\"details\"]:not(:first-child) {\n  margin-top: 6px;\n}\n\n[part~=\"sandbox\"],\n[part~=\"base\"] {\n  height: 100%;\n}\n\n[part~=\"sandbox-iframe\"] {\n  aspect-ratio:auto;\n  background-color: #fff;\n  margin-bottom: 0;\n}\n\n[part~=\"base\"],\n[part~=\"pre\"],\n[part~=\"code\"],\n[part~=\"sandbox-iframe\"] {\n  border-radius:.25em;\n}\n\n[part~='sandbox-header'],\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-console-result\"] {\n  background-color:#343d4d;\n  color: #fff;\n}\n\n[part~=\"sandbox-header\"] {\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 0.8125em;\n  border-top-right-radius: 0.25rem;\n  border-top-left-radius: 0.25rem;\n}\n\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-content\"] {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n  background-color: #e5e5e5;\n}\n\n\n[part~='sandbox-controls'] button {\n  margin-bottom: 0;\n}\n\n[part~=\"sandbox-console-log\"] {\n  font-family: Menlo,Monaco,\"Courier New\",monospace;\n  font-size: 0.875em;\n  min-height: 1.2em;\n}\n\n.log-warn {\n  color:#f9d767\n}\n\n.log-error {\n  color:#f9c8c8\n}\n\n[part~=\"sandbox-header\"],\n[part~=\"sandbox-code\"],\n[part~=\"sandbox-iframe-wrapper\"],\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-console-result\"] {\n  padding: 0.5em;\n}\n\n[part~=\"sandbox-code\"] {\n  max-height: 100%;\n  overflow-y: auto;\n}\n\nbutton:where([part~=\"panel-resizer\"]) {\n  height: calc(100% - 0.5em);\n  cursor: col-resize;\n  background-color: white;\n}\n\nbutton[part~=\"panel-resizer\"]:is(:active, :hover, .is-active) {\n  cursor: col-resize;\n}\n\n[resizing],\n[part~=\"panel-resizer\"].is-active {\n  cursor: col-resize;\n}\n\n[part~=\"sandbox-content\"] {\n  display:grid;\n  grid-template-columns: minmax(0,var(--start-panel-width, 1fr)) minmax(0, auto) minmax(0, var(--end-panel-width, 1fr));\n  grid-template-rows: minmax(0, 1fr);\n}\n\n[part~=\"sandbox-iframe-wrapper\"] {\n}\n\n[part~=\"sandbox-console-result\"] {\n  border-top:1px solid #1f252f;\n  border-bottom-left-radius:0;\n}\n`\n", "// @ts-check\n\nimport { html } from \"lit\"\nimport { styles } from \"./light-pen.styles.js\"\nimport { when } from \"lit/directives/when.js\";\n\nimport { theme } from './default-theme.styles.js'\n\nimport HighlightJS from 'highlight.js/lib/core';\nimport JavaScript from 'highlight.js/lib/languages/javascript';\nimport HTML from 'highlight.js/lib/languages/xml';\nimport CSS from 'highlight.js/lib/languages/css';\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ref } from \"lit/directives/ref.js\";\nimport { baseStyles, buttonStyles } from \"./base-styles.js\";\n\nimport { clamp } from '../internal/clamp.js'\nimport { dedent } from \"../internal/dedent.js\";\nimport { drag } from \"../internal/drag.js\";\n// import { defaultSandboxSettings } from \"../internal/default-sandbox-settings.js\";\nimport { resizeIcon } from \"../internal/resize-icon.js\";\nimport { BaseElement } from \"../internal/base-element.js\";\nimport LightEditor from \"./light-editor.js\";\n\n// Then register the languages you need\nHighlightJS.registerLanguage('javascript', JavaScript);\nHighlightJS.registerLanguage('xml', HTML);\nHighlightJS.registerLanguage('css', CSS);\n\n/**\n * @typedef {\"html\" | \"css\" | \"js\"} SupportedLanguages\n * @typedef {HTMLTextAreaElement | HTMLScriptElement | HTMLTemplateElement} SafeTemplateElements\n */\n\n\n/**\n * A lightweight codepen-like editor. `<light-pen>` is `~15kb` in size. Compared to `~90kb` from CodeMirror and `~160kb` from CodeSandbox. LightPen purposely is small and lightweight and is not intended to replace these tools. But rather\n fill a gap for users who don't need as much power.\n * @customElement\n * @tagname light-pen\n * @slot html - HTML to insert\n * @slot css - CSS to insert\n * @slot js - JavaScript to insert\n * @slot title - The title to appear at the top of the editor\n *\n * @part base - The base wrapper\n * @part sandbox - The wrapper around the editor and the iframe\n * @part sandbox-header - The wrapper around the header area\n */\nexport default class LightPen extends BaseElement {\n  // Static\n  static baseName = \"light-pen\"\n\n  static styles = [baseStyles, buttonStyles, styles]\n\n  static dependencies = {\n    'light-editor': LightEditor\n  }\n\n  static properties = {\n    openLanguages: { reflect: true, attribute: \"open-languages\" },\n    resizePosition: { attribute: \"resize-position\", reflect: true, type: Number },\n    console: { reflect: true },\n    // sandboxSettings: { reflect: true, attribute: \"sandbox-settings\"},\n    languages: { attribute: false, type: Array },\n    cssCode: { attribute: false },\n    htmlCode: { attribute: false },\n    jsCode: { attribute: false },\n    htmlResizeObserver: { attribute: false },\n    jsResizeObserver: { attribute: false },\n    cssResizeObserver: { attribute: false },\n    resizing: { attribute: false },\n  }\n\n  static {\n    Object.values(this.dependencies).forEach((ctor) => {\n      ctor.define()\n    })\n  }\n\n  // Overrides\n\n  /**\n   * @override\n   */\n  constructor() {\n    super()\n\n    this.languageMap = {\n      html: \"xml\",\n      css: \"css\",\n      js: \"javascript\"\n    }\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.htmlResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.jsResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.cssResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @attribute\n     * @reflect\n     * @type {number}\n     */\n    this.resizePosition = 50\n\n    /**\n     * Languages to have open on initial render\n     * Comma separated list of elements to open on initial render \"html,css,js\" to open all.\n     * @attribute\n     * @reflect\n     * @type {string}\n     */\n    this.openLanguages = \"\"\n\n    /**\n     * @type {Array<SupportedLanguages>}\n     * @property\n     */\n    this.languages = [\"html\", \"css\", \"js\"]\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {\"enabled\" | \"disabled\"}\n     */\n    this.console = \"disabled\"\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {string}\n     */\n    this.consoleText = \"\"\n\n    /**\n     * What to reset the HTML to.\n     * @property\n     * @type {string}\n     */\n    this.htmlReset = \"\"\n\n    /**\n     * What to reset the CSS to.\n     * @property\n     * @type {string}\n     */\n    this.cssReset = \"\"\n\n    /**\n     * What to reset the JS to.\n     * @property\n     * @type {string}\n     */\n    this.jsReset = \"\"\n\n    /**\n     * @property\n     * @internal\n     * @type {number}\n     */\n    this.cachedWidth = 0\n\n    /**\n     * @property\n     * @type {string}\n     */\n    this.sandboxSettings = \"\"\n\n    /**\n     * @internal\n     */\n    this.resizing = false\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback () {\n    super.connectedCallback()\n\n    this.updateCachedWidth()\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this)\n\n      /*\n       * Grab reset values so we can reset the inputs\n       */\n      this.htmlReset = this.htmlTextArea?.value || \"\"\n      this.cssReset = this.cssTextArea?.value || \"\"\n      this.jsReset = this.jsTextArea?.value || \"\"\n    });\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleTextAreaResize (entries) {\n    const { target } = entries[0]\n    const {\n      // left, right,\n      top, bottom\n    } = entries[0].contentRect;\n    // const width = left + right\n    const height = top + bottom\n\n    // @ts-expect-error\n    target.parentElement.style.setProperty(\"--textarea-height\", `${height}px`)\n\n    // One day we'll allow the textarea to resize the width.\n    // target.parentElement.style.setProperty(\"--textarea-width\", `${width}px`)\n  }\n\n  /**\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth () {\n    const { left, right } = this.getBoundingClientRect()\n    const width = left + right\n    this.cachedWidth = width\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize (entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right\n    // Resize when a primary panel is set\n    this.cachedWidth = width\n  }\n\n  /** Getters / Setters */\n\n  /**\n   * @returns {null | undefined | HTMLIFrameElement}\n   */\n  get iframeElem () {\n    return this.shadowRoot?.querySelector(\"iframe\")\n  }\n\n  handleEditorInput () {\n  }\n\n  updateIframeContent () {\n    const iframeElem= this.iframeElem\n    if (iframeElem == null) return\n\n    // this.setupIframeLogging();\n\n    let page = `\n      <!doctype html><html>\n        <head><meta charset=\"utf-8\">\n          <style>${this.cssCode}<\\/style>\n        </head>\n        <body>\n          ${this.htmlCode}\n          <script type=\"module\">\n            ${this.jsCode}\n          </script>\n        </body>\n      </html>\n    `\n\n    iframeElem.contentWindow?.document.open()\n    iframeElem.contentWindow?.document.writeln(page)\n    iframeElem.contentWindow?.document.close()\n  }\n\n  inputHandler () {\n    this.updateCode()\n  }\n\n  /**\n   * @param {import(\"lit\").PropertyValues} changedProperties\n   */\n  willUpdate (changedProperties) {\n    if ([\"cssCode\", \"htmlCode\", \"jsCode\"].some((str) => changedProperties.has(str))) {\n      if (this._iframeDebounce != null) window.clearTimeout(this._iframeDebounce)\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300)\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition()\n    }\n\n    super.willUpdate(changedProperties)\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback()\n\n    this.htmlTextArea && this.htmlResizeObserver.disconnect()\n    this.cssTextArea && this.cssResizeObserver.disconnect()\n    this.jsTextArea && this.jsResizeObserver.disconnect()\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  htmlTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.htmlTextArea = textarea\n    this.htmlResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  cssTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.cssTextArea = textarea\n    this.cssResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  jsTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.jsTextArea = textarea\n    this.jsResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown (event) {\n    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * (1);\n\n      event.preventDefault();\n\n      if (event.key === 'ArrowLeft') {\n        newPosition -= incr;\n      }\n\n      if (event.key === 'ArrowRight') {\n        newPosition += incr;\n      }\n\n      if (event.key === 'Home') {\n        newPosition = 100;\n      }\n\n      if (event.key === 'End') {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(newPosition, 0, 100);\n    }\n  }\n\n  updateResizePosition (resizePosition = this.resizePosition) {\n    const startWidth = resizePosition\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth\n      this.style.setProperty(\"--start-panel-width\", `${startWidth}%`)\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`)\n    }\n  }\n\n\n  /**\n   * Lovely helper to scoop up our html, css, and js code\n   */\n  updateCode () {\n    this.cssCode = this.cssTextArea?.value\n    this.htmlCode = this.htmlTextArea?.value\n    this.jsCode = this.jsTextArea?.value\n  }\n\n  resetValues () {\n    if (this.htmlTextArea) {\n      this.htmlCode = this.htmlReset\n      this.htmlTextArea.value = this.htmlReset\n    }\n\n    if (this.cssTextArea) {\n      this.cssCode = this.cssReset\n      this.cssTextArea.value = this.cssReset\n    }\n\n    if (this.jsTextArea) {\n      this.jsCode = this.jsReset\n      this.jsTextArea.value = this.jsReset\n    }\n  }\n\n  // setupIframeLogging() {\n  //   if (!this.console && this.result !== 'console') return;\n  //\n  //   if (this.iframeElem == null) return\n  //   if (this.iframeElem.contentWindow == null) return\n  //\n  //   this.iframeElem.contentWindow.document.open(),\n  //   this.iframeElem.contentWindow.document.writeln(\n  //     '<script>\\n\\t\\t\\t\\tlet __console = Object.assign({}, console);\\n\\t\\t\\t\\tlet __listener = function () {};\\n\\t\\t\\t\\tfor (let type in console) {\\n\\t\\t\\t\\t\\tconsole[type] = function (...msg) {\\n\\t\\t\\t\\t\\t\\t__listener({source: \\'iframe\\', msg, type}, \\'*\\');\\n\\t\\t\\t\\t\\t\\t__console[type](...msg);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconsole.listen = function (callback) {\\n\\t\\t\\t\\t\\t__listener = callback;\\n\\t\\t\\t\\t};\\n\\t\\t\\t</script>'\n  //   ),\n  //   this.iframeElem.contentWindow.document.close();\n  //   let e = this;\n  //\n  //\n  //   // @ts-expect-error\n  //   this.iframeElem.contentWindow.console.listen(\n  //     function (t) {\n  //       for (let n of t.msg) {\n  //         let a = document.createElement('div');\n  //         a.className = `log-${ t.type }`,\n  //         a.textContent = this.getConsoleMessage(),\n  //         e.loggerElem?.append(a)\n  //       }\n  //     }\n  //   )\n  // }\n\n  /**\n   * @param {Event} e\n   */\n  handleTemplate (e) {\n    /**\n     * @type {HTMLSlotElement}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    const slotName = slot.getAttribute(\"name\")\n    if (slotName == null) return\n\n    if (!this.languages.includes(/** @type {SupportedLanguages} */ (slotName))) {\n      return\n    }\n\n    const codeType = /** @type {SupportedLanguages} */ (slotName)\n\n    const templates = slot.assignedElements({flatten: true})\n\n    const code = dedent(this.unescapeCharacters(templates.map((template) => template.innerHTML).join(\"\\n\")))\n\n    this[`${codeType}Code`] = code\n\n    const textArea = this[`${codeType}TextArea`]\n\n    if (textArea && code) {\n      textArea.value = code\n    }\n  }\n\n  /**\n   * @param {string} text\n   */\n  unescapeCharacters (text) {\n    // Update code\n    return text.replaceAll(\"&lt;/script>\", \"</script>\")\n  }\n\n  // Rendering\n  renderConsole () {\n    return html`<div part=\"sandbox-console-log\"></div>`\n  }\n\n  /**\n   * @override\n   */\n  render () {\n\t\treturn html`\n      <!-- Where users can declaratively provide templates -->\n      <div style=\"display: none;\">\n        <slot name=\"html\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"css\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"js\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n\n      <div part=\"base\" ?resizing=${this.resizing}>\n\t\t\t  <div part=\"sandbox\">\n\t\t\t\t  <div part=\"sandbox-header\">\n            <slot name=\"title\">\n\t\t\t\t\t    <strong>\n                Code Editor\n              </strong>\n            </slot>\n\n\t\t\t\t\t  <span part=\"sandbox-controls\">\n\t\t\t\t\t\t  <button part=\"sandbox-controls-button sandbox-reset\" @click=${this.resetValues}>\n                Reset\n              </button>\n\n\t\t\t\t\t\t  ${when(this.console === \"enabled\", () => html`<button @click={}>Clear Console</button>`)}\n\t\t\t\t\t  </span>\n\t\t\t\t</div>\n\t\t\t\t<div part=\"sandbox-content\">\n\t\t\t\t\t<div part=\"sandbox-code\">\n            ${this.renderDetails('html')}\n            ${this.renderDetails('css')}\n            ${this.renderDetails('js')}\n\t\t\t\t\t</div>\n\n          <button\n            id=\"panel-resizer\"\n            part=\"panel-resizer\"\n            role=\"separator\"\n            aria-valuenow=${this.resizePosition}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            @keydown=${this.handleResizerKeydown}\n            @pointerdown=${this.handleDrag}\n            @touchstart=${this.handleDrag}\n            class=${this.resizing ? \"is-active\" : \"\"}\n          >\n            <slot name=\"panel-resize-icon\">\n              ${resizeIcon}\n            </slot>\n            <span class=\"visually-hidden\">Resize Panel. Pull to left or right to resize.</span>\n          </button>\n\n\t\t\t\t\t<div part=\"sandbox-iframe-wrapper\">\n\t\t\t\t\t\t<iframe\n              part=\"sandbox-iframe\"\n              frameborder=\"0\"\n             ></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n        <!--\n        ${when(\n            this.console === \"enabled\",\n            () => html`\n              <details class=\"sandbox-console\" ?open=${console}>\n                <summary part=\"summary summary-console\" tabindex=\"0\">Console</summary>\n                ${this.consoleText}\n              </details>\n            `\n        )}\n        -->\n\t\t\t</div>\n\t\t</div>`\n\t}\n\n  /**\n   * @param {PointerEvent} event\n   */\n\thandleDrag (event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    if (this.iframeElem) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      this.iframeElem.style.pointerEvents = \"none\"\n    }\n\n    this.resizing = true\n\n    drag(this, {\n      onMove: (x, _y) => {\n        this.resizing = true\n        let newPositionInPixels = x;\n\n\n        this.resizePosition = clamp(this.pixelsToPercentage(newPositionInPixels), 0, 100);\n        this.updateResizePosition()\n      },\n      onStop: () => {\n        if (this.iframeElem) {\n        // Re-enable pointerevents so you can use tab keys etc.\n          this.iframeElem.style.pointerEvents = \"auto\"\n        }\n\n        this.resizing = false\n      },\n      initialEvent: event\n    });\n  }\n\n  /**\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage (pixels) {\n    return (pixels / this.cachedWidth) * 100\n  }\n\n  /**\n   * @param {SupportedLanguages} language\n   */\n  renderEditor (language) {\n    let highlightLang = this.languageMap[language]\n\n    return html`\n      <light-editor\n        id=${`editor-${language}`}\n        part=${`sandbox-editor sandbox-editor--${language}`}\n        language=${highlightLang}\n        value=${this[`${language}Code`]}\n        @light-input=${/** @param {Event} e */ (e) => {\n          this[`${language}Code`] = /** @type {LightEditor} */ (e.currentTarget).value\n        }}\n        @light-change=${/** @param {Event} e */ (e) => {\n          this[`${language}Code`] = /** @type {LightEditor} */ (e.currentTarget).value\n        }}\n      ></light-editor>\n    `\n  }\n\n  /**\n   * @param {SupportedLanguages} language\n   */\n  renderDetails (language) {\n    let fullLanguage = language.toUpperCase()\n\n    const open = this.openLanguages.split(\",\").includes(language)\n\n\t\treturn html`\n      <details ?open=${open} part=\"details details-${language}\">\n\t\t\t\t<summary part=\"summary summary-${language}\">\n          ${fullLanguage}\n        </summary>\n\n        ${this.renderEditor(language)}\n\t\t\t</details>\n\t\t`\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["styles", "i", "core_default", "javascript", "xml", "css", "_LightPen", "BaseElement", "entries", "target", "top", "bottom", "height", "left", "right", "width", "iframeElem", "page", "changedProperties", "str", "textarea", "event", "newPosition", "incr", "clamp", "resizePosition", "startWidth", "endWidth", "slot", "slotName", "codeType", "templates", "code", "dedent", "template", "textArea", "text", "x", "n", "resizeIcon", "drag", "_y", "newPositionInPixels", "pixels", "language", "highlightLang", "e", "fullLanguage", "open", "__publicField", "baseStyles", "buttonStyles", "styles", "LightEditor", "ctor", "LightPen"]
}
