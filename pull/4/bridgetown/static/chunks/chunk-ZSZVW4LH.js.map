{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directives/when.ts", "../../../../../internal/clamp.js", "../../../../../internal/dedent.js", "../../../../../internal/drag.js", "../../../../../internal/resize-icon.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * When `condition` is true, returns the result of calling `trueCase()`, else\n * returns the result of calling `falseCase()` if `falseCase` is defined.\n *\n * This is a convenience wrapper around a ternary expression that makes it a\n * little nicer to write an inline conditional without an else.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n *   `;\n * }\n * ```\n */\nexport function when<T, F>(\n  condition: true,\n  trueCase: () => T,\n  falseCase?: () => F\n): T;\nexport function when<T, F = undefined>(\n  condition: false,\n  trueCase: () => T,\n  falseCase?: () => F\n): F;\nexport function when<T, F = undefined>(\n  condition: unknown,\n  trueCase: () => T,\n  falseCase?: () => F\n): T | F;\nexport function when(\n  condition: unknown,\n  trueCase: () => unknown,\n  falseCase?: () => unknown\n): unknown {\n  return condition ? trueCase() : falseCase?.();\n}\n", "/**\n * @param {number} min\n * @param {number} curr\n * @param {number} max\n */\nexport function clamp (min, curr, max) {\n  if (curr < min) return min\n  if (curr > max) return max\n\n  return curr\n}\n\n", "/**\n * @param {TemplateStringsArray|string} templateStrings\n * @param {any[]} values\n */\nexport function dedent (templateStrings, ...values) {\n\tlet matches = [];\n\tlet strings = typeof templateStrings === 'string' ? [ templateStrings ] : templateStrings.slice();\n\n\t// 1. Remove trailing whitespace.\n\tstrings[strings.length - 1] = strings[strings.length - 1].replace(/\\r?\\n([\\t ]*)$/, '');\n\n\t// 2. Find all line breaks to determine the highest common indentation level.\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tlet match;\n\n\t\tif (match = strings[i].match(/\\n[\\t ]+/g)) {\n\t\t\tmatches.push(...match);\n\t\t}\n\t}\n\n\t// 3. Remove the common indentation from all strings.\n\tif (matches.length) {\n\t\tlet size = Math.min(...matches.map(value => value.length - 1));\n\t\tlet pattern = new RegExp(`\\n[\\t ]{${size}}`, 'g');\n\n\t\tfor (let i = 0; i < strings.length; i++) {\n\t\t\tstrings[i] = strings[i].replace(pattern, '\\n');\n\t\t}\n\t}\n\n\t// 4. Remove leading whitespace.\n\tstrings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n\t// 5. Perform interpolation.\n\tlet string = strings[0];\n\n\tfor (let i = 0; i < values.length; i++) {\n\t\tstring += values[i] + strings[i + 1];\n\t}\n\n\treturn string;\n}\n", "/**\n * @typedef {object} DragOptions\n * @property {(x: number, y: number) => void} onMove - Callback that runs as dragging occurs.\n * @property {() => void} onStop - Callback that runs when dragging stops.\n * @property {PointerEvent} initialEvent - When an initial event is passed, the first drag will be triggered immediately using the coordinates therein. This is useful when the drag is initiated by a mousedown/touchstart event but you want the initial \"click\" to activate a drag (e.g. resizePositioning a handle initially at the click target).\n */\n\n/**\n * @param {HTMLElement} container\n * @param {Partial<DragOptions>} [options]\n\n */\nexport function drag(container, options) {\n  /**\n   * @param {PointerEvent} pointerEvent\n   */\n  function move(pointerEvent) {\n    const dims = container.getBoundingClientRect();\n    const defaultView = container.ownerDocument.defaultView;\n    const offsetX = dims.left + (defaultView?.pageXOffset || 0);\n    const offsetY = dims.top + (defaultView?.pageYOffset || 0);\n    const x = pointerEvent.pageX - offsetX;\n    const y = pointerEvent.pageY - offsetY;\n\n    if (options?.onMove) {\n      options.onMove(x, y);\n    }\n  }\n\n  function stop() {\n    document.removeEventListener('pointermove', move);\n    document.removeEventListener('pointerup', stop);\n\n    if (options?.onStop) {\n      options.onStop();\n    }\n  }\n\n  document.addEventListener('pointermove', move, { passive: true });\n  document.addEventListener('pointerup', stop);\n\n  // If an initial event is set, trigger the first drag immediately\n  if (options?.initialEvent instanceof PointerEvent) {\n    move(options.initialEvent);\n  }\n}\n\n", "import { html } from \"lit\";\n\nexport const resizeIcon = html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-grip-vertical\" viewBox=\"0 0 16 16\" part=\"svg\"><path d=\"M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"></path></svg>`\n"],
  "mappings": "0FAsCgBA,EACdC,EACAC,EACAC,EAAAA,CAEA,OAAOF,EAAYC,EAAAA,EAAaC,IAAAA,CAClC,CCvCO,SAASC,EAAOC,EAAKC,EAAMC,EAAK,CACrC,OAAID,EAAOD,EAAYA,EACnBC,EAAOC,EAAYA,EAEhBD,CACT,CCNO,SAASE,EAAQC,KAAoBC,EAAQ,CACnD,IAAIC,EAAU,CAAC,EACXC,EAAU,OAAOH,GAAoB,SAAW,CAAEA,CAAgB,EAAIA,EAAgB,MAAM,EAGhGG,EAAQA,EAAQ,OAAS,CAAC,EAAIA,EAAQA,EAAQ,OAAS,CAAC,EAAE,QAAQ,iBAAkB,EAAE,EAGtF,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAAK,CACxC,IAAIC,GAEAA,EAAQF,EAAQC,CAAC,EAAE,MAAM,WAAW,IACvCF,EAAQ,KAAK,GAAGG,CAAK,CAEvB,CAGA,GAAIH,EAAQ,OAAQ,CACnB,IAAII,EAAO,KAAK,IAAI,GAAGJ,EAAQ,IAAIK,GAASA,EAAM,OAAS,CAAC,CAAC,EACzDC,EAAU,IAAI,OAAO;AAAA,OAAWF,CAAI,IAAK,GAAG,EAEhD,QAASF,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IACnCD,EAAQC,CAAC,EAAID,EAAQC,CAAC,EAAE,QAAQI,EAAS;AAAA,CAAI,CAE/C,CAGAL,EAAQ,CAAC,EAAIA,EAAQ,CAAC,EAAE,QAAQ,SAAU,EAAE,EAG5C,IAAIM,EAASN,EAAQ,CAAC,EAEtB,QAASC,EAAI,EAAGA,EAAIH,EAAO,OAAQG,IAClCK,GAAUR,EAAOG,CAAC,EAAID,EAAQC,EAAI,CAAC,EAGpC,OAAOK,CACR,CC7BO,SAASC,EAAKC,EAAWC,EAAS,CAIvC,SAASC,EAAKC,EAAc,CAC1B,IAAMC,EAAOJ,EAAU,sBAAsB,EACvCK,EAAcL,EAAU,cAAc,YACtCM,EAAUF,EAAK,MAAQC,GAAa,aAAe,GACnDE,EAAUH,EAAK,KAAOC,GAAa,aAAe,GAClDG,EAAIL,EAAa,MAAQG,EACzBG,EAAIN,EAAa,MAAQI,EAE3BN,GAAS,QACXA,EAAQ,OAAOO,EAAGC,CAAC,CAEvB,CAEA,SAASC,GAAO,CACd,SAAS,oBAAoB,cAAeR,CAAI,EAChD,SAAS,oBAAoB,YAAaQ,CAAI,EAE1CT,GAAS,QACXA,EAAQ,OAAO,CAEnB,CAEA,SAAS,iBAAiB,cAAeC,EAAM,CAAE,QAAS,EAAK,CAAC,EAChE,SAAS,iBAAiB,YAAaQ,CAAI,EAGvCT,GAAS,wBAAwB,cACnCC,EAAKD,EAAQ,YAAY,CAE7B,CC3CO,IAAMU,EAAaC",
  "names": ["when", "condition", "trueCase", "falseCase", "clamp", "min", "curr", "max", "dedent", "templateStrings", "values", "matches", "strings", "i", "match", "size", "value", "pattern", "string", "drag", "container", "options", "move", "pointerEvent", "dims", "defaultView", "offsetX", "offsetY", "x", "y", "stop", "resizeIcon", "x"]
}
