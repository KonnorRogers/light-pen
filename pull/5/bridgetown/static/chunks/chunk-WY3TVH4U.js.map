{
  "version": 3,
  "sources": ["../../../../../internal/default-sandbox-settings.js", "../../../../../exports/light-preview.styles.js", "../../../../../internal/string-map.js", "../../../../../internal/debounce.js", "../../../../../exports/light-preview-base.js", "../../../../../exports/light-preview.js"],
  "sourcesContent": ["export const defaultSandboxSettings = `\n  allow-forms\n  allow-modals\n  allow-pointer-lock\n  allow-popups\n  allow-scripts\n  allow-downloads\n  allow-orientation-lock\n  allow-pointer-lock\n  allow-popups\n  allow-presentation\n  allow-same-origin\n`\n\n", "import { css } from \"lit\"\n\nexport const previewStyles = css`\n:host {\n  --border-color: lightgray;\n}\n\n:host,\n[part~=\"base\"] {\n  max-width: 100%;\n}\n\n:host([resizing]) [part=~\"base\"] {\n  cursor: col-resize;\n}\n\n[part~=\"base\"] {\n  border: 1px solid var(--border-color);\n  border-radius: 3px;\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-template-rows: minmax(0, auto) minmax(0, 1fr) minmax(0, auto);\n  height: 100%;\n}\n\n[part~=\"panel-resizer\"] {\n  border-radius: 0;\n  border-inline-start: 1px solid var(--border-color);\n}\n\n:host(:not([resize-position=\"100\"])) [part~=\"panel-resizer\"] {\n  border-inline-end: 1px solid var(--border-color);\n}\n\n[part~=\"preview\"] {\n  display: grid;\n  grid-template-columns: minmax(0, var(--start-panel-width, 1fr)) minmax(0, auto) minmax(0, var(--end-panel-width, auto));\n  overflow: auto;\n  max-height: 100%;\n  resize: vertical;\n\n}\n\n[part~=\"start-panel\"] {\n  padding: 1rem;\n}\n\niframe {\n  min-height: 100%;\n  width: 100%;\n}\n\n[part~=\"pre\"] {\n  padding: 1rem;\n  margin: 0;\n  overflow: auto;\n}\n\n[part~=\"pre\"],\n[part~=\"code\"] {\n  line-height: 1.6;\n}\n\n[part~=\"end-panel\"] {\n  background-color: rgba(0,0,0,0.025);\n}\n\n[part~=\"code-wrapper\"] {\n  border-top: 1px solid var(--border-color);\n}\n\n[part~=\"pre\"],\n[part~=\"code\"] {\n\tcolor: #272727;\n\tbackground-color: #f7f7f7;\n}\n\n[part~=\"actions\"] {\n  display: grid;\n  align-items: center;\n  grid-auto-flow: column;\n  grid-template-columns: minmax(0, 1fr) repeat(auto-fill, minmax(0, auto));\n}\n\nbutton[part~=\"source-code-toggle\"] {\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  justify-content: center;\n  border-top-left-radius: 0px;\n  border-top-right-radius: 0px;\n  border-top: 1px solid var(--border-color);\n  min-height: 100%;\n  font-size: 1rem;\n  padding: 0.75rem;\n}\n\n[part~=\"source-code-toggle\"] svg {\n  transform-origin: 50% 50%;\n  transition: .25s transform ease;\n}\n\n[part~=\"source-code-toggle\"][aria-expanded=\"true\"] svg {\n  transform: rotate(180deg);\n}\n`\n", "/**\n * @param {Record<string, unknown>} obj\n * @returns {Record<string, boolean>}\n */\nexport function stringMap (obj, spacer = \" \") {\n  let strings = []\n\n  for (const [key, val] of Object.entries(obj)) {\n    if (Boolean(val)) {\n      strings.push(key)\n    }\n  }\n\n  /**\n   * @type {Record<string, boolean>}\n   */\n  // @ts-expect-error\n  return strings.join(spacer)\n}\n", "// @ts-check\n/**\n * @template {(...args: any[]) => any} T\n * @param {T} callback\n * @param {number} wait\n */\nexport function debounce (callback, wait = 0) {\n  /**\n   * @type {number | null}\n   */\n  let timeoutId = null;\n\n  /**\n   * @param {any[]} args\n   */\n  return (...args) => {\n    if (timeoutId) {\n      window.clearTimeout(timeoutId);\n    }\n\n    timeoutId = window.setTimeout(() => {\n      callback.apply(null, args);\n    }, wait);\n  };\n}\n", "// @ts-check\nimport { html } from \"lit\";\nimport { buttonStyles, baseStyles } from \"./base-styles.js\";\n\nimport { when } from \"lit/directives/when.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { defaultSandboxSettings } from \"../internal/default-sandbox-settings.js\";\nimport { previewStyles } from \"./light-preview.styles.js\";\nimport { drag } from \"../internal/drag.js\";\nimport { clamp } from \"../internal/clamp.js\";\nimport { stringMap } from \"../internal/string-map.js\";\nimport { debounce } from \"../internal/debounce.js\";\nimport { resizeIcon } from \"../internal/resize-icon.js\";\nimport { BaseElement } from \"../internal/base-element.js\";\n\nconst sourceCodeFallback = \"Show source code\"\n\n/**\n * LightPreviewBase is not meant to be used directly, rather its the base implementation of\n *   previewing. It comes without a highlight theme or a highlighter. Go to LightPreview for how to\n *   implement your own theme and highlighter.\n * @customElement\n * @tagname light-preview-base\n *\n * @csspart base - The base wrapping element\n * @csspart preview - The wrapper around the iframe / div preview showing your code being run in the browser.\n * @csspart start-panel - The iframe or preview-div\n * @csspart preview-div - used for inline previews\n * @csspart iframe - used for iframe based previews (default)\n * @csspart panel-resizer - The button that resizes the panel\n * @csspart end-panel - The white space when dragging the resizer\n * @csspart source-details - The details element that shows the source code\n * @csspart code-wrapper - The div that wraps the <pre> + <code> elements containing your highlighted code\n * @csspart pre - The <pre> element wrapping the source code\n * @csspart code - The <code>  element wrapping the source code\n * @csspart actions - The buttons at the bottom of the code previewer\n * @csspart source-code-toggle - The button to show the source code\n * @csspart source-code-toggle-icon - The caret icon in the source code toggle\n *\n * @slot resize-icon - The icon to display in the resizer button. Override this to provide your own icon.\n * @slot summary - What to display in source code expander\n * @slot source-code-toggle-icon - Slot in your own icon to override the default caret.\n * @slot actions - Slot in buttons / links to allow for additional actions in the bottom bar.\n * @slot preview-code - If you want to run code that is slightly different from the source code you want to display, slot it into \"preview-code\"\n * @slot code - Used to display both source code and to power your preview in the iframe. If you slot in \"preview-code\", then it will only be used to show / highlight your source code.\n */\nexport default class LightPreviewBase extends BaseElement {\n  static baseName = \"light-preview-base\"\n\n  static styles = [\n    baseStyles,\n    buttonStyles,\n    previewStyles\n  ]\n\n  static properties = {\n    summary: {},\n    sandboxSettings: { reflect: true, attribute: \"sandbox-settings\" },\n    highlightLanguage: { reflect: true, attribute: \"highlight-language\" },\n    inlinePreview: { type: Boolean, attribute: \"inline-preview\" },\n    disableHighlight: { type: Boolean, attribute: \"disable-highlight\" },\n    open: { reflect: true, type: Boolean },\n    resizePosition: { reflect: true, type: Number, attribute: \"resize-position\" },\n    resizing: { reflect: true, type: Boolean },\n\n    // State\n    code: { attribute: false },\n    previewCode: { attribute: false },\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * The sandbox settings to provide to the <iframe>\n     */\n    this.sandboxSettings = defaultSandboxSettings\n\n    /**\n     * The text to provide in the <details> toggle button\n     */\n    this.summary = sourceCodeFallback\n\n    /**\n     * The language to highlight for.\n     */\n    this.highlightLanguage = \"html\"\n\n    /**\n     * Set to true to not use an <iframe> for previewing\n     */\n    this.inlinePreview = false\n\n    /**\n     * When the resizer is being dragged, this will be true.\n     */\n    this.resizing = false\n\n    /**\n     * If disabled, its on you to provide `<pre><code></code></pre>`\n     */\n    this.disableHighlight = false\n\n    /**\n     * We will take the code, wrap it in `<pre><code></code></pre>` and run it through\n     * Highlight.js.\n     * If the element has `disableHighlight`, we will not touch their code. Instead they must pass in escapedHTML.\n     */\n    this.code = \"\"\n\n    /**\n     * If `disableHighlight` is true, then you must pass in an element into `previewCode` to be able to get\n     *   the code to run in the previewer.\n     */\n    this.previewCode = \"\"\n\n    /**\n     * Whether or not the source code is being shown\n     */\n    this.open = false\n\n    /**\n     * The current position of the resizer. 100 means all the way to right. 0 means all the way to left.\n     */\n    this.resizePosition = 100\n\n    /**\n     * @internal\n     */\n    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));\n\n    /**\n     * @internal\n     * @type {MutationObserverInit}\n     */\n    this.__mutationObserverConfig = {childList: true, subtree: true, characterData: true }\n\n    /**\n     * @internal\n     */\n    this.previewCodeDebounce = debounce(() => this.handleMutation(\"preview-code\"), 20)\n\n    /**\n     * @internal\n     */\n    this.codeDebounce = debounce(() => this.handleMutation(\"code\"), 20)\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation on slotted preview-code\n   */\n  resetIframeCodeMutationObserver () {\n    if (this.previewCodeMutationObserver) {\n      this.previewCodeMutationObserver.disconnect()\n    }\n    this.previewCodeMutationObserver = new MutationObserver((..._args) => this.previewCodeDebounce())\n\n    const targets = this.findSlot(\"preview-code\")?.assignedElements({ flatten: true }) || []\n\n    for (const target of targets) {\n      this.previewCodeMutationObserver.observe(target, this.__mutationObserverConfig)\n    }\n  }\n\n  /**\n   * @internal\n   * Reinstalls the mutation observer on slotted code\n   */\n  resetCodeMutationObserver () {\n    if (this.codeMutationObserver) {\n      this.codeMutationObserver.disconnect()\n    }\n    this.codeMutationObserver = new MutationObserver((..._args) => this.codeDebounce())\n\n    const targets = this.findSlot(\"code\")?.assignedElements({ flatten: true }) || []\n\n    for (const target of targets) {\n      this.codeMutationObserver.observe(target, this.__mutationObserverConfig)\n    }\n  }\n\n\n  /**\n   * @internal\n   * @param {\"preview-code\" | \"code\"} variable\n   */\n  handleMutation (variable) {\n    if (variable === \"preview-code\") {\n      this.handleTemplate({ target: this.findSlot(\"preview-code\") })\n      return\n    }\n\n    if (variable === \"code\") {\n      this.handleTemplate({ target: this.findSlot(\"code\") })\n      return\n    }\n  }\n\n  /**\n   * @internal\n   * @param {string} name\n   * @returns {HTMLSlotElement | null | undefined}\n   */\n  findSlot(name) {\n    return this.shadowRoot?.querySelector(`slot[name='${name}']`)\n  }\n\n  /**\n   * @internal\n   * @param {Event | { target?: undefined | null | HTMLSlotElement }} e\n   */\n  handleTemplate (e) {\n    /**\n     * @type {HTMLSlotElement | null | undefined}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    if (slot == null) return\n\n    const name = slot.getAttribute(\"name\")\n\n    if ([\"preview-code\", \"code\"].includes(name || \"\") === false) return\n\n    let shouldReset = \"type\" in e && e.type === \"slotchange\"\n\n    let elements = slot.assignedElements({flatten: true})\n\n    let strings = []\n\n    const scratch = document.createElement(\"div\")\n\n    for (const el of elements) {\n      if (el instanceof HTMLTemplateElement) {\n        const node = el.content.cloneNode(true)\n\n        scratch.append(node)\n        strings.push(scratch.innerHTML)\n        scratch.innerHTML = \"\"\n        continue\n      }\n\n      strings.push(el.innerHTML)\n    }\n\n    const code = strings.join(\"\\n\")\n\n    if (name === \"preview-code\") {\n      if (shouldReset) this.resetIframeCodeMutationObserver()\n      this.previewCode = code\n      return\n    }\n\n    if (name === \"code\") {\n      if (shouldReset) this.resetCodeMutationObserver()\n      this.code = code\n      return\n    }\n  }\n\n\n  /**\n   * @internal\n   */\n  unescapePreviewCode () {\n    return this.unescapeCharacters(this.previewCode || this.code)\n  }\n\n  /**\n   * @internal\n   */\n  updateIframeContent () {\n    const code = this.unescapePreviewCode()\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\")\n\n    if (!iframe) return\n\n    const content = `\n      <!doctype html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n        </head>\n        <body>\n          ${code}\n        </body>\n      </html>`\n\n\n    iframe.contentWindow?.document.open()\n    iframe.contentWindow?.document.writeln(content)\n    iframe.contentWindow?.document.close()\n  }\n\n  /**\n   * @internal\n   * @param {string} text\n   */\n  escapeCharacters(text) {\n    return text.replaceAll(new RegExp(\"<\", \"g\"), \"&lt;\").replaceAll(new RegExp(\">\", \"g\"), \"&gt;\")\n  }\n\n  /**\n   * @internal\n   * @param {string} text\n   */\n  unescapeCharacters (text) {\n    return text.replaceAll(/&lt;\\/([\\w\\d\\.-_]+)>/g, \"</$1>\")\n  }\n\n  /**\n   * @internal\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate (changedProperties) {\n    if (/** @type {Array<keyof LightPreviewBase>} */ ([\"previewCode\", \"code\"]).some((str) => changedProperties.has((str)))) {\n      if (this._iframeDebounce != null) window.clearTimeout(this._iframeDebounce)\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300)\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition()\n    }\n\n    super.willUpdate(changedProperties)\n  }\n\n  /**\n   * @internal\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth () {\n    const { left, right } = this.getBoundingClientRect()\n    const width = left + right\n    this.cachedWidth = width\n  }\n\n  /**\n   * @internal\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize (entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right\n    // Resize when a primary panel is set\n    this.cachedWidth = width\n  }\n\n  connectedCallback () {\n    super.connectedCallback()\n\n    this.updateCachedWidth()\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this)\n\n      this.resetIframeCodeMutationObserver()\n      this.resetCodeMutationObserver()\n    })\n  }\n\n  /**\n   * @public\n   * Override this function to use your own highlighter\n   */\n  highlight (code = this.code) {\n    return code\n  }\n\n  render () {\n    const language = this.highlightLanguage\n    return html`\n      <div part=${stringMap({\n          \"base\": true,\n        })}>\n        <div part=\"preview\">\n          ${when(this.inlinePreview,\n              () => html`<div part=\"start-panel preview-div\">${unsafeHTML(this.unescapePreviewCode())}</div>`,\n              () => html`\n                <iframe part=\"start-panel iframe\" height=\"auto\" frameborder=\"0\"></iframe>\n              `\n           )}\n          <button\n            id=\"panel-resizer\"\n            part=\"panel-resizer\"\n            role=\"separator\"\n            aria-valuenow=${this.resizePosition}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            @keydown=${this.handleResizerKeydown}\n            @pointerdown=${this.handleDrag}\n            @touchstart=${this.handleDrag}\n            class=${this.resizing ? \"is-active\" : \"\"}\n          >\n            <slot name=\"resize-icon\">\n              ${resizeIcon}\n            </slot>\n          </button>\n\n          <div part=\"end-panel\"></div>\n        </div>\n\n        <light-disclosure\n          id=\"details\"\n          ?open=${this.open}\n          part=\"source-details\"\n          aria-labelledby=\"summary\"\n        >\n          <div part=\"code-wrapper\">\n            ${when(this.highlight,\n              () => html`\n\t\t\t\t\t      <pre\n                  id=\"pre-${language}\"\n                  data-code-lang=${language}\n                  aria-hidden=\"true\"\n                  part=\"pre pre-${language}\"\n                  tabindex=\"0\"\n                  aria-labelledby=\"source-code-label\"\n                  role=\"region\"\n                ><code\n                    part=\"code code-${language}\"\n                    class=\"language-${language}\"\n                  >${unsafeHTML(this.highlight())}</code></pre>`,\n              () => html`${unsafeHTML(this.code)}`\n            )}\n          </div>\n        </light-disclosure>\n\n        <div part=\"actions\">\n          <button part=\"source-code-toggle\" aria-expanded=${this.open} aria-controls=\"details\" @click=${() => this.open = !this.open} type=\"button\">\n            <slot name=\"summary\">${this.summary || sourceCodeFallback}</slot>\n            <slot name=\"source-code-toggle-icon\">\n              <svg part=\"source-code-toggle-icon\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <polyline points=\"6 9 12 15 18 9\"></polyline>\n              </svg>\n            </slot>\n          </button>\n\n          <slot name=\"actions\"></slot>\n        </div>\n      </div>\n\n      <div hidden>\n        <slot name=\"preview-code\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"code\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n    `\n  }\n\n\n  /**\n   * @internal\n   */\n  get panelResizer () {\n    return this.shadowRoot?.querySelector(\"[part~='panel-resizer']\")\n  }\n\n\n  /** Drag stuff */\n  /**\n   * @internal\n   * @param {PointerEvent} event\n   */\n\thandleDrag (event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\")\n    if (iframe) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      iframe.style.pointerEvents = \"none\"\n    }\n\n    this.resizing = true\n\n    const target = event.currentTarget\n\n    // @ts-expect-error\n    const halfWidth = (target?.offsetWidth || 0) / 2\n\n    drag(this, {\n      onMove: (x, _y) => {\n        let newPositionInPixels = x + halfWidth;\n\n        this.resizePosition = clamp(0, this.pixelsToPercentage(newPositionInPixels), 100);\n        this.updateResizePosition()\n        this.resizing = true\n      },\n      onStop: () => {\n        const iframe = this.shadowRoot?.querySelector(\"iframe\")\n        if (iframe) {\n        // Re-enable pointerevents so you can use tab keys etc.\n          iframe.style.pointerEvents = \"auto\"\n        }\n\n        this.resizing = false\n      },\n      initialEvent: event\n    });\n  }\n\n  /**\n   * @internal\n   */\n  updateResizePosition (resizePosition = this.resizePosition) {\n    const startWidth = resizePosition\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth\n      this.style.setProperty(\"--start-panel-width\", `clamp(100px, ${startWidth}%, 100%)`)\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`)\n    }\n  }\n\n  /**\n   * @internal\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown (event) {\n    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * (1);\n\n      event.preventDefault();\n\n      if (event.key === 'ArrowLeft') {\n        newPosition -= incr;\n      }\n\n      if (event.key === 'ArrowRight') {\n        newPosition += incr;\n      }\n\n      if (event.key === 'Home') {\n        newPosition = 100;\n      }\n\n      if (event.key === 'End') {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(0, newPosition, 100);\n    }\n  }\n\n\n  /**\n   * @internal\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage (pixels) {\n    // @ts-expect-error\n    return (pixels / this.cachedWidth) * 100\n  }\n}\n", "// @ts-check\n\nimport HighlightJS from 'highlight.js/lib/core';\nimport HTML from 'highlight.js/lib/languages/xml';\nimport JavaScript from 'highlight.js/lib/languages/javascript';\nimport CSS from 'highlight.js/lib/languages/css';\nimport { theme } from './default-theme.styles.js'\nimport LightPreviewBase from './light-preview-base.js';\nimport { dedent } from '../internal/dedent.js';\n\nHighlightJS.registerLanguage('html', HTML);\nHighlightJS.registerLanguage('css', CSS);\nHighlightJS.registerLanguage('javascript', JavaScript);\n\n/**\n * LightPreview is a very lightweight code previewer designed to load your code sample\n *   inside of an iFrame for encapsulated viewing. `<light-preview>` uses HighlightJS as it's\n *   default highlighter, but has a base class intended for extending.\n * @customElement\n * @tagname light-preview\n * @extends LightPreviewBase\n */\nexport default class LightPreview extends LightPreviewBase {\n  static baseName = \"light-preview\"\n  static styles = LightPreviewBase.styles.concat([theme])\n\n  /**\n   * @override\n   */\n  highlight (code = this.code) {\n    return HighlightJS.highlight(dedent(this.unescapeCharacters(code)), {language: this.highlightLanguage}).value\n  }\n}\n"],
  "mappings": "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",
  "names": ["defaultSandboxSettings", "previewStyles", "i", "stringMap", "obj", "spacer", "strings", "key", "val", "debounce", "callback", "wait", "timeoutId", "args", "sourceCodeFallback", "LightPreviewBase", "BaseElement", "defaultSandboxSettings", "entries", "debounce", "_args", "targets", "target", "variable", "name", "slot", "shouldReset", "elements", "strings", "scratch", "el", "node", "code", "iframe", "content", "text", "changedProperties", "str", "left", "right", "width", "language", "x", "stringMap", "n", "o", "resizeIcon", "event", "halfWidth", "drag", "_y", "newPositionInPixels", "clamp", "resizePosition", "startWidth", "endWidth", "newPosition", "incr", "pixels", "__publicField", "baseStyles", "buttonStyles", "previewStyles", "core_default", "xml", "css", "javascript", "LightPreview", "LightPreviewBase", "code", "dedent", "__publicField", "theme"]
}
