{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directive-helpers.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/async-directive.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directives/ref.ts", "../../../../../exports/light-editor.styles.js", "../../../../../internal/base-event.js", "../../../../../exports/events/light-resize-event.js", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directives/repeat.ts", "../../../../../exports/light-editor.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback: WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n> = new WeakMap();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "import { css } from \"lit\"\n\nexport const styles = css`\n  :host {\n  }\n\n  [part~=\"base\"] {\n\t  font-family: Menlo, Monaco, \"Courier New\", monospace;\n    font-size: 1rem;\n    height: 15em;\n    width: 100%;\n    max-width: 100%;\n    max-height: 100%;\n    position: relative;\n    overflow: hidden;\n    resize: both;\n    font-size: normal;\n    font-family: monospace;\n    line-height: 1.5; /* Inherited to child elements */\n    tab-size: 2;\n    caret-color: black;\n    counter-reset: linenumber 0;\n    display: grid;\n    grid-template-columns: minmax(0, auto) minmax(0, 1fr);\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  [part~=\"textarea\"], [part~=\"pre\"], [part~=\"gutter\"] {\n    padding: 6px;\n  }\n\n  [part~=\"textarea\"] {\n    color: transparent;\n    background-color: transparent;\n    caret-color: inherit;\n    z-index: 1;\n    resize: none;\n  }\n\n  [part~=\"pre\"] {\n    border-color: transparent;\n    position: relative;\n  }\n\n  [part~=\"base\"]:focus-within {\n    outline: 2px solid dodgerblue;\n  }\n\n  [part~=\"textarea\"]:focus {\n    outline: transparent;\n  }\n\n  [part~=\"pre\"], [part~=\"textarea\"], [part~=\"code\"], [part~=\"gutter\"] {\n    /* I don't love this, but it fixes font size inconsistencies on mobile. The alternative is listen for font-size changes, which is...challenging. */\n    -webkit-text-size-adjust: 100%;\n    -moz-text-size-adjust: 100%;\n    text-size-adjust: 100%;\n\n    font-size: inherit;\n    font-family: inherit;\n    line-height: inherit;\n    tab-size: inherit;\n\n    /* this creates line-wrapping. */\n\t  word-break: break-word;\n    white-space: pre-wrap;\n\n    /* This would remove line-wrapping */\n\t  /* word-break: break-all; */\n    /* white-space: pre; */\n  }\n\n  /** Hide scrollbars for the gutter */\n  [part~=\"gutter\"]::-webkit-scrollbar { /* WebKit */\n    width: 0;\n    height: 0;\n  }\n\n  [part~=\"gutter\"] {\n    color: rgba(0,0,0,0.2);\n    font-variant-numeric: tabular-nums;\n    padding-inline-end: 16px;\n    padding-inline-start: 12px;\n    border-inline-end: 1px solid darkgray;\n    -webkit-text-size-adjust: 100%;\n    -moz-text-size-adjust: 100%;\n    text-size-adjust: 100%;\n    overflow-y: scroll;\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    font-size: inherit;\n    font-family: inherit;\n    line-height: inherit;\n    tab-size: inherit;\n\n    /* this creates line-wrapping. */\n\t  word-break: break-word;\n    white-space: pre-wrap;\n    text-align: end;\n  }\n\n  [part~=\"gutter-cell\"] {\n    font-size: 100%;\n    display: block;\n  }\n\n  [part~=\"gutter-cell\"] {\n    font-size: 100%;\n    display: block;\n  }\n\n  .light-line {\n    display: inline-block;\n    width: 100%;\n  }\n\n  [part~=\"base\"]:focus-within .light-line.active {\n    background-color: rgba(255, 247, 0, 0.1);\n  }\n\n  .light-line.active {\n    background-color: rgba(0,0,0,0.05);\n  }\n\n  [part~=\"base-editor\"] {\n    position: relative;\n    display: grid;\n    grid-template-columns: minmax(0, 1fr);\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  [part~=\"pre\"],\n  [part~=\"textarea\"] {\n    grid-area: 1/1/2/2;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    border: none;\n    overflow: auto;\n    border: 1px solid transparent;\n  }\n\n  [part~=\"gutter\"],\n  [part~=\"pre\"],\n  [part~=\"code\"] {\n\t  background-color: #f7f7f7;\n  }\n\n  [part~=\"pre\"],\n  [part~=\"code\"] {\n\t  color: #272727;\n  }\n\n  [part~=\"textarea\"]::selection {\n    color: inherit;\n    background-color: rgba(0,0,0,0.15);\n  }\n`\n", "export class BaseEvent extends Event {\n  /**\n   * @param {string} name\n   * @param {EventInit} [options={}]\n   */\n  constructor (name, options = {}) {\n    if (options.bubbles == null) options.bubbles = true\n    if (options.composed == null) options.composed = true\n    super(name, options)\n  }\n}\n", "// @ts-check\nimport { BaseEvent } from \"../../internal/base-event.js\"\n\nexport class LightResizeEvent extends BaseEvent {\n  /**\n   * @param {\"light-resize\" | Omit<string, \"light-resize\"> & string} [name=\"light-resize\"]\n   * @param {Partial<EventInit & { height: number, width: number }>} [options={}]\n   */\n  constructor (name = \"light-resize\", options = {}) {\n    super(name, options)\n\n    this.height = options.height\n    this.width = options.width\n  }\n}\n\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n", "import { html, render } from \"lit\";\nimport HighlightJS from 'highlight.js/lib/core';\nimport JavaScript from 'highlight.js/lib/languages/javascript';\nimport HTML from 'highlight.js/lib/languages/xml';\nimport CSS from 'highlight.js/lib/languages/css';\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ref } from \"lit/directives/ref.js\";\n\nimport { BaseElement } from \"../internal/base-element.js\";\nimport { baseStyles } from \"./base-styles.js\";\nimport { styles } from \"./light-editor.styles.js\";\nimport { theme } from \"./default-theme.styles.js\";\nimport { dedent } from \"../internal/dedent.js\";\nimport { LightResizeEvent } from \"./events/light-resize-event.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\n\nHighlightJS.registerLanguage('javascript', JavaScript);\nHighlightJS.registerLanguage('xml', HTML);\nHighlightJS.registerLanguage('css', CSS);\n\n/**\n * A bare bones plain text editor with syntax highlighting.\n * @customElement\n * @tagname light-editor\n *\n * @event {Event} light-change - Re-emits the textarea's \"change\" event\n * @event {Event} light-selectionchange - Re-emits the textarea's \"selectionchange\" event\n * @event {Event} light-input - Re-emits the textarea's \"input\" event\n *\n */\nexport default class LightEditor extends BaseElement {\n  static baseName = \"light-editor\"\n\n  static styles = [\n    baseStyles,\n    styles,\n    theme,\n  ]\n\n  // One day.\n  // static formAssociated = true\n\n  static properties = {\n    label: {},\n    value: {},\n    language: {reflect: true},\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * @type {string}\n     */\n    this.language = 'xml'\n\n    /**\n     * @type {string}\n     */\n    this.value = ''\n\n    /**\n     * @type {null | HTMLTextAreaElement}\n     */\n    this.textarea = null\n  }\n\n  render () {\n    const language = this.language\n\n    const highlightedCode = unsafeHTML(this.highlightCode({ code: this.value, language }))\n    this.syncScroll()\n\n    return html`\n\t\t\t<div class=\"base\" part=\"base\">\n        <!-- Super important to not have white space here due to how white space is handled -->\n\t\t\t  <div part=\"gutter\"></div>\n        <!-- This is where the fancy syntax highlighting comes in -->\n        <div part=\"base-editor\">\n\t\t\t\t  <pre\n            id=\"pre-${language}\"\n            data-code-lang=${language}\n            aria-hidden=\"true\"\n            part=\"pre pre-${language}\"\n          ><code\n              part=\"code code-${language}\"\n              class=\"language-${language}\"\n            >${highlightedCode}</code></pre>\n          <!-- IMPORTANT! There must be no white-space above. -->\n\t\t\t\t  <textarea\n            id=\"textarea-${language}\"\n            data-code-lang=${language}\n            part=\"textarea textarea-${language}\"\n            spellcheck=\"false\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            translate=\"no\"\n            ${ref(this.textareaChanged)}\n            @keydown=${this.keydownHandler}\n            @focus=${() => {\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-focus\", { bubbles: true, composed: true }))\n            }}\n\n            @blur=${() => {\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-blur\", { bubbles: true, composed: true }))\n            }}\n            @selectionchange=${/** @param {Event} e */ (e) => {\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-selectionchange\", { bubbles: true, composed: true }))\n            }}\n            @input=${/** @param {Event} e */ (e) => {\n              this.injectGutterCells()\n              this.setCurrentLineHighlight()\n              this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n              this.dispatchEvent(new Event(\"light-input\", { bubbles: true, composed: true }))\n              this.syncScroll()\n            }}\n            @change=${/** @param {Event} e */ (e) => {\n              this.injectGutterCells()\n              this.setCurrentLineHighlight()\n              this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n              this.dispatchEvent(new Event(\"light-change\", { bubbles: true, composed: true }))\n              this.syncScroll()\n            }}\n            @scroll=${/** @param {Event} e */ (e) => {\n              this.setCurrentLineHighlight()\n              this.syncScroll()\n            }}\n            .value=${this.value}\n          ></textarea>\n        </div> <!-- base-editor -->\n\t\t\t</div> <!-- base -->\n\n      <!-- Hidden slot for holding content -->\n      <slot hidden @slotchange=${this.handleSlotChangeEvent}></slot>\n\t\t`\n  }\n\n  /**\n   * @ignore\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleTextAreaResize (entries) {\n    const { target } = entries[0]\n    const {\n      left, right,\n      top, bottom\n    } = entries[0].contentRect;\n    const width = left + right\n    const height = top + bottom;\n\n\n    /**\n     * Fires whenever the editor resizes, usually due to zoom in / out\n     */\n    this.dispatchEvent(new LightResizeEvent(\"light-resize\", {height, width}));\n    this.syncScroll()\n    this.injectGutterCells()\n  }\n\n  /**\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  updated (changedProperties) {\n    super.updated(changedProperties)\n\n    this.syncScroll()\n    this.injectGutterCells()\n    this.setCurrentLineHighlight()\n  }\n\n  /**\n   * Syncs the `<pre>` element scroll position to the same as the `<textarea>`\n   * @internal\n   */\n  syncScroll () {\n    /**\n     * @type {undefined | null | HTMLTextAreaElement}\n     */\n    const textarea = this.shadowRoot?.querySelector(\"textarea\")\n\n    if (textarea == null) return\n\n    const pre = this.shadowRoot?.querySelector(`pre`)\n\n    if (pre) {\n      pre.scrollTop = textarea.scrollTop;\n      pre.scrollLeft = textarea.scrollLeft;\n    }\n\n    const gutter = this.shadowRoot?.querySelector(\"[part~='gutter']\")\n\n    if (gutter) {\n      gutter.scrollTop = textarea.scrollTop;\n      gutter.scrollLeft = textarea.scrollLeft;\n    }\n  }\n\n  /**\n   * @ignore\n   * @param {Element | undefined} element\n   */\n  textareaChanged (element) {\n    if (!(element instanceof HTMLTextAreaElement)) {\n      return\n    }\n\n    const textarea = element\n    this.textarea = textarea\n\n    this.textareaResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    this.textareaResizeObserver.observe(textarea)\n\n    this.textareaMutationObserver = new MutationObserver((mutationRecords) => {\n      // We actually don't care about what the mutation is, just update and move on.\n      // for (const mutation of mutationRecords) {\n      // }\n      this.value = textarea.value\n    })\n\n    this.textareaMutationObserver.observe(textarea, {\n      characterData: true,\n      subtree: true\n    })\n  }\n\n  /**\n   * @ignore\n   * @param {Event} e\n   */\n  handleSlotChangeEvent (e) {\n    // @TODO: Attach mutations observers to update value.\n    /**\n     * @type {HTMLSlotElement}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    const templates = slot.assignedElements({flatten: true})\n\n    const code = dedent(this.unescapeCharacters(templates.map((template) => template.innerHTML).join(\"\\n\")))\n\n    if (code.trim()) {\n      this.value = code\n      this.dispatchEvent(new Event(\"light-input\", { bubbles: true, composed: true }))\n      this.dispatchEvent(new Event(\"light-change\", { bubbles: true, composed: true }))\n    }\n  }\n\n  disconnectedCallback () {\n    this.textareaMutationObserver?.disconnect()\n    super.disconnectedCallback()\n  }\n\n  /**\n   * @ignore\n   * @param {KeyboardEvent} evt\n   */\n  keydownHandler(evt) {\n    this.setCurrentLineHighlight()\n    // this.textarea\n\n    // Let's not trap focus. For now.\n    // if ('Tab' === evt.key) {\n    //   evt.preventDefault()\n    //   target.setRangeText('\\t', target.selectionStart, target.selectionEnd, 'end')\n    //   this.value = target.value\n    //   return\n    // }\n  }\n\n  setCurrentLineHighlight () {\n    const code = this.shadowRoot?.querySelector(\"code\")\n\n    if (!code) return\n\n    const currentLineNumber = this.getCurrentLineNumber()\n\n    if (this.currentLineNumber === currentLineNumber) return\n\n    // @ts-expect-error\n    this.currentLineNumber = currentLineNumber\n\n    if (currentLineNumber != null && currentLineNumber >= 0) {\n      if (this.currentEl) {\n        this.currentEl.classList.remove(\"active\")\n      }\n\n      const el = code.children[currentLineNumber]\n      this.currentEl = el\n      el.classList.add(\"active\")\n    }\n  }\n\n  /**\n   * @ignore\n   * Override this to use a highlighter of your choice.\n   * @param {{code: string, language: string}} options\n   */\n  highlightCode (options) {\n    let { code, language } = options\n\n    code = this.unescapeCharacters(code)\n    code = this.injectNewLine(code)\n\n    code = HighlightJS.highlight(code, {language}).value\n\n    const newLineRegex = /\\n(?!$)/\n    /** We use this to wrap every line to perform line counting operations. */\n    code = code.split(newLineRegex).map((str) => {\n      return `<span class=\"light-line\">${str}</span>`\n    }).join(\"\\n\")\n\n    return code\n  }\n\n  injectGutterCells () {\n    const gutter = this.shadowRoot?.querySelector(\"[part~='gutter']\")\n\n    if (gutter) {\n      render(this.renderGutterCells(), /** @type {HTMLElement} */ (gutter))\n    }\n  }\n\n  getCurrentLineNumber () {\n    const textArea = this.textarea\n\n    if (!textArea) return\n\n    const textLines = textArea.value.substr(0, textArea.selectionStart).split(\"\\n\");\n    const currentLineNumber = textLines.length - 1;\n    // const currentColumnIndex = textLines[textLines.length-1].length;\n    // console.log(\"Current Line Number \"+ currentLineNumber+\" Current Column Index \"+currentColumnIndex );\n\n    return currentLineNumber\n  }\n\n  renderGutterCells () {\n    const lines = this.shadowRoot?.querySelector(\"pre > code\")?.children\n\n    if (!lines) return ``\n\n    const ary = Array.from(lines)\n\n    return repeat(ary, (el, index) => {\n      // @ts-expect-error\n      const height = /** @type {number} */ (el.offsetHeight)\n\n      return index + height\n    }, (el ,index) => {\n      // @ts-expect-error\n      const height = /** @type {number} */ (el.offsetHeight)\n\n      if (height) {\n        return html`<span part=\"gutter-cell\" style=\"${`height: ${height}px`}\">${index}</span>`\n      }\n\n      return html`<span part=\"gutter-cell\">${index}</span>`\n    })\n  }\n\n  /**\n   * @ignore\n   * @param {string} text\n   */\n  unescapeCharacters (text) {\n    // Update code\n    return text.replaceAll(\"&lt;/script>\", \"</script>\")\n  }\n\n  /**\n   * @ignore\n   * Highlighters strip newlines. But you can see new lines in <textarea>, this fixes that.\n   * @param {string} text\n   */\n  injectNewLine (text) {\n    // Handle final newlines (see article)\n    if(text === \"\" || text[text.length-1] === \"\\n\") { // If the last character is a newline character\n      text += \" \"; // Add a placeholder space character to the final line\n    }\n\n    return text\n  }\n}\n"],
  "mappings": "yRAqBA,GAAA,CAAOA,EAAYC,EAAAA,EAAaC,EAAhC,IAgFaC,EAAsBC,GAChCA,EAA2BC,UADKD,OAG7BE,EAAe,IAAMC,SAASC,cAAc,EAAA,EAcrCC,EAAa,CACxBC,EACAC,EACAP,IAAAA,CAAAA,IAAAA,EAEA,IAAMQ,EAAiBF,EAAcG,KAAaC,WAE5CC,EACJJ,IADII,OACoBL,EAAcM,KAAYL,EAAQE,KAE5D,GAAIT,IAAJ,OAAwB,CACtB,IAAMa,EAAiBL,EAAWM,aAAaZ,EAAAA,EAAgBS,CAAAA,EACzDI,EAAeP,EAAWM,aAAaZ,EAAAA,EAAgBS,CAAAA,EAC7DX,EAAO,IAAIgB,GACTH,EACAE,EACAT,EACAA,EAAcW,OAAAA,CAEjB,KAAM,CACL,IAAMF,EAAef,EAAKY,KAAYM,YAChCC,EAAYnB,EAAKoB,KACjBC,EAAgBF,IAAcb,EACpC,GAAIe,EAAe,CAUjB,IAAIC,GATJC,EAAAvB,EAAKwB,QAA4B,MAAAD,IAA5BC,QAA4BD,EAAAE,KAAAzB,EAAAM,CAAAA,EAKjCN,EAAKoB,KAAWd,EAMdN,EAAK0B,OANSpB,SAObgB,EAAqBhB,EAAcqB,QAClCR,EAAWQ,MAEb3B,EAAK0B,KAA0BJ,CAAAA,CAElC,CACD,GAAIP,IAAYJ,GAAWU,EAAe,CACxC,IAAIO,EAAqB5B,EAAKS,KAC9B,KAAOmB,IAAUb,GAAS,CACxB,IAAMc,EAAsBD,EAAQV,YAC/BV,EAAWM,aAAac,EAAQjB,CAAAA,EACrCiB,EAAQC,CACT,CACF,CACF,CAED,OAAO7B,CAAI,EAmBA8B,EAAoB,CAC/B9B,EACA+B,EACAC,EAAmChC,KAEnCA,EAAKiC,KAAWF,EAAOC,CAAAA,EAChBhC,GAKHkC,GAAc,CAAA,EAaPC,EAAoB,CAACnC,EAAY+B,EAAiBG,KAC5DlC,EAAKoC,KAAmBL,EAgBdM,EAAqBrC,GAAoBA,EAAKoC,KAO9CE,EAActC,GAAAA,CAAAA,IAAAA,GACzBuB,EAAAvB,EAAK0B,QAAyB,MAAAH,IAAzBG,QAAyBH,EAAAE,KAAAzB,EAAAA,GAAG,EAAO,EACxC,IAAI4B,EAA0B5B,EAAKS,KAC7B8B,EAA6BvC,EAAKY,KAAYM,YACpD,KAAOU,IAAUW,GAAK,CACpB,IAAMV,EAA2BD,EAAQV,YACnCU,EAAsBY,OAAAA,EAC5BZ,EAAQC,CACT,CAAA,EC/GH,IAAMY,EAAiC,CACrCC,EACAC,IAAAA,CAAAA,IAAAA,EAAAA,EAEA,IAAMC,EAAWF,EAAOG,KACxB,GAAID,IAAJ,OACE,MAAA,GAEF,QAAWE,KAAOF,GAShBG,GAAAC,EAACF,GAA2D,QAT5CF,MAS4CK,IAAA,QAAAA,EAAA,KAAAC,EAC1DP,EAAAA,EACA,EAGFF,EAA+BK,EAAKH,CAAAA,EAEtC,MAAA,EAAW,EASPQ,EAAkCL,GAAAA,CACtC,IAAIJ,EAAQE,EACZ,EAAG,CACD,IAAKF,EAASI,EAAIM,QAAlB,OACE,MAEFR,EAAWF,EAAOG,KAClBD,EAASS,OAAOP,CAAAA,EAChBA,EAAMJ,CAAAA,OACCE,GAAUU,OAAS,EAAG,EAG3BC,EAA6BT,GAAAA,CAGjC,QAASJ,EAASA,EAASI,EAAIM,KAAWN,EAAMJ,EAAQ,CACtD,IAAIE,EAAWF,EAAOG,KACtB,GAAID,IAAJ,OACEF,EAAOG,KAA2BD,EAAW,IAAIY,YACxCZ,EAASa,IAAIX,CAAAA,EAGtB,MAEFF,EAASc,IAAIZ,CAAAA,EACba,GAAqBjB,CAAAA,CACtB,CAAA,EAUH,SAASkB,GAAyCC,EAAAA,CAC5CC,KAAKjB,OADuCgB,QAE9CV,EAA+BW,IAAAA,EAC/BA,KAAKV,KAAWS,EAChBN,EAA0BO,IAAAA,GAE1BA,KAAKV,KAAWS,CAEpB,CAuBA,SAASE,GAEPpB,EACAqB,EAAAA,GACAC,EAAgB,EAAA,CAEhB,IAAMC,EAAQJ,KAAKK,KACbvB,EAAWkB,KAAKjB,KACtB,GAAID,IAAJ,QAA8BA,EAASU,OAAS,EAGhD,GAAIU,EACF,GAAII,MAAMC,QAAQH,CAAAA,EAIhB,QAASI,EAAIL,EAAeK,EAAIJ,EAAMK,OAAQD,IAC5C7B,EAA+ByB,EAAMI,CAAAA,EAAAA,EAAI,EACzCnB,EAA+Be,EAAMI,CAAAA,CAAAA,OAE9BJ,GAAS,OAIlBzB,EAA+ByB,EAAAA,EAAyB,EACxDf,EAA+Be,CAAAA,QAGjCzB,EAA+BqB,KAAMnB,CAAAA,CAEzC,CAKA,IAAMgB,GAAwBb,GAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EACvBA,EAAkB0B,MAAQC,EAASC,SACtC1B,GAAA2B,EAAC7B,GAAkB8B,QADmBF,MACnBE,IAAAA,SAAAA,EAAAA,KACjBb,KACFhB,GAAA8B,EAAC/B,GAAkBgC,QADjBf,MACiBe,IAAAA,SAAAA,EAAAA,KAA8BlB,IAClD,EAoBmBmB,EAAhB,cAAuCC,CAAAA,CAA7CC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EAYWnB,KAAwBjB,KAAAA,MAgFlC,CAzEUqC,KACPC,EACAzC,EACA0C,EAAAA,CAEAC,MAAMH,KAAaC,EAAMzC,EAAQ0C,CAAAA,EACjC7B,EAA0BO,IAAAA,EAC1BA,KAAKnB,YAAcwC,EAAKG,IACzB,CAcQC,KACP5C,EACA6C,EAAAA,GAAsB,CAAA,IAAAtC,EAAAuC,EAElB9C,IAAgBmB,KAAKnB,cACvBmB,KAAKnB,YAAcA,EACfA,GACFK,EAAAc,KAAK4B,eAAW,MAAA1C,IAAX0C,QAAW1C,EAAA2C,KAAA7B,IAAAA,GAEhBf,EAAAe,KAAK8B,gBAAY,MAAA7C,IAAZ6C,QAAY7C,EAAA4C,KAAA7B,IAAAA,GAGjB0B,IACF/C,EAA+BqB,KAAMnB,CAAAA,EACrCQ,EAA+BW,IAAAA,EAElC,CAYD+B,SAAS3B,EAAAA,CACP,GAAI4B,EAAmBhC,KAAKiC,IAAAA,EAC1BjC,KAAKiC,KAAOC,KAAW9B,EAAOJ,IAAAA,MACzB,CAML,IAAMmC,EAAY,CAAA,GAAKnC,KAAKiC,KAAO5B,IAAAA,EACnC8B,EAAUnC,KAAKoC,IAAAA,EAAqBhC,EACnCJ,KAAKiC,KAAyBC,KAAWC,EAAWnC,KAAM,CAAA,CAC5D,CACF,CAQS8B,cAAAA,CAAiB,CACjBF,aAAAA,CAAgB,CAAA,EC9V5B,IAAMS,EAGF,IAAIC,QA+GKC,EAAMC,EA3GnB,cAA2BC,CAAAA,CAKzBC,OAAOC,EAAAA,CACL,OAAOC,CACR,CAEQC,OAAOC,EAAAA,CAAoBP,CAAAA,EAAAA,CAAAA,IAAAA,EAClC,IAAMQ,EAAaR,IAAQS,KAAKL,EAahC,OAZII,GAAcC,KAAKL,IAAnBI,QAGFC,KAAKC,GAAAA,MAAgBC,GAEnBH,GAAcC,KAAKG,KAAuBH,KAAKI,MAGjDJ,KAAKL,EAAOJ,EACZS,KAAKK,IAAWC,EAAAR,EAAKS,WAAS,MAAAD,IAATC,OAASD,OAAAA,EAAAE,KAC9BR,KAAKC,GAAiBD,KAAKI,GAAWN,EAAKW,OAAAA,GAEtCb,CACR,CAEOK,GAAgBQ,EAAAA,CAAAA,IAAAA,EACtB,GAAyB,OAAdT,KAAKL,GAAS,WAAY,CAUnC,IAAMe,GAAUJ,EAAAN,KAAKK,MAAQ,MAAAC,IAARD,OAAQC,EAAIK,WAC7BC,EACFvB,EAAiCwB,IAAIH,CAAAA,EACnCE,IADmCF,SAErCE,EAAyB,IAAItB,QAC7BD,EAAiCyB,IAAIJ,EAASE,CAAAA,GAE5CA,EAAuBC,IAAIb,KAAKL,CAAAA,IAFYiB,QAG9CZ,KAAKL,EAAKoB,KAAKf,KAAKK,GAAAA,MAAUH,EAEhCU,EAAuBE,IAAId,KAAKL,EAAMc,CAAAA,EAElCA,IAFkCA,QAGpCT,KAAKL,EAAKoB,KAAKf,KAAKK,GAAUI,CAAAA,CAEjC,MACET,KAAKL,EAAsBqB,MAAQP,CAEvC,CAEWN,IAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACV,OAA4B,OAAdH,KAAKL,GAAS,YAEWsB,EADnC5B,EACGwB,KAAIP,EAAAN,KAAKK,MAAY,MAAAC,IAAZD,OAAYC,EAAAK,UAAAA,KAAW,MAAAO,IAAXP,OAAWO,OAAAA,EAC/BL,IAAIb,KAAKL,CAAAA,GACbwB,EAAAnB,KAAKL,KAAI,MAAAwB,IAAJxB,OAAIwB,OAAAA,EAAEH,KAChB,CAEQI,cAAAA,CAKHpB,KAAKG,KAAuBH,KAAKI,IACnCJ,KAAKC,GAAAA,MAAgBC,CAExB,CAEQmB,aAAAA,CAGPrB,KAAKC,GAAgBD,KAAKI,EAAAA,CAC3B,CAAA,CAAA,ECvHI,IAAMkf,IAAMC,EAAN,cAAwB,KAAM,CAKnC,YAAaC,EAAMC,EAAU,CAAC,EAAG,CAC3BA,EAAQ,SAAW,OAAMA,EAAQ,QAAU,IAC3CA,EAAQ,UAAY,OAAMA,EAAQ,SAAW,IACjD,MAAMD,EAAMC,CAAO,CACrB,CACF,ECPO,IAAMC,EAAN,cAA+BC,CAAU,CAK9C,YAAaC,EAAO,eAAgBC,EAAU,CAAC,EAAG,CAChD,MAAMD,EAAMC,CAAO,EAEnB,KAAK,OAASA,EAAQ,OACtB,KAAK,MAAQA,EAAQ,KACvB,CACF,ECQA,IAAMC,GAAc,CAACC,EAAiBC,EAAeC,IAAAA,CACnD,IAAMC,EAAM,IAAIC,IAChB,QAASC,EAAIJ,EAAOI,GAAKH,EAAKG,IAC5BF,EAAIG,IAAIN,EAAKK,CAAAA,EAAIA,CAAAA,EAEnB,OAAOF,CAAG,EAqcCI,GAASC,EAlctB,cAA8BC,CAAAA,CAG5BC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EACFA,EAASE,OAASC,EAASC,MAC7B,MAAUC,MAAM,+CAAA,CAEnB,CAEOC,GACNC,EACAC,EACAC,EAAAA,CAEA,IAAIC,EACAD,IADAC,OAEFD,EAAWD,EACFA,IADEA,SAEXE,EAAQF,GAEV,IAAMG,EAAO,CAAA,EACPC,EAAS,CAAA,EACXC,EAAQ,EACZ,QAAWC,KAAQP,EACjBI,EAAKE,CAAAA,EAASH,EAAQA,EAAMI,EAAMD,CAAAA,EAASA,EAC3CD,EAAOC,CAAAA,EAASJ,EAAUK,EAAMD,CAAAA,EAChCA,IAEF,MAAO,CACLD,OAAAA,EACAD,KAAAA,CAAAA,CAEH,CAQDI,OACER,EACAC,EACAC,EAAAA,CAEA,OAAOO,KAAKV,GAAkBC,EAAOC,EAAiBC,CAAAA,EAAUG,MACjE,CAEQK,OACPC,EAAAA,CACCX,EAAOC,EAAiBC,CAAAA,EAAAA,CAAAA,IAAAA,EAQzB,IAAMU,EAAWC,EACfF,CAAAA,EAAAA,CAEKN,OAAQS,EAAWV,KAAMW,CAAAA,EAAWN,KAAKV,GAC9CC,EACAC,EACAC,CAAAA,EAQF,GAAA,CAAKc,MAAMC,QAAQL,CAAAA,EAEjB,OADAH,KAAKS,GAAYH,EACVD,EAQT,IAAMK,GAAWC,EAAAX,KAAKS,MAAL,MAAAE,IAAKF,OAALE,EAAAX,KAAKS,GAAc,CAAA,EAK9BG,EAAwB,CAAA,EAM1BC,EACAC,EAGAC,EAAU,EACVC,EAAUb,EAASc,OAAS,EAC5BC,EAAU,EACVC,EAAUd,EAAUY,OAAS,EAsMjC,KAAOF,GAAWC,GAAWE,GAAWC,GACtC,GAAIhB,EAASY,CAAAA,IAAa,KAGxBA,YACSZ,EAASa,CAAAA,IAAa,KAG/BA,YACSN,EAAQK,CAAAA,IAAaT,EAAQY,CAAAA,EAEtCN,EAASM,CAAAA,EAAWE,EAClBjB,EAASY,CAAAA,EACTV,EAAUa,CAAAA,CAAAA,EAEZH,IACAG,YACSR,EAAQM,CAAAA,IAAaV,EAAQa,CAAAA,EAEtCP,EAASO,CAAAA,EAAWC,EAClBjB,EAASa,CAAAA,EACTX,EAAUc,CAAAA,CAAAA,EAEZH,IACAG,YACST,EAAQK,CAAAA,IAAaT,EAAQa,CAAAA,EAEtCP,EAASO,CAAAA,EAAWC,EAClBjB,EAASY,CAAAA,EACTV,EAAUc,CAAAA,CAAAA,EAEZE,EAAWnB,EAAeU,EAASO,EAAU,CAAA,EAAIhB,EAASY,CAAAA,CAAAA,EAC1DA,IACAI,YACST,EAAQM,CAAAA,IAAaV,EAAQY,CAAAA,EAEtCN,EAASM,CAAAA,EAAWE,EAClBjB,EAASa,CAAAA,EACTX,EAAUa,CAAAA,CAAAA,EAEZG,EAAWnB,EAAeC,EAASY,CAAAA,EAAWZ,EAASa,CAAAA,CAAAA,EACvDA,IACAE,YAEIL,IAMJ,SAHEA,EAAmBzC,GAAYkC,EAASY,EAASC,CAAAA,EACjDL,EAAmB1C,GAAYsC,EAASK,EAASC,CAAAA,GAE9CH,EAAiBS,IAAIZ,EAAQK,CAAAA,CAAAA,EAI3B,GAAKF,EAAiBS,IAAIZ,EAAQM,CAAAA,CAAAA,EAIlC,CAIL,IAAMO,EAAWT,EAAiBU,IAAIlB,EAAQY,CAAAA,CAAAA,EACxCO,EAAUF,IAAVE,OAAmCtB,EAASoB,CAAAA,EAAY,KAC9D,GAAIE,IAAY,KAAM,CAGpB,IAAMC,EAAUL,EAAWnB,EAAeC,EAASY,CAAAA,CAAAA,EACnDK,EAAkBM,EAASrB,EAAUa,CAAAA,CAAAA,EACrCN,EAASM,CAAAA,EAAWQ,CACrB,MAECd,EAASM,CAAAA,EAAWE,EAAkBK,EAASpB,EAAUa,CAAAA,CAAAA,EACzDG,EAAWnB,EAAeC,EAASY,CAAAA,EAAWU,CAAAA,EAG9CtB,EAASoB,CAAAA,EAAsB,KAEjCL,GACD,MAvBCS,EAAWxB,EAASa,CAAAA,CAAAA,EACpBA,SALAW,EAAWxB,EAASY,CAAAA,CAAAA,EACpBA,IA8BN,KAAOG,GAAWC,GAAS,CAGzB,IAAMO,EAAUL,EAAWnB,EAAeU,EAASO,EAAU,CAAA,CAAA,EAC7DC,EAAkBM,EAASrB,EAAUa,CAAAA,CAAAA,EACrCN,EAASM,GAAAA,EAAaQ,CACvB,CAED,KAAOX,GAAWC,GAAS,CACzB,IAAMS,EAAUtB,EAASY,GAAAA,EACrBU,IAAY,MACdE,EAAWF,CAAAA,CAEd,CAMD,OAHAzB,KAAKS,GAAYH,EAEjBsB,EAAkB1B,EAAeU,CAAAA,EAC1BiB,CACR,CAAA,CAAA,EChaHC,EAAY,iBAAiB,aAAcC,CAAU,EACrDD,EAAY,iBAAiB,MAAOE,CAAI,EACxCF,EAAY,iBAAiB,MAAOG,CAAG,EAYvC,IAAqBC,EAArB,cAAyCC,CAAY,CAkBnD,aAAe,CACb,MAAM,EAKN,KAAK,SAAW,MAKhB,KAAK,MAAQ,GAKb,KAAK,SAAW,IAClB,CAEA,QAAU,CACR,IAAMC,EAAW,KAAK,SAEhBC,EAAkBC,EAAW,KAAK,cAAc,CAAE,KAAM,KAAK,MAAO,SAAAF,CAAS,CAAC,CAAC,EACrF,YAAK,WAAW,EAETG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOWH,CAAQ;AAAA,6BACDA,CAAQ;AAAA;AAAA,4BAETA,CAAQ;AAAA;AAAA,gCAEJA,CAAQ;AAAA,gCACRA,CAAQ;AAAA,eACzBC,CAAe;AAAA;AAAA;AAAA,2BAGHD,CAAQ;AAAA,6BACNA,CAAQ;AAAA,sCACCA,CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,cAKhCI,EAAI,KAAK,eAAe,CAAC;AAAA,uBAChB,KAAK,cAAc;AAAA,qBACrB,IAAM,CACb,KAAK,WAAW,EAChB,KAAK,wBAAwB,EAC7B,KAAK,cAAc,IAAI,MAAM,cAAe,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAChF,CAAC;AAAA;AAAA,oBAEO,IAAM,CACZ,KAAK,WAAW,EAChB,KAAK,wBAAwB,EAC7B,KAAK,cAAc,IAAI,MAAM,aAAc,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAC/E,CAAC;AAAA,+BAC2CC,GAAM,CAChD,KAAK,WAAW,EAChB,KAAK,wBAAwB,EAC7B,KAAK,cAAc,IAAI,MAAM,wBAAyB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAC1F,CAAC;AAAA,qBACiCA,GAAM,CACtC,KAAK,kBAAkB,EACvB,KAAK,wBAAwB,EAC7B,KAAK,MAA4CA,EAAE,cAAe,MAClE,KAAK,cAAc,IAAI,MAAM,cAAe,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,EAC9E,KAAK,WAAW,CAClB,CAAC;AAAA,sBACkCA,GAAM,CACvC,KAAK,kBAAkB,EACvB,KAAK,wBAAwB,EAC7B,KAAK,MAA4CA,EAAE,cAAe,MAClE,KAAK,cAAc,IAAI,MAAM,eAAgB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,EAC/E,KAAK,WAAW,CAClB,CAAC;AAAA,sBACkCA,GAAM,CACvC,KAAK,wBAAwB,EAC7B,KAAK,WAAW,CAClB,CAAC;AAAA,qBACQ,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAME,KAAK,qBAAqB;AAAA,GAEzD,CAMA,qBAAsBC,EAAS,CAC7B,GAAM,CAAE,OAAAC,CAAO,EAAID,EAAQ,CAAC,EACtB,CACJ,KAAAE,EAAM,MAAAC,EACN,IAAAC,EAAK,OAAAC,CACP,EAAIL,EAAQ,CAAC,EAAE,YACTM,EAAQJ,EAAOC,EACfI,EAASH,EAAMC,EAMrB,KAAK,cAAc,IAAIG,EAAiB,eAAgB,CAAC,OAAAD,EAAQ,MAAAD,CAAK,CAAC,CAAC,EACxE,KAAK,WAAW,EAChB,KAAK,kBAAkB,CACzB,CAKA,QAASG,EAAmB,CAC1B,MAAM,QAAQA,CAAiB,EAE/B,KAAK,WAAW,EAChB,KAAK,kBAAkB,EACvB,KAAK,wBAAwB,CAC/B,CAMA,YAAc,CAIZ,IAAMC,EAAW,KAAK,YAAY,cAAc,UAAU,EAE1D,GAAIA,GAAY,KAAM,OAEtB,IAAMC,EAAM,KAAK,YAAY,cAAc,KAAK,EAE5CA,IACFA,EAAI,UAAYD,EAAS,UACzBC,EAAI,WAAaD,EAAS,YAG5B,IAAME,EAAS,KAAK,YAAY,cAAc,kBAAkB,EAE5DA,IACFA,EAAO,UAAYF,EAAS,UAC5BE,EAAO,WAAaF,EAAS,WAEjC,CAMA,gBAAiBG,EAAS,CACxB,GAAI,EAAEA,aAAmB,qBACvB,OAGF,IAAMH,EAAWG,EACjB,KAAK,SAAWH,EAEhB,KAAK,uBAAyB,IAAI,eAAgBV,GAAY,KAAK,qBAAqBA,CAAO,CAAC,EAEhG,KAAK,uBAAuB,QAAQU,CAAQ,EAE5C,KAAK,yBAA2B,IAAI,iBAAkBI,GAAoB,CAIxE,KAAK,MAAQJ,EAAS,KACxB,CAAC,EAED,KAAK,yBAAyB,QAAQA,EAAU,CAC9C,cAAe,GACf,QAAS,EACX,CAAC,CACH,CAMA,sBAAuB,EAAG,CAQxB,IAAMK,EAFO,EAAE,OAEQ,iBAAiB,CAAC,QAAS,EAAI,CAAC,EAEjDC,EAAOC,EAAO,KAAK,mBAAmBF,EAAU,IAAKG,GAAaA,EAAS,SAAS,EAAE,KAAK;AAAA,CAAI,CAAC,CAAC,EAEnGF,EAAK,KAAK,IACZ,KAAK,MAAQA,EACb,KAAK,cAAc,IAAI,MAAM,cAAe,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,EAC9E,KAAK,cAAc,IAAI,MAAM,eAAgB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,EAEnF,CAEA,sBAAwB,CACtB,KAAK,0BAA0B,WAAW,EAC1C,MAAM,qBAAqB,CAC7B,CAMA,eAAeG,EAAK,CAClB,KAAK,wBAAwB,CAU/B,CAEA,yBAA2B,CACzB,IAAMH,EAAO,KAAK,YAAY,cAAc,MAAM,EAElD,GAAI,CAACA,EAAM,OAEX,IAAMI,EAAoB,KAAK,qBAAqB,EAEpD,GAAI,KAAK,oBAAsBA,IAG/B,KAAK,kBAAoBA,EAErBA,GAAqB,MAAQA,GAAqB,GAAG,CACnD,KAAK,WACP,KAAK,UAAU,UAAU,OAAO,QAAQ,EAG1C,IAAMC,EAAKL,EAAK,SAASI,CAAiB,EAC1C,KAAK,UAAYC,EACjBA,EAAG,UAAU,IAAI,QAAQ,CAC3B,CACF,CAOA,cAAeC,EAAS,CACtB,GAAI,CAAE,KAAAN,EAAM,SAAAtB,CAAS,EAAI4B,EAEzBN,EAAO,KAAK,mBAAmBA,CAAI,EACnCA,EAAO,KAAK,cAAcA,CAAI,EAE9BA,EAAO5B,EAAY,UAAU4B,EAAM,CAAC,SAAAtB,CAAQ,CAAC,EAAE,MAE/C,IAAM6B,EAAe,UAErB,OAAAP,EAAOA,EAAK,MAAMO,CAAY,EAAE,IAAKC,GAC5B,4BAA4BA,CAAG,SACvC,EAAE,KAAK;AAAA,CAAI,EAELR,CACT,CAEA,mBAAqB,CACnB,IAAMJ,EAAS,KAAK,YAAY,cAAc,kBAAkB,EAE5DA,GACF,EAAO,KAAK,kBAAkB,EAA+BA,CAAO,CAExE,CAEA,sBAAwB,CACtB,IAAMa,EAAW,KAAK,SAEtB,OAAKA,EAEaA,EAAS,MAAM,OAAO,EAAGA,EAAS,cAAc,EAAE,MAAM;AAAA,CAAI,EAC1C,OAAS,EAH9B,MAQjB,CAEA,mBAAqB,CACnB,IAAMC,EAAQ,KAAK,YAAY,cAAc,YAAY,GAAG,SAE5D,GAAI,CAACA,EAAO,MAAO,GAEnB,IAAMC,EAAM,MAAM,KAAKD,CAAK,EAE5B,OAAOE,GAAOD,EAAK,CAACN,EAAIQ,IAAU,CAEhC,IAAMtB,EAAgCc,EAAG,aAEzC,OAAOQ,EAAQtB,CACjB,EAAG,CAACc,EAAIQ,IAAU,CAEhB,IAAMtB,EAAgCc,EAAG,aAEzC,OAAId,EACKV,oCAAuC,WAAWU,CAAM,IAAI,KAAKsB,CAAK,UAGxEhC,6BAAgCgC,CAAK,SAC9C,CAAC,CACH,CAMA,mBAAoBC,EAAM,CAExB,OAAOA,EAAK,WAAW,eAAgB,YAAW,CACpD,CAOA,cAAeA,EAAM,CAEnB,OAAGA,IAAS,IAAMA,EAAKA,EAAK,OAAO,CAAC,IAAM;AAAA,KACxCA,GAAQ,KAGHA,CACT,CACF,EAtWEC,EADmBvC,EACZ,WAAW,gBAElBuC,EAHmBvC,EAGZ,SAAS,CACdwC,EACAC,GACAC,CACF,GAKAH,EAZmBvC,EAYZ,aAAa,CAClB,MAAO,CAAC,EACR,MAAO,CAAC,EACR,SAAU,CAAC,QAAS,EAAI,CAC1B",
  "names": ["_ChildPart", "ChildPart", "_$LH", "isSingleExpression", "part", "strings", "createMarker", "document", "createComment", "insertPart", "containerPart", "refPart", "container", "_$startNode", "parentNode", "refNode", "_$endNode", "startNode", "insertBefore", "endNode", "ChildPart", "options", "nextSibling", "oldParent", "_$parent", "parentChanged", "newConnectionState", "_a", "_$reparentDisconnectables", "call", "_$notifyConnectionChanged", "_$isConnected", "start", "n", "setChildPartValue", "value", "directiveParent", "_$setValue", "RESET_VALUE", "setCommittedValue", "_$committedValue", "getCommittedValue", "removePart", "end", "remove", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "_b", "_a", "o", "e", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_c", "_$notifyConnectionChanged", "_d", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "_$initialize", "part", "attributeIndex", "super", "_$isConnected", "_$AO", "isClearingDirective", "r", "reconnected", "call", "disconnected", "setValue", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "render", "_ref", "nothing", "update", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "_a", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "t", "_b", "_c", "disconnected", "reconnected", "styles", "i", "BaseEvent", "name", "options", "LightResizeEvent", "BaseEvent", "name", "options", "generateMap", "list", "start", "end", "map", "Map", "i", "set", "repeat", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "CHILD", "Error", "_getValuesAndKeys", "items", "keyFnOrTemplate", "template", "keyFn", "keys", "values", "index", "item", "render", "this", "update", "containerPart", "oldParts", "getCommittedValue", "newValues", "newKeys", "Array", "isArray", "_itemKeys", "oldKeys", "_a", "newParts", "newKeyToIndexMap", "oldKeyToIndexMap", "oldHead", "oldTail", "length", "newHead", "newTail", "setChildPartValue", "insertPart", "has", "oldIndex", "get", "oldPart", "newPart", "removePart", "setCommittedValue", "noChange", "core_default", "javascript", "xml", "css", "LightEditor", "BaseElement", "language", "highlightedCode", "o", "x", "n", "e", "entries", "target", "left", "right", "top", "bottom", "width", "height", "LightResizeEvent", "changedProperties", "textarea", "pre", "gutter", "element", "mutationRecords", "templates", "code", "dedent", "template", "evt", "currentLineNumber", "el", "options", "newLineRegex", "str", "textArea", "lines", "ary", "c", "index", "text", "__publicField", "baseStyles", "styles", "theme"]
}
