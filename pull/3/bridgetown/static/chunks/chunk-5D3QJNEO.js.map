{
  "version": 3,
  "sources": ["../../../../../exports/light-pen.styles.js", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directive-helpers.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/async-directive.ts", "../../../../../node_modules/.pnpm/lit-html@2.8.0/node_modules/lit-html/src/directives/ref.ts", "../../../../../exports/light-pen.js"],
  "sourcesContent": ["import { css } from \"lit\"\nexport const styles = css`\n[part~=\"sandbox-iframe\"] {\n  width: 100%;\n  height: 100%;\n  border: 1px solid darkgray;\n}\n\n[part~=\"sandbox\"] {\n  color:#272727;\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-template-rows: minmax(0, auto) minmax(0, 1fr);\n}\n\n[part~=\"summary\"] {\n  font-size: .8125rem;\n  font-weight: bold;\n  padding: 0.4rem 0.6rem;\n}\n\n[part~=\"summary\"]:focus {\n  outline: 2px solid blue;\n}\n\n[part~=\"sandbox-editor\"] {\n  display:grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-template-rows: minmax(0, 1fr);\n  column-gap: 0;\n  row-gap: 0;\n  position: relative;\n  padding-top: 3px;\n  max-height: var(--textarea-height, 33vh);\n}\n\n[part~=\"textarea\"] {\n  position: relative;\n  color: transparent;\n  background-color: transparent;\n  caret-color: black;\n  z-index: 1;\n  resize: vertical;\n}\n\n[part~=\"pre\"] {\n  height: var(--textarea-height, auto);\n  width: var(--textarea-width, auto);\n}\n\n[part~=\"pre\"],\n[part~=\"textarea\"] {\n  grid-area:1/1/2/2;\n  margin-bottom:0;\n  min-height:15em;\n  margin: 0;\n  padding: 0;\n\tdisplay: block;\n\tline-height: 1.5;\n  padding: 8px;\n  border: none;\n  overflow: auto;\n  position: relative;\n\n  /* this creates line-wrapping. */\n\tword-break: break-word;\n  white-space: pre-wrap;\n\n  /* No wrapping */\n\t/* word-break: break-all; */\n  /* white-space: pre; */\n  tab-size: 2;\n}\n\n[part~=\"details\"]:not(:first-child) {\n  margin-top: 6px;\n}\n\n[part~=\"pre\"],\n[part~=\"code\"] {\n\tcolor: #272727;\n\tbackground-color: #f7f7f7;\n}\n\n[part~=\"base\"] {\n\tword-wrap: break-word;\n\tcolor: inherit;\n\tfont-size: 1em;\n}\n\n\n[part~=\"sandbox\"],\n[part~=\"base\"] {\n  height: 100%;\n}\n\n[part~=\"pre\"],\n[part~=\"code\"],\n[part~=\"textarea\"] {\n\tfont-family: Menlo, Monaco, \"Courier New\", monospace;\n\tfont-size: 0.875rem;\n}\n\n[part~=\"sandbox-iframe\"] {\n  aspect-ratio:auto;\n  background-color: #fff;\n  margin-bottom: 0;\n}\n\n[part~=\"base\"],\n[part~=\"pre\"],\n[part~=\"code\"],\n[part~=\"sandbox-iframe\"] {\n  border-radius:.25em;\n}\n\n[part~='sandbox-header'],\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-console-result\"] {\n  background-color:#343d4d;\n  color: #fff;\n}\n\n[part~=\"sandbox-header\"] {\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 0.8125em;\n  border-top-right-radius: 0.25rem;\n  border-top-left-radius: 0.25rem;\n}\n\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-content\"] {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n  background-color: #e5e5e5;\n}\n\n\n[part~='sandbox-controls'] button {\n  margin-bottom: 0;\n}\n\n[part~=\"sandbox-console-log\"] {\n  font-family: Menlo,Monaco,\"Courier New\",monospace;\n  font-size: 0.875em;\n  min-height: 1.2em;\n}\n\n.log-warn {\n  color:#f9d767\n}\n\n.log-error {\n  color:#f9c8c8\n}\n\n[part~=\"sandbox-header\"],\n[part~=\"sandbox-code\"],\n[part~=\"sandbox-iframe-wrapper\"],\n[part~=\"sandbox-console\"],\n[part~=\"sandbox-console-result\"] {\n  padding: 0.5em;\n}\n\n[part~=\"sandbox-code\"] {\n  max-height: 100%;\n  overflow-y: auto;\n}\n\nbutton:where([part~=\"panel-resizer\"]) {\n  height: calc(100% - 0.5em);\n  cursor: col-resize;\n  background-color: white;\n}\n\nbutton[part~=\"panel-resizer\"]:is(:active, :hover, .is-active) {\n  cursor: col-resize;\n}\n\n[resizing],\n[part~=\"panel-resizer\"].is-active {\n  cursor: col-resize;\n}\n\n[part~=\"sandbox-content\"] {\n  display:grid;\n  grid-template-columns: minmax(0,var(--start-panel-width, 1fr)) minmax(0, auto) minmax(0, var(--end-panel-width, 1fr));\n  grid-template-rows: minmax(0, 1fr);\n}\n\n[part~=\"sandbox-iframe-wrapper\"] {\n}\n\n[part~=\"sandbox-console-result\"] {\n  border-top:1px solid #1f252f;\n  border-bottom-left-radius:0;\n}\n`\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback: WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n> = new WeakMap();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "// @ts-check\n\nimport { LitElement, html } from \"lit\"\nimport { styles } from \"./light-pen.styles.js\"\nimport { when } from \"lit/directives/when.js\";\n\nimport { theme } from './default-theme.styles.js'\n\nimport HighlightJS from 'highlight.js/lib/core';\nimport JavaScript from 'highlight.js/lib/languages/javascript';\nimport HTML from 'highlight.js/lib/languages/xml';\nimport CSS from 'highlight.js/lib/languages/css';\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ref } from \"lit/directives/ref.js\";\nimport { DefineableMixin } from \"web-component-define\";\nimport { baseStyles, buttonStyles } from \"./base-styles.js\";\n\nimport { clamp } from '../internal/clamp.js'\nimport { dedent } from \"../internal/dedent.js\";\nimport { drag } from \"../internal/drag.js\";\nimport { defaultSandboxSettings } from \"../internal/default-sandbox-settings.js\";\nimport { resizeIcon } from \"../internal/resize-icon.js\";\n\n// Then register the languages you need\nHighlightJS.registerLanguage('javascript', JavaScript);\nHighlightJS.registerLanguage('xml', HTML);\nHighlightJS.registerLanguage('css', CSS);\n\n/**\n * @typedef {\"html\" | \"css\" | \"js\"} SupportedLanguages\n * @typedef {HTMLTextAreaElement | HTMLScriptElement | HTMLTemplateElement} SafeTemplateElements\n */\n\n\n/**\n * @customElement\n * @tagname light-pen\n * @slot html - HTML to insert\n * @slot css - CSS to insert\n * @slot js - JavaScript to insert\n * @slot title - The title to appear at the top of the editor\n *\n * @part base - The base wrapper\n * @part sandbox - The wrapper around the editor and the iframe\n * @part sandbox-header - The wrapper around the header area\n */\nexport default class LightPen extends DefineableMixin(LitElement) {\n  // Static\n  static baseName = \"light-pen\"\n\n  static styles = [baseStyles, buttonStyles, theme, styles]\n\n  static languageMap = {\n    html: \"xml\",\n    css: \"css\",\n    js: \"javascript\"\n  }\n\n  static properties = {\n    openLanguages: { reflect: true, attribute: \"open-languages\" },\n    resizePosition: { attribute: \"resize-position\", reflect: true, type: Number },\n    console: { reflect: true },\n    sandboxSettings: { reflect: true, attribute: \"sandbox-settings\"},\n    baseUrl: { reflect: true, attribute: \"base-url\" },\n    languages: { attribute: false, type: Array },\n    cssCode: { attribute: false },\n    htmlCode: { attribute: false },\n    jsCode: { attribute: false },\n    htmlResizeObserver: { attribute: false },\n    jsResizeObserver: { attribute: false },\n    cssResizeObserver: { attribute: false },\n    resizing: { attribute: false },\n  }\n  // Overrides\n\n  /**\n   * @override\n   */\n  constructor() {\n    super()\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.htmlResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.jsResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.cssResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n\n    /**\n     * @attribute\n     * @reflect\n     * @type {number}\n     */\n    this.resizePosition = 50\n\n    /**\n     * Languages to have open on initial render\n     * Comma separated list of elements to open on initial render \"html,css,js\" to open all.\n     * @attribute\n     * @reflect\n     * @type {string}\n     */\n    this.openLanguages = \"\"\n\n    /**\n     * @type {Array<SupportedLanguages>}\n     * @property\n     */\n    this.languages = [\"html\", \"css\", \"js\"]\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {\"enabled\" | \"disabled\"}\n     */\n    this.console = \"disabled\"\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {string}\n     */\n    this.consoleText = \"\"\n\n    /**\n     * What to reset the HTML to.\n     * @property\n     * @type {string}\n     */\n    this.htmlReset = \"\"\n\n    /**\n     * What to reset the CSS to.\n     * @property\n     * @type {string}\n     */\n    this.cssReset = \"\"\n\n    /**\n     * What to reset the JS to.\n     * @property\n     * @type {string}\n     */\n    this.jsReset = \"\"\n\n    /**\n     * @property\n     * @internal\n     * @type {number}\n     */\n    this.cachedWidth = 0\n\n    /**\n     * @property\n     * @type {string}\n     */\n    this.sandboxSettings = \"\"\n\n    /**\n     * @internal\n     */\n    this.resizing = false\n\n    /**\n     * @property\n     * @type {string}\n     * The baseURL to use for fetching assets. This maps to a `<base href=${this.baseUrl}>` inside of the `<iframe>`.\n     */\n    this.baseUrl = \"\"\n\n    /**\n     * @property\n     * srcdoc to pass to the <iframe>\n     */\n    this.iframeSrcDoc = \"\"\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback () {\n    super.connectedCallback()\n\n    this.updateCachedWidth()\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this)\n\n      /*\n       * Grab reset values so we can reset the inputs\n       */\n      this.htmlReset = this.htmlTextArea?.value || \"\"\n      this.cssReset = this.cssTextArea?.value || \"\"\n      this.jsReset = this.jsTextArea?.value || \"\"\n    });\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleTextAreaResize (entries) {\n    const { target } = entries[0]\n    const {\n      // left, right,\n      top, bottom\n    } = entries[0].contentRect;\n    // const width = left + right\n    const height = top + bottom\n\n    // @ts-expect-error\n    target.parentElement.style.setProperty(\"--textarea-height\", `${height}px`)\n\n    // One day we'll allow the textarea to resize the width.\n    // target.parentElement.style.setProperty(\"--textarea-width\", `${width}px`)\n  }\n\n  /**\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth () {\n    const { left, right } = this.getBoundingClientRect()\n    const width = left + right\n    this.cachedWidth = width\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize (entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right\n    // Resize when a primary panel is set\n    this.cachedWidth = width\n  }\n\n  /** Getters / Setters */\n\n  /**\n   * @returns {null | undefined | HTMLIFrameElement}\n   */\n  get iframeElem () {\n    return this.shadowRoot?.querySelector(\"iframe\")\n  }\n\n  /**\n   * Override this to use a highlighter of your choice.\n   * @param {{code: string, language: SupportedLanguages}} options\n   */\n  highlightCode (options) {\n    let { code, language } = options\n\n    const highlightJsLanguage = /** @type {typeof LightPen} */ (this.constructor).languageMap[language]\n\n    code = this.unescapeCharacters(code)\n    code = this.injectNewLine(code)\n\n    return HighlightJS.highlight(code, {language: highlightJsLanguage}).value\n  }\n\n  /**\n   * @param {string} text\n   */\n  unescapeCharacters (text) {\n    // Update code\n    return text.replaceAll(\"&lt;/script>\", \"</script>\")\n  }\n\n  /**\n   * Highlighters strip newlines. But you can see new lines in <textarea>, this fixes that.\n   * @param {string} text\n   */\n  injectNewLine (text) {\n    // Handle final newlines (see article)\n    if(text[text.length-1] == \"\\n\") { // If the last character is a newline character\n      text += \"\\n\"; // Add a placeholder space character to the final line\n    }\n\n    return text\n  }\n\n  updateIframeContent () {\n    if (this.iframeElem == null) return\n\n    let clone = this.iframeElem.cloneNode();\n    this.iframeElem.replaceWith(clone);\n\n    // this.setupIframeLogging();\n\n    if (this.iframeElem.contentWindow == null) return;\n\n    let page = `\n      <!doctype html><html>\n        <head><meta charset=\"utf-8\">\n          <style>${this.cssCode}<\\/style>\n          <base href=\"${this.baseUrl || document.baseURI}\">\n        </head>\n        <body>\n          ${this.htmlCode}\n          <script type=\"module\">\n            ${this.jsCode}\n          </script>\n        </body>\n      </html>\n    `\n\n    const iframe = this.shadowRoot?.querySelector(\"iframe\")\n    if (iframe) {\n      const blob = new Blob([page], { type: \"text/html\" })\n      const blobUrl = URL.createObjectURL(blob)\n\n      const prevBlobUrl = this.blobUrl\n      this.blobUrl = blobUrl\n\n      if (iframe) {\n\t      iframe.src = blobUrl\n\t    }\n\n\t    setTimeout(() => {\n        if (prevBlobUrl) URL.revokeObjectURL(prevBlobUrl)\n\t    }, 1000)\n\t  }\n  }\n\n  inputHandler () {\n    this.updateCode()\n  }\n\n  /**\n   * @param {import(\"lit\").PropertyValues} changedProperties\n   */\n  willUpdate (changedProperties) {\n    if ([\"cssCode\", \"htmlCode\", \"jsCode\", \"baseUrl\"].some((str) => changedProperties.has(str))) {\n      if (this._iframeDebounce != null) window.clearTimeout(this._iframeDebounce)\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300)\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition()\n    }\n\n    super.willUpdate(changedProperties)\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback()\n\n    this.htmlTextArea && this.htmlResizeObserver.disconnect()\n    this.cssTextArea && this.cssResizeObserver.disconnect()\n    this.jsTextArea && this.jsResizeObserver.disconnect()\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  htmlTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.htmlTextArea = textarea\n    this.htmlResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  cssTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.cssTextArea = textarea\n    this.cssResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   */\n  jsTextAreaChanged (textarea) {\n    if (!textarea) return\n    this.jsTextArea = textarea\n    this.jsResizeObserver.observe(textarea)\n  }\n\n  /**\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown (event) {\n    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * (1);\n\n      event.preventDefault();\n\n      if (event.key === 'ArrowLeft') {\n        newPosition -= incr;\n      }\n\n      if (event.key === 'ArrowRight') {\n        newPosition += incr;\n      }\n\n      if (event.key === 'Home') {\n        newPosition = 100;\n      }\n\n      if (event.key === 'End') {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(newPosition, 0, 100);\n    }\n  }\n\n  updateResizePosition (resizePosition = this.resizePosition) {\n    const startWidth = resizePosition\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth\n      this.style.setProperty(\"--start-panel-width\", `${startWidth}%`)\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`)\n    }\n  }\n\n\n  /**\n   * Lovely helper to scoop up our html, css, and js code\n   */\n  updateCode () {\n    this.cssCode = this.cssTextArea?.value\n    this.htmlCode = this.htmlTextArea?.value\n    this.jsCode = this.jsTextArea?.value\n  }\n\n  resetValues () {\n    if (this.htmlTextArea) {\n      this.htmlCode = this.htmlReset\n      this.htmlTextArea.value = this.htmlReset\n    }\n\n    if (this.cssTextArea) {\n      this.cssCode = this.cssReset\n      this.cssTextArea.value = this.cssReset\n    }\n\n    if (this.jsTextArea) {\n      this.jsCode = this.jsReset\n      this.jsTextArea.value = this.jsReset\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} evt\n   */\n  keydownHandler(evt) {\n    /**\n     * @type {HTMLTextAreaElement}\n     */\n    // @ts-expect-error\n    const target = evt.target\n\n    const key = evt.key\n\n    if ([\"Tab\", \"Escape\"].includes(key)) {\n      evt.preventDefault()\n\n      if ('Tab' === evt.key) {\n        return target.setRangeText('\\t', target.selectionStart, target.selectionEnd, 'end')\n      }\n\n      if ('Escape' === evt.key) {\n        let e = target.closest('details');\n        if (!e) return;\n\n        e.querySelector(\"summary\")?.focus()\n      }\n    }\n  }\n\n  // setupIframeLogging() {\n  //   if (!this.console && this.result !== 'console') return;\n  //\n  //   if (this.iframeElem == null) return\n  //   if (this.iframeElem.contentWindow == null) return\n  //\n  //   this.iframeElem.contentWindow.document.open(),\n  //   this.iframeElem.contentWindow.document.writeln(\n  //     '<script>\\n\\t\\t\\t\\tlet __console = Object.assign({}, console);\\n\\t\\t\\t\\tlet __listener = function () {};\\n\\t\\t\\t\\tfor (let type in console) {\\n\\t\\t\\t\\t\\tconsole[type] = function (...msg) {\\n\\t\\t\\t\\t\\t\\t__listener({source: \\'iframe\\', msg, type}, \\'*\\');\\n\\t\\t\\t\\t\\t\\t__console[type](...msg);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconsole.listen = function (callback) {\\n\\t\\t\\t\\t\\t__listener = callback;\\n\\t\\t\\t\\t};\\n\\t\\t\\t</script>'\n  //   ),\n  //   this.iframeElem.contentWindow.document.close();\n  //   let e = this;\n  //\n  //\n  //   // @ts-expect-error\n  //   this.iframeElem.contentWindow.console.listen(\n  //     function (t) {\n  //       for (let n of t.msg) {\n  //         let a = document.createElement('div');\n  //         a.className = `log-${ t.type }`,\n  //         a.textContent = this.getConsoleMessage(),\n  //         e.loggerElem?.append(a)\n  //       }\n  //     }\n  //   )\n  // }\n\n  /**\n   * @param {Event} e\n   */\n  handleTemplate (e) {\n    /**\n     * @type {HTMLSlotElement}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    const slotName = slot.getAttribute(\"name\")\n    if (slotName == null) return\n\n    if (!this.languages.includes(/** @type {SupportedLanguages} */ (slotName))) {\n      return\n    }\n\n    const codeType = /** @type {SupportedLanguages} */ (slotName)\n\n    const templates = slot.assignedElements({flatten: true})\n\n    const code = dedent(this.unescapeCharacters(templates.map((template) => template.innerHTML).join(\"\\n\")))\n\n    this[`${codeType}Code`] = code\n\n    const textArea = this[`${codeType}TextArea`]\n\n    if (textArea && code) {\n      textArea.value = code\n    }\n  }\n\n  // Rendering\n  renderConsole () {\n    return html`<div part=\"sandbox-console-log\"></div>`\n  }\n\n  /**\n   * @override\n   */\n  render () {\n\t\treturn html`\n      <!-- Where users can declaratively provide templates -->\n      <div style=\"display: none;\">\n        <slot name=\"html\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"css\" @slotchange=${this.handleTemplate}></slot>\n        <slot name=\"js\" @slotchange=${this.handleTemplate}></slot>\n      </div>\n\n      <div part=\"base\" ?resizing=${this.resizing}>\n\t\t\t  <div part=\"sandbox\">\n\t\t\t\t  <div part=\"sandbox-header\">\n            <slot name=\"title\">\n\t\t\t\t\t    <strong>\n                Code Editor\n              </strong>\n            </slot>\n\n\t\t\t\t\t  <span part=\"sandbox-controls\">\n\t\t\t\t\t\t  <button part=\"sandbox-controls-button sandbox-reset\" @click=${this.resetValues}>\n                Reset\n              </button>\n\n\t\t\t\t\t\t  ${when(this.console === \"enabled\", () => html`<button @click={}>Clear Console</button>`)}\n\t\t\t\t\t  </span>\n\t\t\t\t</div>\n\t\t\t\t<div part=\"sandbox-content\">\n\t\t\t\t\t<div part=\"sandbox-code\">\n            ${this.renderDetails('html')}\n            ${this.renderDetails('css')}\n            ${this.renderDetails('js')}\n\t\t\t\t\t</div>\n\n          <button\n            id=\"panel-resizer\"\n            part=\"panel-resizer\"\n            role=\"separator\"\n            aria-valuenow=${this.resizePosition}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            @keydown=${this.handleResizerKeydown}\n            @pointerdown=${this.handleDrag}\n            @touchstart=${this.handleDrag}\n            class=${this.resizing ? \"is-active\" : \"\"}\n          >\n            <slot name=\"panel-resize-icon\">\n              ${resizeIcon}\n            </slot>\n            <span class=\"visually-hidden\">Resize Panel. Pull to left or right to resize.</span>\n          </button>\n\n\t\t\t\t\t<div part=\"sandbox-iframe-wrapper\">\n\t\t\t\t\t\t<iframe\n              sandbox=${this.sandboxSettings || defaultSandboxSettings}\n              part=\"sandbox-iframe\"\n              frameborder=\"0\"\n              src=${this.blobUrl}\n             ></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n        <!--\n        ${when(\n            this.console === \"enabled\",\n            () => html`\n              <details class=\"sandbox-console\" ?open=${console}>\n                <summary part=\"summary summary-console\" tabindex=\"0\">Console</summary>\n                ${this.consoleText}\n              </details>\n            `\n        )}\n        -->\n\t\t\t</div>\n\t\t</div>`\n\t}\n\n  /**\n   * @param {PointerEvent} event\n   */\n\thandleDrag (event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    if (this.iframeElem) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      this.iframeElem.style.pointerEvents = \"none\"\n    }\n\n    this.resizing = true\n\n    drag(this, {\n      onMove: (x, _y) => {\n        this.resizing = true\n        let newPositionInPixels = x;\n\n\n        this.resizePosition = clamp(this.pixelsToPercentage(newPositionInPixels), 0, 100);\n        this.updateResizePosition()\n      },\n      onStop: () => {\n        if (this.iframeElem) {\n        // Re-enable pointerevents so you can use tab keys etc.\n          this.iframeElem.style.pointerEvents = \"auto\"\n        }\n\n        this.resizing = false\n      },\n      initialEvent: event\n    });\n  }\n\n  /**\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage (pixels) {\n    return (pixels / this.cachedWidth) * 100\n  }\n\n  /**\n   * @param {SupportedLanguages} language\n   */\n  renderDetails (language) {\n    let fullLanguage = language.toUpperCase()\n\n    let code = this[`${language}Code`]\n\n    // @ts-expect-error\n    code = code ? unsafeHTML(this.highlightCode({ code, language })) : \"\"\n    const open = this.openLanguages.split(\",\").includes(language)\n\n\t\treturn html`\n      <details ?open=${open} part=\"details details-${language}\">\n\t\t\t\t<summary part=\"summary summary-${language}\">\n          ${fullLanguage}\n        </summary>\n\t\t\t\t<label for=\"sandbox-${language}\" class=\"visually-hidden\">${fullLanguage} code</label>\n\t\t\t\t<div class=\"sandbox-editor\" part=\"sandbox-editor\">\n          <!-- This is where the fancy syntax highlighting comes in -->\n\t\t\t\t\t<pre\n            id=\"pre-${language}\"\n            data-code-lang=${language}\n            aria-hidden=\"true\"\n            part=\"pre pre-${language}\"\n          ><code\n              part=\"code code-${language}\"\n              class=\"language-${language}\"\n            >${code}</code></pre>\n          <!-- IMPORTANT! There must be no white-space above. -->\n\t\t\t\t\t<textarea\n            ${\n              // @ts-expect-error\n              ref(this[`${language}TextAreaChanged`])\n            }\n            id=\"textarea-${language}\"\n            data-code-lang=${language}\n            part=\"textarea textarea-${language}\"\n            spellcheck=\"false\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            translate=\"no\"\n            @keydown=${this.keydownHandler}\n            @input=${this.inputHandler}\n            @input=${this.syncScroll}\n            @scroll=${this.syncScroll}\n            value=${this[`${language}Code`]}\n          ></textarea>\n\t\t\t\t</div>\n\t\t\t</details>\n\t\t`\n  }\n\n  /**\n   * @internal\n   * @param {Event} e\n   */\n  syncScroll (e) {\n    /**\n     * @type {null | HTMLTextAreaElement}\n     */\n    // @ts-expect-error\n    const textarea = e.target\n\n    if (textarea == null) return\n\n    const lang = textarea.dataset.codeLang\n\n    const pre = this.shadowRoot?.querySelector(`#pre-${lang}`)\n\n    if (pre == null) return\n\n    pre.scrollTop = textarea.scrollTop;\n    pre.scrollLeft = textarea.scrollLeft;\n  }\n}\n\n"],
  "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",
  "names": ["styles", "i", "_ChildPart", "ChildPart", "_$LH", "isSingleExpression", "part", "strings", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "_b", "_a", "o", "e", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_c", "_$notifyConnectionChanged", "_d", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "_$initialize", "part", "attributeIndex", "super", "_$isConnected", "_$AO", "isClearingDirective", "reconnected", "call", "disconnected", "setValue", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "render", "_ref", "nothing", "update", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "_a", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "t", "_b", "_c", "disconnected", "reconnected", "core_default", "javascript", "xml", "css", "LightPen", "DefineableMixin", "s", "entries", "target", "top", "bottom", "height", "left", "right", "width", "options", "code", "language", "highlightJsLanguage", "text", "clone", "page", "iframe", "blob", "blobUrl", "prevBlobUrl", "changedProperties", "str", "textarea", "event", "newPosition", "incr", "clamp", "resizePosition", "startWidth", "endWidth", "evt", "key", "e", "slot", "slotName", "codeType", "templates", "dedent", "template", "textArea", "x", "n", "resizeIcon", "defaultSandboxSettings", "drag", "_y", "newPositionInPixels", "pixels", "fullLanguage", "o", "open", "lang", "pre", "__publicField", "baseStyles", "buttonStyles", "theme", "styles"]
}
